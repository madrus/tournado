---
description: Mobile-first layout considerations and code preservation guidelines
globs: ["**/*.{ts,tsx,js,jsx}"]
alwaysApply: true
---

# Code Refactoring

These rules ensure proper handling of code history and mobile-first layouts during refactoring.

## Mobile-First Layout Considerations

### Responsive Design Rules
- Always consider both mobile and desktop layouts when refactoring
- Mobile layout should be the default/base implementation
- Desktop layout should be added using the lg breakpoint

### Breakpoint Usage
- **Mobile**: < 1024px (default, no prefix)
- **Desktop**: > 1024px (use `lg:` prefix)

### Layout Testing Checklist
Before completing any layout refactoring:
- [ ] Verify mobile layout (< 1024px)
- [ ] Verify desktop layout (> 1024px)
- [ ] Check for any layout breaking points
- [ ] Ensure touch targets are appropriately sized for mobile
- [ ] Verify navigation works on both layouts

## Mobile-First Implementation Examples

### ✅ Good: Mobile-First Approach
```typescript
// Mobile-first: Base styles for mobile, lg: for desktop
<div className="flex flex-col gap-2 lg:flex-row lg:gap-4">
  <div className="w-full lg:w-1/2">Mobile full width, desktop half width</div>
  <div className="w-full lg:w-1/2">Mobile full width, desktop half width</div>
</div>
```

### ❌ Bad: Desktop-First Approach
```typescript
// Desktop-first: Conflicting responsive classes
<div className="flex flex-row gap-4 flex-col">
  <div className="w-1/2 w-full">Desktop half width, mobile full width</div>
  <div className="w-1/2 w-full">Desktop half width, mobile full width</div>
</div>
```

### Common Mobile-First Patterns
```typescript
// Navigation
<nav className="flex flex-col gap-2 lg:flex-row lg:gap-6">

// Cards/Grid
<div className="grid grid-cols-1 gap-4 lg:grid-cols-2 lg:gap-6">

// Spacing
<div className="p-4 lg:p-8">

// Typography
<h1 className="text-2xl lg:text-4xl">

// Buttons
<button className="w-full lg:w-auto">
```

## Code Preservation Guidelines

### Historical Code Preservation
- Do not delete previously commented out code
- Only delete code lines that are directly involved in the refactoring
- Preserve code history for future reference

### Comment Management
- Change comments to refactored code lines if applicable
- Do not modify or delete comments unless they relate to:
  - Code lines being changed
  - Code lines being deleted
- Maintain documentation context

### Refactoring Example
```typescript
// ✅ Good: Preserves history and updates comments
// Original implementation
// function calculateTotal(items: Item[]) {
//   let total = 0;
//   for (const item of items) {
//     total += item.price;
//   }
//   return total;
// }

// Updated to use reduce for better performance
function calculateTotal(items: Item[]) {
  return items.reduce((total, item) => total + item.price, 0);
}
```

## Enforcement

These mobile-first and preservation rules should be:
- ✅ **Applied to all layout refactoring**
- ✅ **Checked during responsive design updates**
- ✅ **Verified through mobile and desktop testing**
- ✅ **Followed when updating existing components**
