---
description: Language-specific coding standards and documentation rules
globs: ["**/*.{ts,tsx,js,jsx,json,md,mdx}"]
alwaysApply: true
---

# Coding Standards

These rules ensure consistent coding style and standards across the project.

## Markdown Documentation Standards

### No Bold Formatting in Headers

**Rule:** Never use bold markdown formatting (`**text**`) within markdown headers. Headers are already emphasized by their `#` syntax.

#### ✅ Correct Header Formatting
```markdown
# Project Overview
## Key Features
### 1. Smart Detection
#### Configuration Options
```

#### ❌ Incorrect Header Formatting
```markdown
# **Project Overview**
## **Key Features**
### 1. **Smart Detection**
#### **Configuration Options**
```

#### Why This Rule?
- **Clean Syntax** - Headers are already emphasized by their level
- **Consistent Styling** - Avoids redundant formatting
- **Better Readability** - Cleaner appearance in both source and rendered form
- **Standard Practice** - Follows markdown best practices

## Internationalization (i18n) Standards

### Dutch Language Capitalization

**Rule:** In Dutch translations, only capitalize the first word of titles and labels (sentence case), not every word.

#### ✅ Correct Dutch Capitalization
```json
{
  "teams": {
    "form": {
      "teamInfo": "Team informatie",
      "teamLeaderInfo": "Teamleider informatie",
      "clubName": "Clubnaam",
      "tournamentRequired": "Toernooi selectie is verplicht"
    }
  }
}
```

#### ❌ Incorrect Dutch Capitalization
```json
{
  "teams": {
    "form": {
      "teamInfo": "Team Informatie",
      "teamLeaderInfo": "Teamleider Informatie",
      "clubName": "Club Naam",
      "tournamentRequired": "Toernooi Selectie Is Verplicht"
    }
  }
}
```

#### Why This Rule?
- **Dutch Grammar** - Dutch uses sentence case for titles, not title case like English
- **Consistency** - Follows Dutch language conventions
- **User Experience** - Feels natural to Dutch speakers

### Dash Usage (no em dashes)

**Rule:** Never use em dashes (—) in documentation. Use a spaced hyphen instead: ` - ` (one space on each side).

#### ✅ Correct
```markdown
Phase 1 - Authentication Modernization
Real-time score updates - scope TBD
This decision - while optional - improves readability.
```

#### ❌ Incorrect
```markdown
Phase 1 — Authentication Modernization
Real-time score updates — scope TBD
This decision—while optional—improves readability.
```

#### Why This Rule?
- **Consistency** - Uniform punctuation across docs and UIs
- **Readability** - Spaced hyphens are clearer in many fonts and locales
- **Cross-platform** - Avoids encoding/typographic issues in tooling

## Implementation Guidelines

### When Adding Dutch Translations
1. Only capitalize the first letter of the first word
2. Keep all other words lowercase unless they are proper nouns
3. Follow Dutch sentence structure and grammar rules

### When Writing Documentation
1. Use standard markdown header formatting without bold
2. Maintain consistent header hierarchy
3. Follow markdown best practices for readability

### Code comment policy

Rule: Comments must describe only the current behavior (status quo). Do not narrate history or describe what changed.

- Focus comments on what the code does now, the intent, constraints, invariants, and reasons
- Do not write change logs in comments (avoid phrases like "changed from", "previously", "now we", "used to")
- If historical context is needed, put it in commit messages or documentation, not inline code comments
- Keep comments concise and specific; avoid duplicating the code in prose

Examples

```ts
// ✅ Good: states current condition and intent
// Delete the team leader only when no teams reference it
if (remainingTeams === 0) {
  await prisma.teamLeader.deleteMany({ where: { id: leaderId } })
}

// ❌ Bad: narrates historical changes
// We used to delete unconditionally, but now we delete only if no teams reference it
```

## Examples in Practice

### Translation Keys
```json
// ✅ Good - Dutch
{
  "auth": {
    "signInRequiredToCreateTeam": "Je moet inloggen om een team aan te maken"
  }
}

// ❌ Bad - Dutch
{
  "auth": {
    "signInRequiredToCreateTeam": "Je Moet Inloggen Om Een Team Aan Te Maken"
  }
}
```

### Documentation Structure
```markdown
# ✅ Good - Clean Headers
## Authentication System
### User Roles
#### Admin Permissions

# ❌ Bad - Bold Headers
## **Authentication System**
### **User Roles**
#### **Admin Permissions**
```

### Function Arguments Typing

✅ Correct

```ts
export type UserForm = {
  name: string
  email: string
}

export function createUser(input: Readonly<UserForm>) {
  // ...
}
```

❌ Incorrect (inline object type)

```ts
export function createUser(input: { name: string; email: string }) {
  // ...
}
```


---

# Various Rules

- React 18+, React Router v7+, TypeScript strict mode, ESM
- No `any` unless safely narrowed
- Prefer inference but always keep **strong typing** (never drop types entirely)
- Function declarations over expressions
- Function arguments having complex types
- No classes, no default exports, favor pure functions
- Single quotes, spaces, **no semicolons**
- Use **Zustand** for view + form state (reset/partial prefill)
- Use **native fetch** only, small typed API helpers
- Keep code minimal, no extra dependencies
- Match existing folder layout and naming
- When asked for code, output **code blocks only**
- If info is missing, ask 3 concise questions at the end
- **Function arguments with complex types must be typed as `Readonly<ComplexType>`**, where:
  - `ComplexType` is a separate exported type (not an inline object literal)
  - This enforces immutability and improves reuse across files

---

## Enforcement

These rules should be:
- ✅ **Followed in all new code**
- ✅ **Applied when refactoring existing code**
- ✅ **Checked during code reviews**
- ✅ **Remembered by AI assistants working on this project**
