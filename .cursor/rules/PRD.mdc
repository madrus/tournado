---
description: Product Requirements Document - Tournado Tournament Management
globs:
alwaysApply: false
---

# Product Requirements Document

NOTE: This **PRD** defines the product requirements for **Tournado Tournament Management** project. The application is a frontend-first React Router v7 + TypeScript + Vite app with SSR, Prisma/SQLite, and a mobile-first UI.

## Executive Summary

Status legend: [Implemented], [In Progress], [Planned]

For public visitors and competition stakeholders, build a modern tournament management platform that makes it simple to explore tournaments, teams, groups, and matches, and to register teams for participation. For managers and staff, provide a secure, role-based workspace to manage tournaments end-to-end (tournaments, teams, groups, matches, assignments, and results) with a clear, mobile-first experience.

## Product Vision and Mission

**Vision Statement**: Become the most intuitive, mobile-first platform for organizing and following amateur and youth football tournaments, delivering clarity for the public and control for managers.

**Mission**: Empower managers to run tournaments efficiently and empower audiences to follow them effortlessly by combining a focused UI, strong role-based access control, and reliable data modeling for teams, groups, matches, and standings.

---

## Current State Analysis

### ✅ Implemented Features

Authentication [Implemented]

- [x] Email/password authentication with secure cookie sessions
- [x] Sign-in, sign-up, and sign-out routes
- [x] Role-based guards and unauthorized handling
- [x] Smart redirects based on role and requested path

Teams [Implemented]

- [x] Public teams section with team creation and listing
- [x] Admin teams section with full CRUD
- [x] Reusable `TeamChip` and `TeamList` components

Tournaments [Implemented]

- [x] Admin-only tournaments section with full CRUD
- [x] Mobile-optimized swipe-to-delete interactions

Routing & Structure [Implemented]

- [x] React Router v7 with nested layouts and flat-routes discovery
- [x] **Public routes**: `/teams`, **Auth routes**; Admin routes under obfuscated base path (Admin Panel)

Internationalization [Implemented]

- [x] i18next with RTL support
- [x] Dutch sentence case for titles/labels

Design & Theming [Implemented]

- [x] Dark/light theme with system detection and manual toggle
- [x] Semantic color tokens (no hard-coded colors); 20+ accent palettes
- [x] Icon system audited for theme compatibility (31 SVGs, currentColor)

State Management [Implemented]

- [x] Zustand stores with SSR-safe hydration and persistence

PWA & Error Handling [Implemented]

- [x] Manifest and service worker
- [x] General error boundaries and auth-specific error boundary

Security & RBAC [Implemented]

- [x] Role-based access control middleware and route guards
- [x] Role-based landing pages after login
- [x] Rate limiting for auth and admin actions

Testing & Tooling [Implemented]

- [x] Vitest for unit/integration; Playwright for E2E
- [x] Documented dev/test workflows

Database & Data Model [Implemented]

- [x] Prisma/SQLite with models for `User`, `Team`, `Tournament`, `Match`, `GroupSet`, `Group`, `GroupSlot`, `MatchScore`

### 🔄 In Progress Features

- [ ] Team allocations into groups for the selected tournament (CRUD over `GroupSet`/`Group`/`GroupSlot`)

### 📋 Planned Features (PRD Scope)

**Phase 1 - Authentication Modernization (Top Priority) [In Progress]**

- [x] Firebase project setup and configuration (TASK-0001 completed)
- [x] Firebase-backed session cookie bridging (TASK-0002 completed)
- [x] Google Authentication via Firebase (TASK-0003 completed)
- [x] Post-login redirects, logout, and credential persistence (TASK-0003 completed)
- [x] Visible auth status indicator (TASK-0003 completed)
- [ ] Firebase Email/Password Authentication (TASK-0004 planned)
- [ ] Multi-super-admin role assignment system (TASK-0004 planned)
- [ ] Complete legacy authentication removal (TASK-0004 planned)

**Phase 2 - Groups & Playoffs (MVP) [Planned]**

- [ ] Groups and seeding workflows
- [ ] Playoffs: multi-stage with knockout via groups
- [ ] Competition status: standings and placements

**Phase 3 - Matches & Scoring [Planned]**

- [ ] Match schedule planning (date/time/location) for tournaments
- [ ] Score registration by referees
- [ ] Live/near-real-time standings and basic statistics

**Phase 4 - Public Engagement [Planned]**

- [ ] Public tournament dashboard and live updates
- [ ] Standings and classifications
- [ ] Notifications (opt-in)

**Phase 5 - Advanced Brackets (post-MVP) [Planned]**

- [ ] Playoffs via different bracket formats: s: single-elimination, double-elimination, placement matches, Swiss system, and multi-stage using dedicated knockout UI
- [ ] Schema and visual UI; seeding and byes

**Phase 6 - Subscriptions & Billing (future) [Planned]**

- [ ] Subscriptions for managers to organize tournaments
- [ ] Payments (Stripe) for subscriptions and voluntary contributions
- [ ] Financial dashboard (ADMIN/BILLING) with totals and drill-down

**Phase 7 - Content Management (future) [Planned]**

- [ ] Articles (text/images/video) for home, tournament, team and match pages via a headless CMS

---

## User Personas & Use Cases

**Primary personas for MVP**

- [ ] Admin
- [ ] Manager
- [ ] Referee
- [ ] Public

**Secondary personas**

- [ ] Editor (future)
- [ ] Billing (future)

### Admin

#### **Authentication**: Required (admin role)

RBAC note: Admin inherits Manager/Referee/Public permissions; full Admin Panel access including user authorization.

**Primary Goals**: Governing access and platform configuration

**Key Features Needed**:

- [ ] Approve/reject user registrations; assign roles
- [ ] Oversee tournaments and user activity; manage data integrity

**Use Cases**:

- [ ] When a new manager applies, I want to review and assign a role so I can maintain platform safety
- [ ] When issues arise, I want admin dashboards to intervene and correct data quickly

### Manager

**Authentication**: Required

RBAC note: Manager inherits all Referee permissions; Admin Panel access with manager-scoped features.

**Primary Goals**: Create and operate tournaments; manage teams, groups, and match calendars

**Key Features Needed**:

- [ ] Tournament CRUD, team registration and management
- [ ] Group assignments and match scheduling
- [ ] Referee scheduling and assignment; match assignment dashboard (permissions: `referees:assign`, `assignments:manage`)
- [ ] Manage referee pre-auth links (issue/revoke) scoped to assigned matches; no general user role management (admin approves users/roles)
- [ ] Team coordination and communication; results publication workflow
- [ ] Configuration assistance (divisions, categories, tie-breakers)
- [ ] Assign referees via pre-authenticated links

**Use Cases**:

- [ ] When preparing a tournament, I want to register teams and allocate them to groups so I can generate balanced schedules
- [ ] When running the tournament, I want to update the schedule and see standings so I can keep everyone informed

### Referee

**Authentication**: Pre-authenticated link only (no registered user account); a virtual referee user may be created by the system for auditing

RBAC note: Referees are temporary, token-based access holders for a specific tournament. Access is limited to assigned matches via pre-validated, expiring links (revocable). No general Admin Panel login or navigation. Details: See `docs/development/PRD.details.md#referee-access-model`

**Primary Goals**: Submit scores and manage assigned match times within constraints

**Key Features Needed**:

- [ ] Secure, scoped access to their assigned matches (dashboard)
- [ ] Score entry and permitted scheduling adjustments
- [ ] Offline score entry with background sync and conflict handling

**Use Cases**:

- [ ] When a match ends, I want to submit the score immediately so standings stay current
- [ ] When a conflict arises, I want to propose a new time within allowed rules so scheduling remains valid
- [ ] When a team fails to participate in a match, I want to be able to mark the match as cancelled

### Public

**Authentication**: Not required

RBAC note: Read-only public access; no Admin Panel access.

**Primary Goals**: Explore tournaments, teams, groups, matches, and results

**Key Features Needed**:

- [ ] Tournaments and teams browsing; search and filters
- [ ] Live tournament dashboard (live scores, by-field/by-group views)
- [ ] Real-time match results; standings and classifications
- [ ] Match schedules and field information
- [ ] Team registration for public tournaments

**Use Cases**:

- When I follow a tournament, I want to quickly find my team’s group and matches so I can plan attendance
- When checking results, I want up-to-date scores and standings so I can see who advances
- When appropriate, I want to register teams for selected tournaments and specify the contact details for the Team Leader
- I want optional live alerts when my team is about to play or when goals are scored (frequency configurable)


### Editor (future)

**Authentication**: Required (editor role)

RBAC note: Future role; permissions and Admin Panel access TBD.

**Primary Goals**: Publish application-wide and tournament-related content

**Key Features Needed**:

- [ ] CMS integration; create/edit/delete articles on home/tournament/match pages

### Billing (future)

**Authentication**: Required (billing/admin role)

RBAC note: Future role; permissions and Admin Panel access TBD.

**Primary Goals**: Understand subscription revenue and contribution flow

**Key Features Needed**:

- [ ] Totals and trends; drill down into transactions and payment delays

---

## Feature Roadmap

### Phase 1: Authentication Modernization (1-2 weeks)

- [x] Priority: Critical
- [x] Timeline: 1-2 weeks (extended for complete implementation)

#### 1.1 Google Auth + Session Bridging [COMPLETED]

- [x] Implement Firebase Google Auth (TASK-0003)
- [x] Bridge to server via Firebase session cookies; preserve SSR compatibility (TASK-0002)

#### 1.2 Firebase Email/Password + Legacy Removal [TASK-0004]

- [ ] Implement Firebase email/password authentication
- [ ] Multi-super-admin role assignment (environment-based)
- [ ] Complete removal of legacy authentication (bcrypt, Password table, cookie sessions)
- [ ] Admin panel user role management
- [ ] Development database reset (clean slate approach)

#### 1.3 UX & Migration [COMPLETED]

- [x] Replace cookie session auth in UI flows; maintain role checks (TASK-0003)
- [x] Logout invalidation; visible auth status; redirects (TASK-0003)

### Phase 2: Groups & Playoffs (MVP) (3 - 4 weeks)

- [ ] Priority: High
- [ ] Timeline: 3 - 4 weeks

#### 2.1 Group Workflows

- [ ] Group allocation UX over `GroupSet`/`Group`/`GroupSlot`

#### 2.2 Playoff Structures (MVP)

- [ ] Bracket: multi-stage via groups (MVP)
- [ ] Schema + visual UI; basic seeding and byes

#### 2.3 RBAC Hardening

- [ ] Align implementation with PRD RBAC matrix (permissions and scopes)
- [ ] Admin approves users and assigns roles (`ADMIN`, `MANAGER`); no manager role assignment
- [ ] Managers can issue and revoke pre-auth referee links scoped to a tournament and assigned matches (no registered referee accounts)
- [ ] Restrict Referee access to own referee dashboard only; no general Admin Panel navigation
Details: See `docs/development/RBAC.hardening.md`

### Phase 3: Scheduling & Scoring (3 - 4 weeks)

- [ ] Priority: High
- [ ] Timeline: 3 - 4 weeks

#### 3.1 Scheduling

- [ ] Match calendar (date/time/location); constraints by category/division
- [ ] Automatic conflict detection and resolution suggestions (fields/teams/referees)

#### 3.2 Referee Experience

- [ ] Referee dashboard (assignments, statuses, quick actions)
- [ ] Mobile scoring with validation; offline entry with background sync
- [ ] Standings update; basic stats

#### 3.3 Live Updates (baseline)

- [ ] Real-time score/status broadcasting (WebSocket/SSE) - scope TBD
- [ ] Push notifications for critical events (opt-in)
Details: See `docs/development/PRD.details.md#live-updates` and `#notifications`

### Phase 4: Public Engagement (4 - 5 weeks)

- [ ] Priority: High
- [ ] Timeline: 4 - 5 weeks

#### 4.1 Public Tournament Dashboard

- [ ] Live tournament overview; by-field and by-group views
- [ ] Live match progress indicators and results
- [ ] Team pages with performance and history
- [ ] Search and filtering
Details: See `docs/development/PRD.details.md#public-dashboard`

#### 4.2 Standings & Classifications

- [ ] Real-time pool standings; transparent tie-breakers
Details: See `docs/development/PRD.details.md#standings-tie-breakers`

#### 4.3 Notifications (opt-in)

- [ ] Team/match alerts (kickoff, final, optional goal alerts); permissioned

### Phase 5: Advanced Brackets (2 - 3 weeks)

- [ ] Bracket types: single-elimination, double-elimination, placement matches, Swiss system, and multi-stage with full knockout UI
Details: See `docs/development/PRD.details.md#bracket-formats`

### Phase 6: Subscriptions, Communications & Extended (future)

- [ ] Priority: Medium
- [ ] Subscriptions/Billing (Stripe): tiers, payments, billing dashboard
- [ ] Email integration: registration confirmations, match reminders, schedule changes, results
- [ ] Integrations (API, calendar export, social sharing)
- [ ] Extended admin features: multi-tournament series, referee scheduling automation, equipment/field inventory, advanced search, favorites

---

## Success Metrics

### User Engagement Metrics

- [ ] Manager activation: manager that creates ≥1 tournament within 7 days (Target: baseline + TBD)
- [ ] Referee flow completion: scores submitted within 10 minutes after match end (Target: ≥80%)

### Performance Metrics

- [ ] Mobile Lighthouse performance: ≥ 90 on targeted routes
- [ ] TTI < 2s on median mobile for primary pages (cache warmed)

### Business Metrics

- [ ] Teams created per week (Target: baseline + TBD)
- [ ] Tournaments created per month (Target: baseline + TBD)
- [ ] Subscription totals and monthly payments (Target: baseline + TBD)

**Guardrails**:

- [ ] CLS < 0.1
- [ ] Input latency under 100ms for key interactions

---

## Scope

### Features

| Must-have (MVP)                                                | Nice-to-have (Later)            | Explicitly out (Not now)                   |
| -------------------------------------------------------------- | ------------------------------- | ------------------------------------------ |
| Groups and playoffs (schema + UX for groups; playoffs design)  | Payments (contributions)        | CMS + media uploads                        |
| Google Auth (Google account or username/password via Firebase) | Cookie acceptance               | Subscriptions for managers                 |
| Fetch team club icons via API                                  | Install PWA on (mobile) desktop | Chat                                       |
| Matches planning & calendar                                    | Feedback loop for user feedback | Voting and totalisator (betting, no money) |
| Match scores and standings                                     |                                 |                                            |

### Definition of done (MVP)

- [ ] User workflow is fully navigable on mobile first, desktop with lg (>= md?): enhancements
- [ ] All new strings added to `app/i18n/locales` with correct locale keys and Dutch sentence case (except English)
- [ ] Unit tests (Vitest) cover core logic and rendering states
- [ ] E2E happy path (Playwright) validated
- [ ] Lint, typecheck, and build pass: `pnpm validate`
- [ ] Performance budget respected on targeted routes (Lighthouse mobile ≥ 90)
- [ ] Accessibility basics: roles, labels, keyboard nav
- [ ] No remaining references to unrelated stacks (Next.js/Python) in this PRD

---

## Technical Requirements

### Current Technical Architecture

#### Authentication

- **Current State**: Firebase-based authentication with dual method support (TASK-0002, TASK-0003 implemented)
  - ✅ Google OAuth via Firebase
  - ✅ Firebase session cookie bridging for SSR compatibility
  - ✅ Role-guarded routes and smart redirects preserved
  - ❌ Legacy email/password auth still present (pending removal in TASK-0004)
- **Requirements (TASK-0004)**: Complete Firebase authentication implementation
  - Firebase email/password authentication for users without Google accounts
  - Multi-super-admin role assignment via `SUPER_ADMIN_EMAILS` environment variable
  - Complete removal of legacy authentication (bcrypt, Password table, cookie sessions)
  - Admin panel for role management by super admins
  - Development database reset (clean slate migration)
- **Implementation Strategy**: Hard reset approach suitable for development phase (no production users to migrate)
- Details: See `docs/development/PRD.details.md#authentication-bridging` (authentication bridging, tokens, redirects)

#### Teams & Tournaments

- Current State: Public teams listing + creation; Admin teams CRUD; Admin tournaments CRUD; mobile swipe-to-delete
- Requirements (high-level): Complete public team detail; support club icon; extend admin dashboards as needed

#### Groups & Matches

- **Current State**: Data models for `GroupSet`/`Group`/`GroupSlot`; `Match` and `MatchScore` exist but not used yet
- **Limitations**: Group allocation workflows mid-implementation; playoffs not yet modeled; match calendar UX not complete
- **Requirements**: CRUD UX for group allocation; playoff schema (knockout/placement); scheduling tooling with automatic conflict detection/resolution; referee flows
- Details: See `docs/development/PRD.details.md#scheduling-conflicts`, `#referee-experience`, and `#bracket-formats`

#### Internationalization

- **Current State**: `nl`, `en`, `fr`, `ar` (RTL), `tr`, `de` locales present; Dutch sentence case (except English)
- **Requirements (high-level)**: Centralize supported languages in a single config; maintain RTL support; default fallback `nl`
- Details: See `docs/development/PRD.details.md#i18n-details` (i18n centralization and locale handling)

#### Deployment

- **Current State**: Fly.io deployment via container; SQLite volume; SSR enabled
- **Requirements (high-level)**: Keep startup snappy; profile startup path and cache hot routes
- Details: See `docs/development/PRD.details.md#deployment-details` (hosting, ports/healthchecks, build/start)

### Architecture Requirements

- [ ] Authentication bridged via Firebase session cookies; SSR-compatible and role-aware
- [ ] Mobile-first layouts; desktop enhancements via `lg:`; min 44px touch targets
- [ ] i18n languages centralized; RTL support maintained; fallback to `nl`
- [ ] Avoid code duplication; refactor large components into dedicated folders as needed
- [ ] CVA variants for colors; follow existing naming conventions
- [ ] Keep bundles lean; lazy load route segments where appropriate
- [ ] Centralized type system (`app/lib/lib.types.ts` + helpers); convert DB strings to strict types at route boundaries

---

## Performance & Data Loading

- High-level: Use context-appropriate prefetching and lightweight revalidation to keep navigation responsive.
- Targets: Sub-500ms for prefetched navigations; minimal prefetch overhead.
- Details: See `docs/development/PRD.details.md#performance-data-loading` (Prefetching, data freshness strategies).

---

## Architecture overview

### Frontend

- **Core stack**:
  - [ ] React Router v7 + TypeScript + Vite (client + SSR entry where applicable)
  - [ ] Tailwind CSS (mobile-first with `lg:` desktop)
  - [ ] Zustand for view/form state
  - [ ] i18next for internationalization (includes RTL support)
  - [ ] Vitest for unit tests, Playwright for E2E tests
- **Patterns**:
  - [ ] Mobile-first layout and touch targets by default
  - [ ] Routes colocated with layouts; lazy loading where appropriate
  - [ ] Collocate query/mutation logic with components/hooks where feasible

### Server runtime (monolithic app)

- [ ] Frontend-first app using React Router SSR when needed (single repo)
- [ ] Prisma ORM; SQLite database persisted on Fly volume `/data`
- [ ] No separate backend project implied

### PWA

- [ ] Service worker, offline caching, add-to-home-screen
- [ ] Update prompts and background sync where applicable
- [ ] Offline scoring queues with background sync; visible pending state and conflict handling
- [ ] Follow privacy and storage best practices
Details: See `docs/development/PRD.details.md#pwa-details` (offline queues, update prompts, SW debug)
Mobile wrapper: See `docs/development/PRD.details.md#mobile-wrapper` for Capacitor plan (Android/iOS)

### Testing

- [ ] Vitest for unit/component tests
- [ ] Playwright for E2E tests (`playwright/tests`)
- [ ] Tests colocated per project standards; include accessibility states
Details: See `docs/development/PRD.details.md#testing-tooling` (test placement, MCP Vitest server)

### Deployment

- [ ] Primary deployment target: Fly.io (see `fly.toml`)
  - [ ] Persistent volume for SQLite; SSR enabled
- [ ] Alternative hosting documented separately if SSR is removed
- [ ] Rollbacks documented in Release plan
Details: See `docs/development/PRD.details.md#deployment-details` (Fly config, port, healthcheck, build/start)

---

## External services / integrations

- [ ] Authentication: Google Authentication via Firebase Authentication (implementation details in auth PRD)
- [ ] Analytics: Google Analytics (GA4) initially; ensure privacy controls
- [ ] Email/Notifications: Resend as provider for registration confirmations, match reminders, schedule changes, and final results; outbox + retries (see `docs/development/PRD.details.md#email-integration` and implementation in `app/utils/email.server.tsx`, ADR-0017)
- [ ] Third-party SDKs documented with env vars and privacy considerations
- [ ] CI/CD: GitHub Actions for CI + Fly.io deploys; Slack webhook notifications on dev/main

---

## Data Model

- High-level: Minimize schema churn per iteration; document changes alongside implementation.
- Details: See `docs/development/PRD.details.md#data-model-migrations` for anticipated changes and migration workflow.

---

## Routing and navigation

- **Routes affected**: `app/routes/*.tsx`
- **Role-based access control**:
  - Public: `/`, `/teams`, `/auth/*`, error routes
  - Staff: Admin Panel under obfuscated base path for `ADMIN` and `MANAGER`. `REFEREE` has access only to their own referee dashboard (assigned matches) and cannot navigate the general Admin Panel. Inheritance: `ADMIN` ⊇ `MANAGER` ⊇ `REFEREE` ⊇ `PUBLIC`.
  - `EDITOR` / `BILLING` (future): access details TBD (anticipated panel sections limited to content/billing domains)
- **Client-side data flows and navigation**:
  - Loaders/actions define contracts; loaders produce typed data
  - Mutations with optimistic UI where appropriate
  - Error boundaries: general and auth-specific already present
  Details: See `docs/development/PRD.details.md#routing-map`

---

## Internationalization

- **Languages**: `nl`, `en`, `fr`, `ar` (RTL), `tr`, `de`
- **Translation keys to add**: added per feature; finalize across all languages at feature completion
- **RTL impact**: maintain Arabic legibility and text sizing; ensure Latin text sizing also blends visually with Amiri
- **Dutch capitalization rule**: Capitalize only the first word of titles/labels (sentence case); English titles may use title case
- **Fallback language**: `nl`
- **Persistence**: Persist language in cookie + localStorage; detect language on server during SSR
Details: See `docs/development/PRD.details.md#i18n-details`

---

## Design System & UI Guidelines

### Standard UI Patterns

- Actionable Panels: Use `Panel` and `ActionLinkPanel` for key flows and menus where appropriate
- Component Consistency: Follow component library patterns and variants
- Navigation Patterns: Consistent visual cues and mobile-first navigation

### Visual Design Standards

- Color System: Use semantic color classes and CVA variants; brand = red; primary = emerald; also sky, teal, fuchsia, indigo, amber, slate
- Color Hygiene: Replace cyan with sky where cyan appears in components (legacy to be removed)
- Typography: System-UI for Latin; Amiri for Arabic with visual text size balance utilities
- Spacing: Standard spacing patterns; responsive grid

### Theme & Dark Mode

- Semantic tokens only: use `bg-background`, `text-foreground`, `border-border` (never hard-coded colors)
- Theme-agnostic components: no conditional `dark ? ... : ...`; tokens adapt automatically
- Contrast: meet WCAG 2.1 AA (4.5:1 text, 3:1 large/UI); visible focus rings in both themes
- Accents: 20+ color accents via CVA variants; panel backgrounds adapt per theme
- Icons: SVGs inherit `currentColor`; no hard-coded fills
- Toggle: Provide ThemeToggle in AppBar; persist preference; respect `prefers-color-scheme`
- Testing: verify light/dark rendering and contrast before merge

### Interaction Patterns

- Loading States: No spinners/skeletons by default, only on a per case basis
- Error States: Clear error messages and recovery actions
- Success States: Confirmations and toasts
- Empty States: Helpful guidance and next actions

---

## Accessibility and mobile-first

- Default to mobile; enhance with `lg:` (and `md:` where appropriate) for desktop
- Touch targets ≥ 44px
- Keyboard focus order and navigation
- Screen reader labels and ARIA roles
- WCAG AA minimum; color contrast verified

---

## Security and privacy

- **Authentication (current)**: Dual-method Firebase Authentication with session cookie bridging:
  - Google OAuth and email/password authentication via Firebase
  - Firebase ID tokens mint HTTP-only session cookies on server (session cookie bridging) 
  - SSR security and role checks preserved
  - Avoid storing long-lived tokens in `localStorage`; use HTTP-only cookies + short-lived in-memory tokens
  - Logout invalidates Firebase session cookies and client state
  - Super admin role assignment via `SUPER_ADMIN_EMAILS` environment variable
- **Authorization**: Role-based guards on client with server verification in loaders/actions
- **Sensitive data**: Minimize PII; document analytics configuration; sanitize public error messages

### RBAC (Role-Based Access Control)

- Roles (schema): `PUBLIC`, `REFEREE`, `MANAGER`, `ADMIN`, `EDITOR` (future), `BILLING` (future)
- Permission matrix (initial baseline):
  - PUBLIC: `teams:read`, `tournaments:read`, `matches:read`, `teams:create` (public team registration)
  - REFEREE: PUBLIC + `matches:referee`, `matches:edit` (assigned)
  - MANAGER: PUBLIC + `teams:{create,edit,delete}`, `tournaments:{create,edit}`, `matches:{create,edit,delete}`, `groups:manage`, `referees:assign`, `assignments:manage`, `refereeTokens:manage` (NO user role assignment)
  - ADMIN: all permissions (`*`) including `users:approve`, `roles:assign`, `users:manage`
  - EDITOR (future): `content:{create,edit,delete}`, `media:upload`
  - BILLING (future): `billing:{read,manage}`, `subscriptions:{read,manage}`
  - Details: See `docs/development/PRD.details.md#permissions-glossary`
- Middleware: use `requireUserWithPermission(request, permission, { allowSelfAccess, userIdParam, params })` in loaders/actions
- Param handling: use React Router `params` for self-access checks (never parse URL segments manually)
- Post-login redirects: role-based landing pages; public → `/`, staff → Admin Panel (obfuscated base path)

**Role assignment and hierarchy**

- **Super Admin Assignment**: Initial ADMIN roles assigned via `SUPER_ADMIN_EMAILS` environment variable
  - Multiple email addresses supported (comma-separated)
  - Users with super admin emails automatically receive ADMIN role on first Firebase sign-up
  - All other users receive PUBLIC role by default
- **Role Management Access**: 
  - ADMIN: Can assign/change user roles via Admin Panel user management
  - MANAGER: Cannot assign user roles; can only issue pre-authenticated referee links
  - REFEREE/PUBLIC: No role management capabilities
- **Hierarchy**: `PUBLIC` < `REFEREE` < `MANAGER` < `ADMIN` (each role inherits all permissions of the previous)
- **Admin Panel Access**: 
  - ADMIN: Full Admin Panel access including user role management
  - MANAGER: Admin Panel access excluding user role management (referee links only)
  - REFEREE: Limited to own referee dashboard (assigned matches only)
  - PUBLIC: No Admin Panel access
- **Future Roles**: EDITOR and BILLING roles; detailed permissions and panel access TBD

### Rate limiting

- Protect `/auth/signin` and sensitive admin actions; include `X-RateLimit-*` headers
- Memory-safe in-memory store with cleanup; strict IP header validation; localhost-only bypass in tests
- Implementation references: `app/utils/rateLimit.server.ts`, `app/utils/adminMiddleware.server.ts`, and `docs/security/overview.md`

---

## Risk Assessment

### Technical Risks

- **Authentication migration complexity → Mitigation**: parallel login flows behind a config switch; staged rollout; comprehensive E2E tests (note: not in production yet)
- **Role mapping and SSR loaders with Firebase sessions → Mitigation**: adopt session cookie bridging; adapt `requireUser*` utilities; add regression tests
- **Playoff modeling scope creep → Mitigation**: start with multi-stage via groups; design extension points; incremental schema migrations

### Business Risks

- **Adoption uncertainty (early stage) → Mitigation**: prioritize manager value (scheduling, scoring, standings); instrument analytics; collect feedback (requires a feedback loop feature)
- **Payment integration complexity → Mitigation**: start with minimal subscription tiers; postpone advanced billing to a separate phase

### Mitigation Strategies

- Ship in small, testable phases; maintain rollback path per release plan
- Keep documentation and PRDs in sync with migrations and route changes

---

## Implementation Timeline

### Phase 1: Authentication Modernization

- Week 1: Firebase auth, session cookie bridging, redirects, logout

### Phase 2: Groups & Playoffs (MVP)

- Weeks 2 - 4: Group allocation UX; multi-stage via groups and basic UI

### Phase 3: Scheduling & Scoring

- Weeks 5 - 8: Scheduler with conflict detection; referee dashboard; offline scoring; live updates baseline

### Phase 4: Public Engagement

- Weeks 9 - 11: Live dashboard, standings, notifications opt-in

### Phase 5: Advanced Brackets

- Weeks 12 - 14: Advanced bracket formats (post-MVP)

### Phase 6+: Subscriptions/Communications/Extended

- Scoped after core tournament operations stabilize

---

## Open Questions & Future Considerations

### Authentication Evolution

**Phone Number Authentication (Future Enhancement):**
- **Potential benefits**: Quick referee access, international market preference, SMS-based emergency communications
- **Implementation challenges**: SMS costs, regional reliability, privacy concerns, security risks (SIM swapping)
- **Current decision**: Postponed pending user demand and international expansion requirements
- **Technical readiness**: Complete implementation documentation available (`docs/development/authentication.md`)
- **Priority**: Medium - evaluate after core tournament management features stabilize

---

## Release plan

- **Phase alignment**:
    1. Auth
    2. Groups & Playoffs (MVP)
    3. Scheduling & Scoring
    4. Public Engagement
    5. Advanced Brackets
    6. Subscriptions, Communications & Extended
    7. Content Management (future)
- **Milestones**:
  - **M1**: Firebase auth live for admin/manager/referee behind config switch
  - **M2**: Scheduling and scoring in production for a pilot tournament
- **Rollout and fallback**:
  - Config switch to swap auth providers during migration
  - Rollback by redeploying previous container image on Fly.io

---

## Conclusion

Tournado focuses on clarity for the public and control for managers. With a mobile-first UI, solid role-based security, and reliable data modeling for teams, groups, matches, and standings, it provides a practical foundation for real tournaments and room to grow into playoffs, subscriptions, and content.

**Key Architectural Principles**:

- Favor server-verified auth and role checks during SSR
- Keep routes fast and simple; mobile-first with clear states

**Critical First Steps**:

1. Implement Firebase auth with session cookie bridging
2. Finish group allocation CRUD
3. Add `Team.clubIcon` support and fetching strategy
4. Define playoff schema (start with multi-stage via groups)

**Next Steps**:

1. Deliver scheduling and scoring with live standings
2. Finalize language enumeration centralization and fallback to `nl` (confirm single-place registration)

---

## Open questions

- Public area: should we add tournament pages with groups and standings summaries for faster discovery?
- Referee pre-auth: expiry rules and scope; what adjustments to match times are permitted?
- Domain accuracy: per age category match duration and scheduling constraints; tie-breakers and standings rules
- Are additional manager workflows needed (e.g., field assignment, blackout times)?
- Research: migration from GitHub to GitLab - effort, pros/cons, and the effect of GitLab’s feature flags compared to alternatives
- Should we add optional chats, voting, and totalisator (non-monetary score predictions) as future social features? If yes, how do we moderate and scope them?
- PWA-related offline caching: scope route/data caching via service worker; define cache strategies per route type and revalidation rules
- Push notifications: evaluate use cases (team/match alerts, schedule changes, optional goal alerts), permissions flow, and privacy implications; implement via service worker with clear opt-in
- Live transport: WebSocket vs SSE vs polling fallback - choose per complexity/hosting constraints
- Bracket generation: MVP = multi-stage via groups. Evaluate single-elimination and other advanced formats (double-elimination, Swiss, placement) in Phase 5; ensure transparent tie-breaker configuration
- Offline sync: how to handle conflicts when server state changes between offline entry and sync
- Artificial intelligence: explore useful AI features (e.g., schedule optimization, conflict resolution suggestions, bracket predictions, performance/anomaly reports, fairness checks, natural-language queries over tournaments, auto-generated match summaries)
- Animations: identify micro-interactions and motion (e.g., score update bursts, live ticker transitions, smooth page/bracket transitions, subtle loading shimmers, celebratory confetti on finals/wins; consider tasteful, optional motion settings)
- Mobile app wrapper: assess packaging the web app for Android/iOS via Capacitor. Validate service worker support under app schemes and push notification integration for store compliance (SSR is required)

---

## Links

- Related ADRs: `.cursor/rules/` (add ADR IDs once created)
- Documentation: `docs/development/*` (routing, teams, tournaments, state management)
- Feature details: `docs/development/PRD.details.md`
- Routes: `app/routes/*.tsx`
- Models: `prisma/schema.prisma`
- Tests: `app/**/*/__tests__/*.test.tsx`, `playwright/tests/*`

---

## Notes

**Collocation of query/mutation logic with components/hooks**

Rationale: colocating data-fetching and mutation logic near the components that consume them improves readability and local reasoning. It reduces indirection for maintainers and helps keep feature code self-contained. Use small, typed helpers and hooks colocated with the route/component when they are only used there. Promote to shared utils only when there is demonstrable reuse.
