name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

defaults:
  run:
    shell: bash

jobs:
  lint:
    name: ‚¨£ ESLint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: ‚éî Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üì• Install deps
        run: pnpm install --no-frozen-lockfile

      - name: üî¨ Lint
        run: pnpm lint

  typecheck:
    name:  ¶ TypeScript
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: ‚éî Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üì• Install deps
        run: pnpm install --no-frozen-lockfile

      - name: üîé Type check
        run: pnpm typecheck

  vitest:
    name: ‚ö° Vitest
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: ‚éî Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üì• Install deps
        run: pnpm install --no-frozen-lockfile

      - name: üõ† Generate Prisma Client
        run: pnpm exec prisma generate

      - name: ‚ö° Run vitest
        run: pnpm test:coverage

  playwright:
    name: üé≠ Playwright
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: üèÑ Copy test env vars
        run: cp .env.example .env

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: ‚éî Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üì• Install deps
        run: pnpm install --no-frozen-lockfile

      - uses: ./.github/actions/prisma-generate
        with:
          database_url: "file:./prisma/data.db"

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps

      - name: üõ† Setup Database
        run: |
          # Ensure Prisma client is generated before migration
          pnpm exec prisma generate
          pnpm exec prisma migrate reset --force
          # Generate client again after database reset to ensure it's fresh
          pnpm exec prisma generate
          # Wait for the client to be fully ready
          sleep 3

      - name: ‚öôÔ∏è Build
        run: pnpm build

      - name: üé≠ Run Playwright tests with built app
        run: |
          set +e  # Don't exit on error
          pnpm exec start-server-and-test 'pnpm start:mocks' http://localhost:8811 'playwright test'
          TEST_EXIT_CODE=$?
          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "‚úÖ All tests passed successfully"
            exit 0
          else
            echo "‚ùå Tests failed with exit code $TEST_EXIT_CODE"
            exit $TEST_EXIT_CODE
          fi
        env:
          PORT: 8811

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
