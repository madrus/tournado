name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

defaults:
  run:
    shell: bash

jobs:
  lint:
    name: ⬣ ESLint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: ⎔ Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: ⎔ Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📥 Install deps
        run: pnpm install --no-frozen-lockfile

      - name: 🛠 Generate Prisma Client
        run: pnpm exec prisma generate

      - name: 🔬 Lint
        run: pnpm lint

  typecheck:
    name: ʦ TypeScript
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: ⎔ Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: ⎔ Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📥 Install deps
        run: pnpm install --no-frozen-lockfile

      - name: 🛠 Generate Prisma Client
        run: pnpm exec prisma generate

      - name: 🔎 Type check
        run: pnpm typecheck

  vitest:
    name: ⚡ Vitest
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: ⎔ Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: ⎔ Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📥 Install deps
        run: pnpm install --no-frozen-lockfile

      - name: 🛠 Generate Prisma Client
        run: pnpm exec prisma generate

      - name: 🛠 Setup Test Database
        run: pnpm exec prisma migrate reset --force
        env:
          DATABASE_URL: "file:./prisma/data.db?connection_limit=1"

      - name: ⚡ Run vitest
        run: pnpm test:coverage
        env:
          DATABASE_URL: "file:./prisma/data.db?connection_limit=1"
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}

  e2e-tests:
    uses: ./.github/workflows/playwright-reusable.yml
    with:
      environment: "local"
      upload_artifact_suffix: "-ci"
