name: CI

on:
  push:
    branches-ignore:
      - "main"
      - "dev"
  pull_request:
    branches-ignore:
      - "main"
      - "dev"

jobs:
  lint:
    name: ‚¨£ ESLint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: ‚éî Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üì• Install deps
        run: pnpm install --no-frozen-lockfile

      - name: üî¨ Lint
        run: pnpm lint

  typecheck:
    name:  ¶ TypeScript
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: ‚éî Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üì• Install deps
        run: pnpm install --no-frozen-lockfile

      - name: üõ† Generate Prisma Client
        run: |
          # Force clean any existing generated client
          rm -rf node_modules/.prisma

          # Show the current branch for debugging
          echo "Current branch: $GITHUB_REF"

          # Show the schema file for debugging
          echo "Prisma schema content:"
          cat prisma/schema.prisma

          # Generate the client with explicit path
          npx prisma generate

          # Verify the generated client
          ls -la node_modules/.prisma/client || echo "Client directory not found!"

          # Check if index.d.ts contains the Team and TeamLeader types
          echo "Checking for Team and TeamLeader types in generated client:"
          grep -E "Team|TeamLeader" node_modules/.prisma/client/index.d.ts || echo "Types not found!"
        env:
          DATABASE_URL: "file:./prisma/data.db"
          DEBUG: "prisma:*"

      - name: üîé Type check
        run: pnpm typecheck

  vitest:
    name: ‚ö° Vitest
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: ‚éî Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üì• Install deps
        run: pnpm install --no-frozen-lockfile

      - name: ‚ö° Run vitest
        run: pnpm test:run -- --coverage

  cypress:
    name: ‚ö´Ô∏è Cypress
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: üèÑ Copy test env vars
        run: cp .env.example .env

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: ‚éî Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache Cypress binary
        uses: actions/cache@v4
        id: cache-cypress
        with:
          path: ~/.cache/Cypress
          key: cypress-binary-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            cypress-binary-${{ runner.os }}-

      - name: üì• Install deps
        run: pnpm install --no-frozen-lockfile

      - name: üõ† Generate Prisma Client
        run: |
          # Force clean any existing generated client
          rm -rf node_modules/.prisma

          # Show the current branch for debugging
          echo "Current branch: $GITHUB_REF"

          # Show the schema file for debugging
          echo "Prisma schema content:"
          cat prisma/schema.prisma

          # Generate the client with explicit path
          npx prisma generate

          # Verify the generated client
          ls -la node_modules/.prisma/client || echo "Client directory not found!"

          # Check if index.d.ts contains the Team and TeamLeader types
          echo "Checking for Team and TeamLeader types in generated client:"
          grep -E "Team|TeamLeader" node_modules/.prisma/client/index.d.ts || echo "Types not found!"
        env:
          DATABASE_URL: "file:./prisma/data.db"
          DEBUG: "prisma:*"

      - name: Install Cypress
        if: steps.cache-cypress.outputs.cache-hit != 'true'
        run: npx cypress install

      - name: Verify Cypress
        run: npx cypress verify

      - name: üõ† Setup Database
        run: pnpm exec prisma migrate reset --force

      - name: ‚öôÔ∏è Build
        run: pnpm build

      - name: üå≥ Cypress run
        uses: cypress-io/github-action@v6
        with:
          start: pnpm start:mocks
          wait-on: http://localhost:8811
          install: false # We've already installed dependencies
        env:
          PORT: 8811
