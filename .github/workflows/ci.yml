name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

defaults:
  run:
    shell: bash

jobs:
  check_changes:
    name: üîç Check Changes
    runs-on: ubuntu-latest
    outputs:
      code_changed: ${{ steps.check_changes.outputs.code_changed }}
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: üîç Check for code changes
        id: check_changes
        run: |
          # For PRs, compare against the target branch
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            git fetch origin $BASE_SHA
            changed_files=$(git diff --name-only $BASE_SHA..$HEAD_SHA)
          else
            # For pushes, compare with previous commit
            changed_files=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "all_files_changed")
          fi

          echo "Changed files:"
          echo "$changed_files"

          # Check if any files outside .github/workflows changed
          if echo "$changed_files" | grep -v "^\.github/workflows/" | grep -q .; then
            echo "code_changed=true" >> $GITHUB_OUTPUT
            echo "üìù Code changes detected - running full CI"
          else
            echo "code_changed=false" >> $GITHUB_OUTPUT
            echo "üö´ Only workflow changes detected - skipping CI jobs"
          fi

  lint:
    name: ‚¨£ ESLint
    runs-on: ubuntu-latest
    needs: check_changes
    if: needs.check_changes.outputs.code_changed == 'true'
    permissions:
      contents: read
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: ‚éî Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üì• Install deps
        run: pnpm install --no-frozen-lockfile

      - name: üõ† Generate Prisma Client
        run: pnpm exec prisma generate

      - name: üî¨ Lint
        run: pnpm lint

  typecheck:
    name:  ¶ TypeScript
    runs-on: ubuntu-latest
    needs: check_changes
    if: needs.check_changes.outputs.code_changed == 'true'
    permissions:
      contents: read
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: ‚éî Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üì• Install deps
        run: pnpm install --no-frozen-lockfile

      - name: üõ† Generate Prisma Client
        run: pnpm exec prisma generate

      - name: üîé Type check
        run: pnpm typecheck

  vitest:
    name: ‚ö° Vitest
    runs-on: ubuntu-latest
    needs: check_changes
    if: needs.check_changes.outputs.code_changed == 'true'
    permissions:
      contents: read
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: ‚éî Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üì• Install deps
        run: pnpm install --no-frozen-lockfile

      - name: üõ† Generate Prisma Client
        run: pnpm exec prisma generate

      - name: üõ† Setup Test Database
        run: pnpm exec prisma migrate reset --force
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SUPER_ADMIN_PASSWORD: ${{ secrets.SUPER_ADMIN_PASSWORD }}

      - name: ‚ö° Run vitest
        run: pnpm test:coverage
        env:
          DATABASE_URL: "file:./prisma/data.db?connection_limit=1"
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          SUPER_ADMIN_PASSWORD: ${{ secrets.SUPER_ADMIN_PASSWORD }}
          FIREBASE_ADMIN_PROJECT_ID: ${{ secrets.FIREBASE_ADMIN_PROJECT_ID }}
          FIREBASE_ADMIN_CLIENT_EMAIL: ${{ secrets.FIREBASE_ADMIN_CLIENT_EMAIL }}
          FIREBASE_ADMIN_PRIVATE_KEY: ${{ secrets.FIREBASE_ADMIN_PRIVATE_KEY }}

  e2e-tests:
    needs: check_changes
    if: needs.check_changes.outputs.code_changed == 'true'
    uses: ./.github/workflows/playwright-reusable.yml
    with:
      environment: "local"
      upload_artifact_suffix: "-ci"

  workflow_only_success:
    name: ‚úÖ Workflow Changes Only
    runs-on: ubuntu-latest
    needs: check_changes
    if: needs.check_changes.outputs.code_changed == 'false'
    steps:
      - name: ‚úÖ Workflow validation passed
        run: |
          echo "üöÄ Only workflow files changed - CI checks skipped"
          echo "This job ensures the deploy workflow can still trigger successfully"

  notify_slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs:
      - check_changes
      - lint
      - typecheck
      - vitest
      - e2e-tests
      - workflow_only_success
    if: always()
    steps:
      - name: Sanitize values
        id: sanitize
        run: |
          # Sanitize commit message by removing newlines and quotes
          SANITIZED_COMMIT_MESSAGE=$(echo "${{ github.event.head_commit.message }}" | tr '\n\r' ' ' | sed 's/"/\\"/g')
          echo "sanitized_commit_message=$SANITIZED_COMMIT_MESSAGE" >> $GITHUB_OUTPUT

          # Sanitize actor name
          SANITIZED_ACTOR=$(echo "${{ github.actor }}" | tr '\n\r' ' ' | sed 's/"/\\"/g')
          echo "sanitized_actor=$SANITIZED_ACTOR" >> $GITHUB_OUTPUT

          # Sanitize branch name
          SANITIZED_BRANCH=$(echo "${{ github.ref_name }}" | tr '\n\r' ' ' | sed 's/"/\\"/g')
          echo "sanitized_branch=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT

      - name: Post a message in a channel
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            {
              "text": "${{
                (needs.check_changes.outputs.code_changed == 'false' && needs.workflow_only_success.result == 'success')
                  && format('CI was skipped for the {0} environment because there were no new changes in the code.',
                    github.ref_name == 'main' && 'production' || github.ref_name == 'dev' && 'staging' || github.ref_name)
                  || format('GitHub Action build result: {0} on branch {1} by {2} (E2E: {3})\n{4}/{5}/commit/{6}',
                    (needs.lint.result == 'success' && needs.typecheck.result == 'success' && needs.vitest.result == 'success') && 'success' || 'failure',
                    steps.sanitize.outputs.sanitized_branch,
                    steps.sanitize.outputs.sanitized_actor,
                    needs.e2e-tests.result == 'success' && 'passed' || needs.e2e-tests.result == 'failure' && 'failed' || 'skipped',
                    github.server_url,
                    github.repository,
                    github.sha
                  )
              }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{
                      (needs.check_changes.outputs.code_changed == 'false' && needs.workflow_only_success.result == 'success')
                        && format('CI was skipped for the {0} environment because there were no new changes in the code.',
                          github.ref_name == 'main' && 'production' || github.ref_name == 'dev' && 'staging' || github.ref_name)
                        || format('GitHub Action build result: {0} on branch `{1}`\n*Triggered by:* {2}\n*Change type:* {3}\n*E2E Tests:* {4} (non-blocking)\n*Commit message:* {5}\n<{6}/{7}/commit/{8}|View Commit> | <{6}/{7}/actions/runs/{9}|View Workflow Run>',
                          (needs.lint.result == 'success' && needs.typecheck.result == 'success' && needs.vitest.result == 'success') && 'success' || 'failure',
                          steps.sanitize.outputs.sanitized_branch,
                          steps.sanitize.outputs.sanitized_actor,
                          needs.check_changes.outputs.code_changed == 'true' && 'Code changes' || 'Workflow changes only',
                          needs.e2e-tests.result == 'success' && '‚úÖ passed' || needs.e2e-tests.result == 'failure' && '‚ùå failed' || '‚è≠Ô∏è skipped',
                          steps.sanitize.outputs.sanitized_commit_message,
                          github.server_url,
                          github.repository,
                          github.sha,
                          github.run_id
                        )
                    }}"
                  }
                }
              ]
            }
