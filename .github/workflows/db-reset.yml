name: Database Reset

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to reset"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

jobs:
  reset-database:
    name: Reset Database
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    env:
      DATABASE_URL: "file:./prisma/sqlite.db"
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: ⎔ Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: ⎔ Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: 📥 Install deps
        run: pnpm install --no-frozen-lockfile

      - name: 🛠 Generate Prisma Client
        run: pnpm exec prisma generate

      - name: 👀 Read app name
        uses: SebRollen/toml-action@v1.2.0
        id: app_name
        with:
          file: fly.toml
          field: app

      - name: 🎈 Setup Fly
        uses: superfly/flyctl-actions/setup-flyctl@v1

      - name: Check Staging App Status
        if: ${{ github.event.inputs.environment == 'staging' }}
        id: check_staging
        continue-on-error: true
        run: |
          echo "Checking if app ${{ steps.app_name.outputs.value }}-staging exists and is running..."
          if flyctl status --app ${{ steps.app_name.outputs.value }}-staging; then
            echo "App is running"
            echo "app_running=true" >> $GITHUB_OUTPUT
          else
            echo "App is not running or doesn't exist"
            echo "app_running=false" >> $GITHUB_OUTPUT
          fi

      - name: Check Production App Status
        if: ${{ github.event.inputs.environment == 'production' }}
        id: check_production
        continue-on-error: true
        run: |
          echo "Checking if app ${{ steps.app_name.outputs.value }} exists and is running..."
          if flyctl status --app ${{ steps.app_name.outputs.value }}; then
            echo "App is running"
            echo "app_running=true" >> $GITHUB_OUTPUT
          else
            echo "App is not running or doesn't exist"
            echo "app_running=false" >> $GITHUB_OUTPUT
          fi

      - name: Reset Staging Database
        if: ${{ github.event.inputs.environment == 'staging' && steps.check_staging.outputs.app_running == 'true' }}
        env:
          DATABASE_URL: "file:./prisma/sqlite.db"

        run: |
          # Generate a new SQLite database schema locally
          pnpm exec prisma db push --schema=./prisma/schema.prisma

          # Create a temporary migration SQL file
          pnpm exec prisma migrate diff --from-empty --to-schema-datamodel=./prisma/schema.prisma --script > reset.sql

          # Clean up the SQL file to remove any problematic characters
          sed -i 's/<[^>]*>//g' reset.sql

          # Print the SQL file content for debugging
          echo "SQL file content:"
          cat reset.sql

          # Copy the SQL file to the Fly.io instance
          flyctl ssh sftp shell -c "put reset.sql /tmp/reset.sql" --app ${{ steps.app_name.outputs.value }}-staging

          # Execute the SQL file on the Fly.io instance
          flyctl ssh console -a ${{ steps.app_name.outputs.value }}-staging -C "sqlite3 /data/sqlite.db < /tmp/reset.sql"

          # Run the seed script on the Fly.io instance
          flyctl ssh console -a ${{ steps.app_name.outputs.value }}-staging -C "DATABASE_URL=file:/data/sqlite.db /app/node_modules/.bin/node /app/prisma/seed.js"

      - name: Reset Production Database
        if: ${{ github.event.inputs.environment == 'production' && steps.check_production.outputs.app_running == 'true' }}
        env:
          DATABASE_URL: "file:./prisma/sqlite.db"

        run: |
          # Generate a new SQLite database schema locally
          pnpm exec prisma db push --schema=./prisma/schema.prisma

          # Create a temporary migration SQL file
          pnpm exec prisma migrate diff --from-empty --to-schema-datamodel=./prisma/schema.prisma --script > reset.sql

          # Clean up the SQL file to remove any problematic characters
          sed -i 's/<[^>]*>//g' reset.sql

          # Print the SQL file content for debugging
          echo "SQL file content:"
          cat reset.sql

          # Copy the SQL file to the Fly.io instance
          flyctl ssh sftp shell -c "put reset.sql /tmp/reset.sql" --app ${{ steps.app_name.outputs.value }}

          # Execute the SQL file on the Fly.io instance
          flyctl ssh console -a ${{ steps.app_name.outputs.value }} -C "sqlite3 /data/sqlite.db < /tmp/reset.sql"

          # Run the seed script on the Fly.io instance
          flyctl ssh console -a ${{ steps.app_name.outputs.value }} -C "DATABASE_URL=file:/data/sqlite.db /app/node_modules/.bin/node /app/prisma/seed.js"

      - name: Warning - App Not Running
        if: ${{ (github.event.inputs.environment == 'staging' && steps.check_staging.outputs.app_running == 'false') || (github.event.inputs.environment == 'production' && steps.check_production.outputs.app_running == 'false') }}
        run: |
          echo "::error::The app ${{ github.event.inputs.environment == 'staging' && format('{0}-staging', steps.app_name.outputs.value) || steps.app_name.outputs.value }} is not running or doesn't exist."
          echo "Please deploy the app first using the deploy workflow."
          exit 1
