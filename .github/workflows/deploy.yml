name: Deploy

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

run-name: >-
  Deploy ${{ github.event.workflow_run.head_branch == 'main' && '(Production)'
  || github.event.workflow_run.head_branch == 'dev' && '(Staging)' }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  deployments: write
  id-token: write

jobs:
  deploy_staging:
    name: Deploy to Staging (dev)
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'dev' }}
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
      - name: 👀 Read app name
        uses: SebRollen/toml-action@v1.2.0
        id: app_name
        with:
          file: fly.toml
          field: app
      - name: 🎈 Setup Fly
        uses: superfly/flyctl-actions/setup-flyctl@v1
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      - name: 🚀 Deploy to Staging
        run: |
          echo "${{ secrets.FLY_API_TOKEN }}" > /tmp/fly_token
          flyctl deploy --remote-only \
            --build-arg COMMIT_SHA=${{ github.event.workflow_run.head_sha }} \
            --app ${{ steps.app_name.outputs.value }}-staging \
            --access-token "$(cat /tmp/fly_token)" \
            --strategy rolling \
            --max-unavailable 0.33 \
            --wait-timeout 5m \
            --yes

  deploy_production:
    name: Deploy to Production (main)
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
      - name: 👀 Read app name
        uses: SebRollen/toml-action@v1.2.0
        id: app_name
        with:
          file: fly.toml
          field: app
      - name: 🎈 Setup Fly
        uses: superfly/flyctl-actions/setup-flyctl@v1
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      - name: 🚀 Deploy to Production
        run: |
          echo "${{ secrets.FLY_API_TOKEN }}" > /tmp/fly_token
          flyctl deploy --remote-only \
            --build-arg COMMIT_SHA=${{ github.event.workflow_run.head_sha }} \
            --app ${{ steps.app_name.outputs.value }} \
            --access-token "$(cat /tmp/fly_token)" \
            --strategy rolling \
            --max-unavailable 0.33 \
            --wait-timeout 5m \
            --yes
