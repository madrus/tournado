#!/bin/bash

# Template for setup-flyio-secrets.sh
# This file contains dummy/placeholder values for Fly.io environment secrets setup
#
# ‚ö†Ô∏è  RECOMMENDED: Use manual setup instead of this script
#
# Due to Fly.io authentication issues and deployment timeouts, manual secret
# setup is more reliable. Use this script as a reference for which secrets
# to set, but execute the `flyctl secrets set` commands individually.
#
# For manual setup instructions, see:
# docs/environment-variables.md#setup-instructions
#
# If you still want to use this script:
# 1. Copy this file to the project root as setup-flyio-secrets.sh
# 2. Replace all placeholder values with real values as indicated below
# 3. DO NOT commit the real setup-flyio-secrets.sh file to version control
# 4. Run: chmod +x setup-flyio-secrets.sh
# 5. Ensure you're authenticated: fly auth login
# 6. Usage: ./setup-flyio-secrets.sh [app-name]
#    Example: ./setup-flyio-secrets.sh tournado-staging
#
# Known issues with script execution:
# - May encounter 401 authentication errors (requires fly auth login)
# - Can timeout due to multiple deployment restarts
# - Each secret update triggers an app restart

set -e

APP_NAME=${1:-tournado-staging}

echo "Setting up Fly.io secrets for app: $APP_NAME"

# Determine environment based on app name
if [[ "$APP_NAME" == *"staging"* ]]; then
    ENV_TYPE="staging"
    FIREBASE_PROJECT="tournado-dev"
    BASE_URL="https://tournado-staging.fly.dev"
    EMAIL_FROM="Team Registration <staging@resend.dev>"
    DATABASE_URL="file:/data/sqlite.db?connection_limit=1"
elif [[ "$APP_NAME" == *"production"* ]] || [[ "$APP_NAME" == "tournado" ]]; then
    ENV_TYPE="production"
    FIREBASE_PROJECT="tournado-prod"
    BASE_URL="https://tournado-production.fly.dev"
    EMAIL_FROM="Team Registration <onboarding@resend.dev>"
    DATABASE_URL="file:/data/sqlite.db?connection_limit=1"
else
    echo "‚ùå Unknown app name: $APP_NAME"
    echo "Usage: $0 [tournado-staging|tournado-production|tournado]"
    exit 1
fi

echo "üìù Configuring $ENV_TYPE environment for Firebase project: $FIREBASE_PROJECT"

# Core Application Secrets
fly secrets set SESSION_SECRET="$(openssl rand -hex 32)" --app "$APP_NAME"
fly secrets set SUPER_ADMIN_EMAILS="REPLACE_WITH_ADMIN_EMAILS" --app "$APP_NAME"  # Example: admin@company.com,manager@company.com
fly secrets set SUPER_ADMIN_PASSWORD="REPLACE_WITH_STRONG_PASSWORD" --app "$APP_NAME"  # Required by prisma/seed.js

# Firebase Client Configuration
# Get these values from Firebase Console -> Project Settings -> General -> Your apps -> Web app
echo "üî• Setting Firebase Client configuration for project: $FIREBASE_PROJECT"
fly secrets set VITE_FIREBASE_API_KEY="REPLACE_WITH_FIREBASE_API_KEY" --app "$APP_NAME"                    # From Firebase Console -> Project Settings -> General -> Web API Key
fly secrets set VITE_FIREBASE_AUTH_DOMAIN="$FIREBASE_PROJECT.firebaseapp.com" --app "$APP_NAME"
fly secrets set VITE_FIREBASE_PROJECT_ID="$FIREBASE_PROJECT" --app "$APP_NAME"
fly secrets set VITE_FIREBASE_STORAGE_BUCKET="$FIREBASE_PROJECT.firebasestorage.app" --app "$APP_NAME"
fly secrets set VITE_FIREBASE_MESSAGING_SENDER_ID="REPLACE_WITH_SENDER_ID" --app "$APP_NAME"              # From Firebase Console -> Project Settings -> Cloud Messaging -> Sender ID
fly secrets set VITE_FIREBASE_APP_ID="REPLACE_WITH_APP_ID" --app "$APP_NAME"                              # From Firebase Console -> Project Settings -> General -> App ID
fly secrets set VITE_FIREBASE_MEASUREMENT_ID="" --app "$APP_NAME"                                          # Optional: Google Analytics Measurement ID

# Firebase Admin Configuration (Server-side)
# Get these values from Firebase Console -> Project Settings -> Service Accounts -> Generate new private key
echo "üîß Setting Firebase Admin configuration for project: $FIREBASE_PROJECT"
fly secrets set FIREBASE_ADMIN_PROJECT_ID="$FIREBASE_PROJECT" --app "$APP_NAME"
fly secrets set FIREBASE_ADMIN_CLIENT_EMAIL="REPLACE_WITH_SERVICE_ACCOUNT_EMAIL" --app "$APP_NAME"        # From downloaded service account JSON: client_email field
fly secrets set FIREBASE_ADMIN_PRIVATE_KEY="REPLACE_WITH_SERVICE_ACCOUNT_PRIVATE_KEY" --app "$APP_NAME"   # From downloaded service account JSON: private_key field (with \n preserved)

# Email Configuration
# Get Resend API key from https://resend.com/api-keys
fly secrets set RESEND_API_KEY="REPLACE_WITH_RESEND_API_KEY" --app "$APP_NAME"                            # From https://resend.com/api-keys
fly secrets set EMAIL_FROM="$EMAIL_FROM" --app "$APP_NAME"
fly secrets set BASE_URL="$BASE_URL" --app "$APP_NAME"

# Database Configuration
fly secrets set DATABASE_URL="$DATABASE_URL" --app "$APP_NAME"

echo "‚úÖ Fly.io secrets configured successfully for $APP_NAME ($ENV_TYPE)!"
echo ""
echo "üìã NEXT STEPS:"
echo "1. Replace all REPLACE_WITH_* placeholders with real values"
echo "2. Get Firebase credentials from: https://console.firebase.google.com/project/$FIREBASE_PROJECT/settings/general"
echo "3. Get service account key from: https://console.firebase.google.com/project/$FIREBASE_PROJECT/settings/serviceaccounts/adminsdk"
echo "4. Get Resend API key from: https://resend.com/api-keys"
echo ""
echo "üìñ See docs/environment-variables.md for detailed setup instructions"
echo "üîß See docs/development/authentication.md#service-account-setup for Firebase service account setup"
echo ""
echo "üí° NOTE: Local development uses the same Firebase project as Staging (tournado-dev)"
echo "   Configure local .env with same Firebase credentials but different DATABASE_URL/BASE_URL"