generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  REFEREE
  PUBLIC
}

enum MatchStatus {
  UPCOMING
  PLAYED
  CANCELLED
  POSTPONED
}

enum Division {
  PREMIER_DIVISION
  FIRST_DIVISION
  SECOND_DIVISION
  THIRD_DIVISION
  FOURTH_DIVISION
  FIFTH_DIVISION
}

enum Category {
  JO8
  JO9
  JO10
  JO11
  JO12
  JO13
  JO14
  JO15
  JO16
  JO17
  JO19
  MO8
  MO9
  MO10
  MO11
  MO12
  MO13
  MO14
  MO15
  MO16
  MO17
  MO19
  VETERANEN_35_PLUS
  VETERANEN_40_PLUS
  VETERANEN_45_PLUS
  VETERANEN_50_PLUS
}

model User {
  id        String    @id @default(cuid())
  firstName String
  lastName  String
  email     String    @unique
  password  Password?
  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TeamLeader { // contact person
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teams     Team[]
}

model Team {
  id            String     @id @default(cuid())
  name          String
  tournamentId  String
  tournament    Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  category      Category    // e.g., JO8, MO9, VETERANEN_35_PLUS
  division      Division
  clubName      String
  teamLeaderId  String
  teamLeader    TeamLeader @relation(fields: [teamLeaderId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  homeMatches   Match[]    @relation("Match_homeTeam")
  awayMatches   Match[]    @relation("Match_awayTeam")
  groupSlot     GroupSlot? @relation("TeamGroupSlot")
}

model Tournament {
  id         String     @id @default(cuid())
  name       String
  location   String
  divisions  Json       // array of Division enum values as JSON (SQLite limitation)
  categories Json       // array of category strings (as JSON in SQLite)
  startDate  DateTime
  endDate    DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  teams      Team[]
  matches    Match[]
  groupSets  GroupSet[]
}

model Match {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  date          DateTime // scheduled date of the match
  time          DateTime // scheduled time of the match
  location      String   // specific field/court
  status        MatchStatus @default(UPCOMING)
  tournamentId  String
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  homeTeamId    String
  homeTeam      Team     @relation("Match_homeTeam", fields: [homeTeamId], references: [id], onDelete: Cascade)
  awayTeamId    String
  awayTeam      Team     @relation("Match_awayTeam", fields: [awayTeamId], references: [id], onDelete: Cascade)
  // back-relation for MatchScore
  scores        MatchScore[]
}

model MatchScore {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  matchId    String
  match      Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  homeTeamScore Int
  awayTeamScore Int
}

model GroupSet {
  id            String     @id @default(cuid())
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId  String
  name          String
  categories    Json       // array of Category enum values as JSON (SQLite limitation)
  groups        Group[]
  configGroups  Int
  configSlots   Int
  autoFill      Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  groupSlots    GroupSlot[]

  @@unique([tournamentId, name])
  @@index([tournamentId])
}

model Group {
  id          String   @id @default(cuid())
  groupSet    GroupSet @relation(fields: [groupSetId], references: [id], onDelete: Cascade)
  groupSetId  String
  name        String   // e.g. "Group A"
  order       Int
  slots       GroupSlot[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([groupSetId, name])
  @@unique([groupSetId, order])
  @@index([groupSetId])
}

model GroupSlot {
  id          String   @id @default(cuid())
  groupSet    GroupSet @relation(fields: [groupSetId], references: [id], onDelete: Cascade)
  groupSetId  String
  group       Group?   @relation(fields: [groupId], references: [id], onDelete: SetNull)
  groupId     String?         // null ⇒ Reserve
  slotIndex   Int              // 0..N-1 inside group
  team        Team?    @relation("TeamGroupSlot", fields: [teamId], references: [id], onDelete: SetNull)
  teamId      String?  @unique // null ⇒ placeholder

  @@unique([groupId, slotIndex]) // each slot unique inside a group
  @@unique([groupSetId, teamId]) // team only once in a set
  @@index([groupSetId])
  @@index([teamId])
}
