---
description:
globs:
alwaysApply: false
---

# INSTRUCTIONS â€” READ THIS FIRST WHEN CREATING NEW TASKS

This file describes a single, self-contained task for an AI agent. One task = one file.

- Name your file under ./tasks/ using kebab-case, e.g., tasks/add-role-guard-to-routes.md
- Keep title, status, and owner accurate
- Use information-dense keywords (file paths, function signatures, zod schemas, Prisma model names)
- Define types first if adding data structures and reference them by exact name
- Order steps so later steps explicitly reference earlier artifacts by name
- Keep scope tight; split large efforts into multiple task files and list them under dependencies
- Acceptance criteria must be testable and unambiguous
- Context plan must list files to load at start (mark deps read-only) and which files must exist at the end
- Testing: focus unit tests on meaningful behavior; create integration/E2E for complex workflows

---

id: "" # e.g., TASK-0123 title: "" status: "planned" # planned, in-progress, blocked, done priority: "P1" # P0, P1, P2 owner: "" labels: ["feature", "routes", "models"] # free-form tags dependencies: [""] # list other task files that must be completed first created: "YYYY-MM-DD" due: "YYYY-MM-DD" relatedPRD: "" relatedADR: ""

# 1) High-level objective

# 2) Background / context

<Short rationale or business context for why this task exists. Link PRD/ADR.>

# 3) Assumptions and constraints

- ASSUMPTION:
- Constraint: Use pnpm scripts defined in package.json
- Constraint: React Router v7 + TypeScript + Vite + Prisma + SQLite
- Constraint: Tailwind mobile-first layout, lg: for desktop
- Constraint: Prisma migrations via pnpm prisma migrate dev --name
- Constraint: Tests colocated next to code under **tests** with .test.ts(x)
- Constraint: E2E tests in playwright/tests
- Constraint: No new dependencies unless explicitly approved
- Constraint: Authentication via Google Auth (Firebase Authentication) when applicable

# 4) Dependencies (tasks and artifacts)

- tasks/.md
- prisma/schema.prisma
- app/routes/.tsx
- app/components/.tsx

# 5) Context plan

Beginning (add to model context)

- app/routes/.tsx
- app/components/.tsx
- app/stores/.ts
- prisma/schema.prisma
- package.json (read-only)
- vitest.config.ts (read-only)

End state (must exist after completion)

- app/routes/.tsx
- app/components/.tsx
- app/components/**tests**/.test.tsx
- playwright/tests/.spec.ts

# 6) Low-level steps (ordered, information-dense)

1. Route and UI
   - File: app/routes/.tsx

   - Exported API:

      ```ts
      export async function loader({ request }: LoaderFunctionArgs)
      export async function action({ request }: ActionFunctionArgs)
      export default function <ComponentName>(): JSX.Element
      ```

   - Behavior:
      - Validate inputs with zod schema validation
      - Use React Router v7 navigation patterns
      - Mobile-first styles; lg: for desktop
      - Implement proper error boundaries and loading states

2. Data layer
   - prisma/schema.prisma: Define data models with proper relationships

   - Migration:

      ```bash
      pnpm prisma migrate dev --name <name>
      pnpm prisma generate
      ```

   - Seed: update prisma/seed.ts if needed
   - Models: use app/models/*.server.ts for database operations

3. State and i18n
   - Store slice: app/stores/*.ts (Zustand) for client-side state only
   - Server state: use React Router loaders/actions
   - Translations: app/i18n/locales/[locale]/*.json
   - Dutch sentence case for titles/labels

4. Tests
   - Unit test: app/components/**tests**/*.test.tsx
      - Render states, validation, and user interactions
      - Use Vitest with @testing-library/react
   - E2E test: playwright/tests/*.spec.ts
      - Happy path navigating to and performing core actions
      - Test authentication flows when applicable

5. Docs and scripts
   - Update docs/development/.md if applicable

   - Ensure pnpm validate passes:

      ```bash
      pnpm validate  # Runs lint, typecheck, and test in parallel
      ```

# 7) Types and interfaces

```ts
// Example
export type <TypeName> = {
  id: string
  name: string
}
```

# 8) Acceptance criteria

- Route app/routes/*.tsx loads without console errors
- All new strings added to app/i18n/locales with correct keys and Dutch sentence case
- Unit tests under app/components/**tests**/*.test.tsx pass locally (Vitest)
- E2E test playwright/tests/*.spec.ts passes locally (Playwright)
- Database migration applied; seed adjusted if required
- pnpm validate passes (lint + typecheck + test)
- TypeScript compilation succeeds without errors
- Commit follows Conventional Commits format

# 9) Testing strategy

- Unit: focus on behavior and rendering states, mock React Router loaders and Zustand stores where needed
- E2E: verify real user workflow for happy path and key edge conditions using Playwright

# 10) Rollback plan

- Revert route and component files
- Revert Prisma migration using `pnpm prisma migrate reset` or manual down-migration
- Remove added translation keys if obsolete
- Restore previous Zustand store state if applicable

# 11) Out of scope

-

# 12) Notes / links

- <references to PRs, a11y notes, performance budgets, designs>

---

Rationale for changes

- Removed all Next.js, Python, and Firebase backend-specific assumptions. The server runtime is React Router v7's SSR with Prisma and SQLite.
- Updated all technology references to match React Router v7, TypeScript, Vite, and Zustand stack.
- Aligned data layer patterns with Prisma ORM and server-side model patterns.
- Updated state management to reflect Zustand for client state and React Router loaders/actions for server state.
- Strengthened mobile-first, i18n (including Dutch capitalization and RTL), accessibility, and testing sections to reflect Vitest and Playwright.
- Acceptance criteria align with pnpm validate script and existing project structure.
- Added Google Authentication constraint for future implementation phases.
