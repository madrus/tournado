<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="1867" failures="0" errors="0" time="10.847941042">
    <testsuite name="app/hooks/__tests__/SSRHydration.test.ts" timestamp="2025-08-11T17:20:20.378Z" hostname="Mac.HOME" tests="12" failures="0" errors="0" skipped="0" time="0.003174917">
        <testcase classname="app/hooks/__tests__/SSRHydration.test.ts" name="SSR/Hydration Scenarios &gt; Breakpoint Safety &gt; should have correct media query strings regardless of environment" time="0.000869959">
        </testcase>
        <testcase classname="app/hooks/__tests__/SSRHydration.test.ts" name="SSR/Hydration Scenarios &gt; Breakpoint Safety &gt; should handle window access gracefully" time="0.000475208">
        </testcase>
        <testcase classname="app/hooks/__tests__/SSRHydration.test.ts" name="SSR/Hydration Scenarios &gt; Client-Side Hydration &gt; should properly detect desktop breakpoints on client" time="0.000121833">
        </testcase>
        <testcase classname="app/hooks/__tests__/SSRHydration.test.ts" name="SSR/Hydration Scenarios &gt; Client-Side Hydration &gt; should properly detect mobile breakpoints on client" time="0.000095375">
        </testcase>
        <testcase classname="app/hooks/__tests__/SSRHydration.test.ts" name="SSR/Hydration Scenarios &gt; Client-Side Hydration &gt; should properly detect tablet breakpoints on client" time="0.000092792">
        </testcase>
        <testcase classname="app/hooks/__tests__/SSRHydration.test.ts" name="SSR/Hydration Scenarios &gt; Hydration Consistency &gt; should maintain consistent breakpoint behavior between SSR and client" time="0.000106792">
        </testcase>
        <testcase classname="app/hooks/__tests__/SSRHydration.test.ts" name="SSR/Hydration Scenarios &gt; Hydration Consistency &gt; should handle viewport changes during runtime" time="0.000120375">
        </testcase>
        <testcase classname="app/hooks/__tests__/SSRHydration.test.ts" name="SSR/Hydration Scenarios &gt; Media Query Consistency &gt; should have CSS media queries that match JavaScript breakpoint logic" time="0.000084292">
        </testcase>
        <testcase classname="app/hooks/__tests__/SSRHydration.test.ts" name="SSR/Hydration Scenarios &gt; Media Query Consistency &gt; should have consistent breakpoint values between constants and functions" time="0.000114667">
        </testcase>
        <testcase classname="app/hooks/__tests__/SSRHydration.test.ts" name="SSR/Hydration Scenarios &gt; Extreme Viewport Scenarios &gt; should handle very small viewports" time="0.000199083">
        </testcase>
        <testcase classname="app/hooks/__tests__/SSRHydration.test.ts" name="SSR/Hydration Scenarios &gt; Extreme Viewport Scenarios &gt; should handle very large viewports" time="0.00014125">
        </testcase>
        <testcase classname="app/hooks/__tests__/SSRHydration.test.ts" name="SSR/Hydration Scenarios &gt; Extreme Viewport Scenarios &gt; should handle zero or negative viewport widths" time="0.000106958">
        </testcase>
    </testsuite>
    <testsuite name="app/hooks/__tests__/useScrollDirection.test.ts" timestamp="2025-08-11T17:20:20.380Z" hostname="Mac.HOME" tests="21" failures="0" errors="0" skipped="0" time="0.052709667">
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; initialization &gt; should initialize with showHeader true" time="0.005859417">
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; initialization &gt; should return the expected interface" time="0.000699084">
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; desktop behavior &gt; should always show header on desktop regardless of scroll" time="0.000516708">
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; mobile behavior &gt; should initialize with header visible on mobile" time="0.00089875">
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; mobile behavior &gt; should handle mobile detection properly" time="0.000541875">
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; mobile behavior &gt; should set up event listeners for mobile" time="0.002422541">
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; threshold handling &gt; should accept different threshold values" time="0.0008445">
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; threshold handling &gt; should handle zero threshold" time="0.000361833">
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; threshold handling &gt; should handle negative threshold gracefully" time="0.00036725">
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; threshold handling &gt; should work with undefined threshold (use default)" time="0.000307">
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; edge cases &gt; should handle overscroll gracefully" time="0.000290625">
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; edge cases &gt; should handle insufficient content height" time="0.000273958">
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; bounce detection &gt; should set up touch event listeners for bounce detection" time="0.000515667">
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; bounce detection &gt; should detect bounce at bottom and prevent navigation animation" time="0.02307525">
            <system-err>
[Console Error]: An update to %s inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

            </system-err>
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; bounce detection &gt; should handle touch events for bounce detection" time="0.006056875">
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; bounce detection &gt; should NOT change header state when bouncing at bottom" time="0.005207333">
            <system-err>
[Console Error]: An update to %s inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

            </system-err>
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; bounce detection &gt; should work with normal scroll behavior (simplified test)" time="0.001671458">
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; bounce detection &gt; should reset bounce state on touch end" time="0.000508792">
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; bounce detection &gt; should handle overscroll behavior (scroll past maximum)" time="0.000441417">
            <system-err>
[Console Error]: An update to %s inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

            </system-err>
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; cleanup &gt; should clean up event listeners on unmount" time="0.000672875">
        </testcase>
        <testcase classname="app/hooks/__tests__/useScrollDirection.test.ts" name="useScrollDirection &gt; cleanup &gt; should cancel pending animation frames on unmount" time="0.000316917">
        </testcase>
    </testsuite>
    <testsuite name="app/hooks/__tests__/useTournamentFilter.test.ts" timestamp="2025-08-11T17:20:20.381Z" hostname="Mac.HOME" tests="19" failures="0" errors="0" skipped="0" time="0.013150875">
        <testcase classname="app/hooks/__tests__/useTournamentFilter.test.ts" name="useTournamentFilter &gt; tournamentOptions generation &gt; should generate correct tournament options with &quot;All tournaments&quot; option" time="0.005576125">
        </testcase>
        <testcase classname="app/hooks/__tests__/useTournamentFilter.test.ts" name="useTournamentFilter &gt; tournamentOptions generation &gt; should handle empty tournament list" time="0.000602375">
        </testcase>
        <testcase classname="app/hooks/__tests__/useTournamentFilter.test.ts" name="useTournamentFilter &gt; tournamentOptions generation &gt; should handle tournaments with special characters in names" time="0.000459083">
        </testcase>
        <testcase classname="app/hooks/__tests__/useTournamentFilter.test.ts" name="useTournamentFilter &gt; selectedValue determination &gt; should return &quot;all&quot; when no tournament is selected" time="0.000447459">
        </testcase>
        <testcase classname="app/hooks/__tests__/useTournamentFilter.test.ts" name="useTournamentFilter &gt; selectedValue determination &gt; should return tournament ID when selectedTournamentId is provided" time="0.000475375">
        </testcase>
        <testcase classname="app/hooks/__tests__/useTournamentFilter.test.ts" name="useTournamentFilter &gt; selectedValue determination &gt; should return &quot;all&quot; when selectedTournamentId does not exist in tournament list" time="0.000362208">
        </testcase>
        <testcase classname="app/hooks/__tests__/useTournamentFilter.test.ts" name="useTournamentFilter &gt; selectedValue determination &gt; should return &quot;all&quot; when selectedTournamentId is empty string" time="0.000335916">
        </testcase>
        <testcase classname="app/hooks/__tests__/useTournamentFilter.test.ts" name="useTournamentFilter &gt; onChange navigation &gt; should navigate to empty string when &quot;all&quot; is selected" time="0.000654208">
        </testcase>
        <testcase classname="app/hooks/__tests__/useTournamentFilter.test.ts" name="useTournamentFilter &gt; onChange navigation &gt; should navigate with tournament parameter when tournament is selected" time="0.000374542">
        </testcase>
        <testcase classname="app/hooks/__tests__/useTournamentFilter.test.ts" name="useTournamentFilter &gt; onChange navigation &gt; should handle navigation with no existing search params" time="0.000385209">
        </testcase>
        <testcase classname="app/hooks/__tests__/useTournamentFilter.test.ts" name="useTournamentFilter &gt; onChange navigation &gt; should replace existing tournament parameter when changing selection" time="0.000301917">
        </testcase>
        <testcase classname="app/hooks/__tests__/useTournamentFilter.test.ts" name="useTournamentFilter &gt; onChange navigation &gt; should preserve other search parameters when removing tournament filter" time="0.000221333">
        </testcase>
        <testcase classname="app/hooks/__tests__/useTournamentFilter.test.ts" name="useTournamentFilter &gt; edge cases and error handling &gt; should handle navigation errors gracefully" time="0.00031025">
        </testcase>
        <testcase classname="app/hooks/__tests__/useTournamentFilter.test.ts" name="useTournamentFilter &gt; edge cases and error handling &gt; should handle malformed search params" time="0.000385292">
        </testcase>
        <testcase classname="app/hooks/__tests__/useTournamentFilter.test.ts" name="useTournamentFilter &gt; edge cases and error handling &gt; should handle null/undefined tournament list items" time="0.000183792">
        </testcase>
        <testcase classname="app/hooks/__tests__/useTournamentFilter.test.ts" name="useTournamentFilter &gt; re-rendering behavior &gt; should update options when tournament list changes" time="0.000432125">
        </testcase>
        <testcase classname="app/hooks/__tests__/useTournamentFilter.test.ts" name="useTournamentFilter &gt; re-rendering behavior &gt; should update selected value when selectedTournamentId changes" time="0.000218959">
        </testcase>
        <testcase classname="app/hooks/__tests__/useTournamentFilter.test.ts" name="useTournamentFilter &gt; performance considerations &gt; should memoize tournament options to avoid unnecessary recalculations" time="0.00029925">
        </testcase>
        <testcase classname="app/hooks/__tests__/useTournamentFilter.test.ts" name="useTournamentFilter &gt; performance considerations &gt; should handle large tournament lists efficiently" time="0.000336125">
        </testcase>
    </testsuite>
    <testsuite name="test/routes/_index.test.tsx" timestamp="2025-08-11T17:20:20.382Z" hostname="Mac.HOME" tests="8" failures="0" errors="0" skipped="0" time="0.047979833">
        <testcase classname="test/routes/_index.test.tsx" name="Home Page (_index) &gt; View Teams Button Routing &gt; should route to public teams page for non-authenticated users" time="0.014224709">
        </testcase>
        <testcase classname="test/routes/_index.test.tsx" name="Home Page (_index) &gt; View Teams Button Routing &gt; should route to public teams page for PUBLIC users only" time="0.001611209">
        </testcase>
        <testcase classname="test/routes/_index.test.tsx" name="Home Page (_index) &gt; View Teams Button Routing &gt; should route to admin teams page for users with admin panel access" time="0.002076958">
        </testcase>
        <testcase classname="test/routes/_index.test.tsx" name="Home Page (_index) &gt; View Teams Button Routing &gt; should route to admin teams page for admin users" time="0.001861875">
        </testcase>
        <testcase classname="test/routes/_index.test.tsx" name="Home Page (_index) &gt; View Teams Button Routing &gt; should route based on user role with comprehensive test matrix" time="0.005667416">
        </testcase>
        <testcase classname="test/routes/_index.test.tsx" name="Home Page (_index) &gt; Page Structure &gt; should render main elements correctly" time="0.008088042">
        </testcase>
        <testcase classname="test/routes/_index.test.tsx" name="Home Page (_index) &gt; Page Structure &gt; should render View Teams button with correct styling" time="0.001355125">
        </testcase>
        <testcase classname="test/routes/_index.test.tsx" name="Home Page (_index) &gt; Consistency with AppBar &gt; should use same routing logic as AppBar Teams menu item" time="0.008272792">
        </testcase>
    </testsuite>
    <testsuite name="test/routes/about.test.tsx" timestamp="2025-08-11T17:20:20.382Z" hostname="Mac.HOME" tests="13" failures="0" errors="0" skipped="0" time="0.041326209">
        <testcase classname="test/routes/about.test.tsx" name="About Page &gt; Basic Rendering &gt; should render main page title" time="0.0149045">
        </testcase>
        <testcase classname="test/routes/about.test.tsx" name="About Page &gt; Basic Rendering &gt; should render all main sections" time="0.003237125">
        </testcase>
        <testcase classname="test/routes/about.test.tsx" name="About Page &gt; Basic Rendering &gt; should display version information" time="0.001331333">
        </testcase>
        <testcase classname="test/routes/about.test.tsx" name="About Page &gt; Content Structure &gt; should render app description" time="0.00112525">
        </testcase>
        <testcase classname="test/routes/about.test.tsx" name="About Page &gt; Content Structure &gt; should render feature list" time="0.004251167">
        </testcase>
        <testcase classname="test/routes/about.test.tsx" name="About Page &gt; Content Structure &gt; should render technology stack information" time="0.001073417">
        </testcase>
        <testcase classname="test/routes/about.test.tsx" name="About Page &gt; Styling and Layout &gt; should apply correct CSS classes to main container" time="0.000836125">
        </testcase>
        <testcase classname="test/routes/about.test.tsx" name="About Page &gt; Styling and Layout &gt; should apply correct styling to main heading" time="0.001639791">
        </testcase>
        <testcase classname="test/routes/about.test.tsx" name="About Page &gt; Styling and Layout &gt; should apply correct styling to section headings" time="0.001571375">
        </testcase>
        <testcase classname="test/routes/about.test.tsx" name="About Page &gt; Styling and Layout &gt; should format version number with monospace font" time="0.001077792">
        </testcase>
        <testcase classname="test/routes/about.test.tsx" name="About Page &gt; Accessibility &gt; should have proper heading hierarchy" time="0.00678875">
        </testcase>
        <testcase classname="test/routes/about.test.tsx" name="About Page &gt; Accessibility &gt; should have semantic HTML structure" time="0.001611542">
        </testcase>
        <testcase classname="test/routes/about.test.tsx" name="About Page &gt; Translation Integration &gt; should render with translation system" time="0.001099">
        </testcase>
    </testsuite>
    <testsuite name="test/routes/catchall.test.tsx" timestamp="2025-08-11T17:20:20.383Z" hostname="Mac.HOME" tests="19" failures="0" errors="0" skipped="0" time="0.041280209">
        <testcase classname="test/routes/catchall.test.tsx" name="Catch-all Route ($) &gt; NotFoundPage Component &gt; should render ErrorBoundary component" time="0.014152459">
        </testcase>
        <testcase classname="test/routes/catchall.test.tsx" name="Catch-all Route ($) &gt; NotFoundPage Component &gt; should be a fallback that renders error boundary" time="0.001367292">
        </testcase>
        <testcase classname="test/routes/catchall.test.tsx" name="Catch-all Route ($) &gt; ErrorBoundary Component &gt; should render 404 error message" time="0.001220625">
        </testcase>
        <testcase classname="test/routes/catchall.test.tsx" name="Catch-all Route ($) &gt; ErrorBoundary Component &gt; should display the current pathname" time="0.000839875">
        </testcase>
        <testcase classname="test/routes/catchall.test.tsx" name="Catch-all Route ($) &gt; ErrorBoundary Component &gt; should render back to home link" time="0.010818333">
        </testcase>
        <testcase classname="test/routes/catchall.test.tsx" name="Catch-all Route ($) &gt; ErrorBoundary Component &gt; should use GeneralErrorBoundary with 404 status handler" time="0.001076416">
        </testcase>
        <testcase classname="test/routes/catchall.test.tsx" name="Catch-all Route ($) &gt; Error Message Structure &gt; should organize error content in logical sections" time="0.000716875">
        </testcase>
        <testcase classname="test/routes/catchall.test.tsx" name="Catch-all Route ($) &gt; Error Message Structure &gt; should display pathname in preformatted text" time="0.0007065">
        </testcase>
        <testcase classname="test/routes/catchall.test.tsx" name="Catch-all Route ($) &gt; Error Message Structure &gt; should style pathname display correctly" time="0.00074225">
        </testcase>
        <testcase classname="test/routes/catchall.test.tsx" name="Catch-all Route ($) &gt; Navigation and Recovery &gt; should provide clear path back to home" time="0.000662375">
        </testcase>
        <testcase classname="test/routes/catchall.test.tsx" name="Catch-all Route ($) &gt; Navigation and Recovery &gt; should have accessible link text" time="0.003266125">
        </testcase>
        <testcase classname="test/routes/catchall.test.tsx" name="Catch-all Route ($) &gt; Pathname Display &gt; should display the pathname from useLocation" time="0.000655709">
        </testcase>
        <testcase classname="test/routes/catchall.test.tsx" name="Catch-all Route ($) &gt; Pathname Display &gt; should handle pathname structure correctly" time="0.000513916">
        </testcase>
        <testcase classname="test/routes/catchall.test.tsx" name="Catch-all Route ($) &gt; Error Boundary Integration &gt; should pass 404 status handler to GeneralErrorBoundary" time="0.000556">
        </testcase>
        <testcase classname="test/routes/catchall.test.tsx" name="Catch-all Route ($) &gt; Error Boundary Integration &gt; should render error boundary with proper structure" time="0.000504333">
        </testcase>
        <testcase classname="test/routes/catchall.test.tsx" name="Catch-all Route ($) &gt; Accessibility &gt; should have accessible error message" time="0.000463417">
        </testcase>
        <testcase classname="test/routes/catchall.test.tsx" name="Catch-all Route ($) &gt; Accessibility &gt; should have semantic HTML structure" time="0.000919625">
        </testcase>
        <testcase classname="test/routes/catchall.test.tsx" name="Catch-all Route ($) &gt; Content Layout &gt; should organize content in logical flow" time="0.000547333">
        </testcase>
        <testcase classname="test/routes/catchall.test.tsx" name="Catch-all Route ($) &gt; Content Layout &gt; should separate title section from path section" time="0.000696375">
        </testcase>
    </testsuite>
    <testsuite name="test/routes/profile.test.tsx" timestamp="2025-08-11T17:20:20.385Z" hostname="Mac.HOME" tests="14" failures="0" errors="0" skipped="0" time="0.114150417">
        <testcase classname="test/routes/profile.test.tsx" name="Profile Page &gt; Basic Rendering &gt; should render main page title" time="0.024672292">
        </testcase>
        <testcase classname="test/routes/profile.test.tsx" name="Profile Page &gt; Basic Rendering &gt; should render profile information section" time="0.001773709">
        </testcase>
        <testcase classname="test/routes/profile.test.tsx" name="Profile Page &gt; Basic Rendering &gt; should render account settings section" time="0.001124417">
        </testcase>
        <testcase classname="test/routes/profile.test.tsx" name="Profile Page &gt; Basic Rendering &gt; should render tournament access section" time="0.03004925">
        </testcase>
        <testcase classname="test/routes/profile.test.tsx" name="Profile Page &gt; Content Structure &gt; should render profile information content" time="0.001456458">
        </testcase>
        <testcase classname="test/routes/profile.test.tsx" name="Profile Page &gt; Content Structure &gt; should render account settings list" time="0.001206084">
        </testcase>
        <testcase classname="test/routes/profile.test.tsx" name="Profile Page &gt; Content Structure &gt; should render tournament access content" time="0.000870542">
        </testcase>
        <testcase classname="test/routes/profile.test.tsx" name="Profile Page &gt; Styling and Layout &gt; should apply correct CSS classes to main container" time="0.001263875">
        </testcase>
        <testcase classname="test/routes/profile.test.tsx" name="Profile Page &gt; Styling and Layout &gt; should apply correct styling to main heading" time="0.001778416">
        </testcase>
        <testcase classname="test/routes/profile.test.tsx" name="Profile Page &gt; Styling and Layout &gt; should apply correct styling to section headings" time="0.023443958">
        </testcase>
        <testcase classname="test/routes/profile.test.tsx" name="Profile Page &gt; Section Structure &gt; should have proper section hierarchy" time="0.005498083">
        </testcase>
        <testcase classname="test/routes/profile.test.tsx" name="Profile Page &gt; Section Structure &gt; should render sections in correct order" time="0.002836958">
        </testcase>
        <testcase classname="test/routes/profile.test.tsx" name="Profile Page &gt; Accessibility &gt; should have proper heading hierarchy" time="0.0032325">
        </testcase>
        <testcase classname="test/routes/profile.test.tsx" name="Profile Page &gt; Translation Integration &gt; should render with translation system" time="0.001187208">
        </testcase>
    </testsuite>
    <testsuite name="test/routes/settings.test.tsx" timestamp="2025-08-11T17:20:20.385Z" hostname="Mac.HOME" tests="14" failures="0" errors="0" skipped="0" time="0.03821275">
        <testcase classname="test/routes/settings.test.tsx" name="Settings Page &gt; Basic Rendering &gt; should render main page title" time="0.014627583">
        </testcase>
        <testcase classname="test/routes/settings.test.tsx" name="Settings Page &gt; Basic Rendering &gt; should render application settings section" time="0.001796833">
        </testcase>
        <testcase classname="test/routes/settings.test.tsx" name="Settings Page &gt; Basic Rendering &gt; should render preferences section" time="0.001137541">
        </testcase>
        <testcase classname="test/routes/settings.test.tsx" name="Settings Page &gt; Basic Rendering &gt; should render tournament configuration section" time="0.000981584">
        </testcase>
        <testcase classname="test/routes/settings.test.tsx" name="Settings Page &gt; Content Structure &gt; should render application settings content" time="0.001055375">
        </testcase>
        <testcase classname="test/routes/settings.test.tsx" name="Settings Page &gt; Content Structure &gt; should render preferences list" time="0.001057166">
        </testcase>
        <testcase classname="test/routes/settings.test.tsx" name="Settings Page &gt; Content Structure &gt; should render tournament configuration content" time="0.002162833">
        </testcase>
        <testcase classname="test/routes/settings.test.tsx" name="Settings Page &gt; Styling and Layout &gt; should apply correct CSS classes to main container" time="0.000938458">
        </testcase>
        <testcase classname="test/routes/settings.test.tsx" name="Settings Page &gt; Styling and Layout &gt; should apply correct styling to main heading" time="0.002443875">
        </testcase>
        <testcase classname="test/routes/settings.test.tsx" name="Settings Page &gt; Styling and Layout &gt; should apply correct styling to section headings" time="0.001872125">
        </testcase>
        <testcase classname="test/routes/settings.test.tsx" name="Settings Page &gt; Section Structure &gt; should have proper section hierarchy" time="0.004705292">
        </testcase>
        <testcase classname="test/routes/settings.test.tsx" name="Settings Page &gt; Section Structure &gt; should render sections in correct order" time="0.0013695">
        </testcase>
        <testcase classname="test/routes/settings.test.tsx" name="Settings Page &gt; Accessibility &gt; should have proper heading hierarchy" time="0.001274042">
        </testcase>
        <testcase classname="test/routes/settings.test.tsx" name="Settings Page &gt; Translation Integration &gt; should render with translation system" time="0.001077667">
        </testcase>
    </testsuite>
    <testsuite name="test/routes/unauthorized.test.tsx" timestamp="2025-08-11T17:20:20.386Z" hostname="Mac.HOME" tests="23" failures="0" errors="0" skipped="0" time="0.072595417">
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Basic Rendering &gt; should render main error title" time="0.021700792">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Basic Rendering &gt; should render error description" time="0.001561959">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Basic Rendering &gt; should render block icon" time="0.001286916">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Basic Rendering &gt; should render navigation links" time="0.000930875">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Navigation Links &gt; should render Back to Home link with correct attributes" time="0.012236125">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Navigation Links &gt; should render Profile link with correct attributes" time="0.001181209">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Navigation Links &gt; should style home link as primary button" time="0.000782917">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Navigation Links &gt; should style profile link as secondary button" time="0.004739625">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Layout and Styling &gt; should apply correct layout classes to main container" time="0.0008405">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Layout and Styling &gt; should apply correct styling to content card" time="0.000848417">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Layout and Styling &gt; should style icon container correctly" time="0.0006795">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Layout and Styling &gt; should apply correct typography to title" time="0.000759459">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Layout and Styling &gt; should apply correct styling to description" time="0.000773833">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Content Organization &gt; should organize content in logical sections" time="0.000633">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Content Organization &gt; should render elements in correct order" time="0.00075925">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Content Organization &gt; should group action buttons together" time="0.000608292">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Accessibility &gt; should have proper heading hierarchy" time="0.00536325">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Accessibility &gt; should have accessible link text" time="0.001011375">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Accessibility &gt; should use semantic HTML structure" time="0.010691">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Error Communication &gt; should clearly communicate the error state" time="0.001000084">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Error Communication &gt; should provide helpful recovery options" time="0.000626125">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Visual Design &gt; should use red color scheme for error indication" time="0.000588125">
        </testcase>
        <testcase classname="test/routes/unauthorized.test.tsx" name="Unauthorized Page &gt; Visual Design &gt; should center content on screen" time="0.000931292">
        </testcase>
    </testsuite>
    <testsuite name="app/i18n/__tests__/i18n-integration-fixed.test.tsx" timestamp="2025-08-11T17:20:20.388Z" hostname="Mac.HOME" tests="9" failures="0" errors="0" skipped="0" time="0.050662833">
        <testcase classname="app/i18n/__tests__/i18n-integration-fixed.test.tsx" name="i18n React Integration &gt; Translation Rendering &gt; should render German translations in React components" time="0.010201958">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-fixed.test.tsx" name="i18n React Integration &gt; Translation Rendering &gt; should render German email address label" time="0.002920459">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-fixed.test.tsx" name="i18n React Integration &gt; Translation Rendering &gt; should render German navigation items" time="0.001068084">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-fixed.test.tsx" name="i18n React Integration &gt; Translation Rendering &gt; should handle German error messages" time="0.001657917">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-fixed.test.tsx" name="i18n React Integration &gt; Language Switching in React &gt; should switch languages dynamically" time="0.028698">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-fixed.test.tsx" name="i18n React Integration &gt; Language Switching in React &gt; should work with Turkish translations" time="0.000869417">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-fixed.test.tsx" name="i18n React Integration &gt; Language Switching in React &gt; should handle interpolation in components" time="0.001089083">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-fixed.test.tsx" name="i18n React Integration &gt; Fallback Behavior &gt; should show translation keys for missing translations" time="0.0007345">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-fixed.test.tsx" name="i18n Performance in React &gt; should initialize quickly for all languages" time="0.002061542">
        </testcase>
    </testsuite>
    <testsuite name="app/i18n/__tests__/i18n-integration-working.test.tsx" timestamp="2025-08-11T17:20:20.388Z" hostname="Mac.HOME" tests="13" failures="0" errors="0" skipped="0" time="0.022855666">
        <testcase classname="app/i18n/__tests__/i18n-integration-working.test.tsx" name="i18n React Integration - Real Translations &gt; German Translation Rendering &gt; should render German app name correctly" time="0.011376666">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-working.test.tsx" name="i18n React Integration - Real Translations &gt; German Translation Rendering &gt; should render German email address label" time="0.001138708">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-working.test.tsx" name="i18n React Integration - Real Translations &gt; German Translation Rendering &gt; should render German teams navigation" time="0.000770792">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-working.test.tsx" name="i18n React Integration - Real Translations &gt; German Translation Rendering &gt; should render German error messages" time="0.000708917">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-working.test.tsx" name="i18n React Integration - Real Translations &gt; Multi-language Support &gt; should work with Turkish translations" time="0.001719042">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-working.test.tsx" name="i18n React Integration - Real Translations &gt; Multi-language Support &gt; should work with Dutch translations" time="0.000821542">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-working.test.tsx" name="i18n React Integration - Real Translations &gt; Multi-language Support &gt; should work with English translations" time="0.000721958">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-working.test.tsx" name="i18n React Integration - Real Translations &gt; Interpolation in Components &gt; should handle German count interpolation" time="0.001014375">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-working.test.tsx" name="i18n React Integration - Real Translations &gt; Interpolation in Components &gt; should handle German plural count" time="0.000612292">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-working.test.tsx" name="i18n React Integration - Real Translations &gt; Language Context &gt; should provide correct language context" time="0.000497958">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-working.test.tsx" name="i18n React Integration - Real Translations &gt; Language Context &gt; should work with Arabic language" time="0.000325833">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-working.test.tsx" name="i18n React Integration - Real Translations &gt; Fallback Behavior &gt; should return key for missing translations" time="0.000375959">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration-working.test.tsx" name="i18n React Performance &gt; should render all languages quickly" time="0.00149875">
        </testcase>
    </testsuite>
    <testsuite name="app/i18n/__tests__/i18n-integration.test.tsx" timestamp="2025-08-11T17:20:20.389Z" hostname="Mac.HOME" tests="14" failures="0" errors="0" skipped="0" time="0.216687125">
        <testcase classname="app/i18n/__tests__/i18n-integration.test.tsx" name="i18n Integration Tests &gt; German Translation Verification &gt; should render German translations correctly" time="0.009777042">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration.test.tsx" name="i18n Integration Tests &gt; German Translation Verification &gt; should render German form labels correctly" time="0.001234208">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration.test.tsx" name="i18n Integration Tests &gt; German Translation Verification &gt; should render German navigation items correctly" time="0.000796125">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration.test.tsx" name="i18n Integration Tests &gt; German Translation Verification &gt; should handle German error messages" time="0.001105167">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration.test.tsx" name="i18n Integration Tests &gt; Language Switching Tests &gt; should switch from Dutch to German dynamically" time="0.015957958">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration.test.tsx" name="i18n Integration Tests &gt; Language Switching Tests &gt; should switch to all supported languages" time="0.048674625">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration.test.tsx" name="i18n Integration Tests &gt; Language Switching Tests &gt; should maintain translation context after language switch" time="0.019916875">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration.test.tsx" name="i18n Integration Tests &gt; Fallback Language Tests &gt; should fallback to Dutch for missing translations" time="0.001303708">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration.test.tsx" name="i18n Integration Tests &gt; Fallback Language Tests &gt; should use English fallback for better coverage" time="0.001126417">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration.test.tsx" name="i18n Integration Tests &gt; RTL Language Support &gt; should handle Arabic RTL correctly" time="0.000803833">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration.test.tsx" name="i18n Integration Tests &gt; RTL Language Support &gt; should handle Turkish correctly" time="0.000463125">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration.test.tsx" name="i18n Integration Tests &gt; Translation Interpolation &gt; should handle interpolation in German" time="0.001535208">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration.test.tsx" name="Translation Performance Tests &gt; should initialize i18n instances quickly" time="0.000296375">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-integration.test.tsx" name="Translation Performance Tests &gt; should handle multiple rapid language switches" time="0.112537958">
        </testcase>
    </testsuite>
    <testsuite name="app/i18n/__tests__/i18n-simple.test.tsx" timestamp="2025-08-11T17:20:20.390Z" hostname="Mac.HOME" tests="8" failures="0" errors="0" skipped="0" time="0.004341417">
        <testcase classname="app/i18n/__tests__/i18n-simple.test.tsx" name="i18n Basic Functionality &gt; Configuration Tests &gt; should load German translations correctly" time="0.001847375">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-simple.test.tsx" name="i18n Basic Functionality &gt; Configuration Tests &gt; should load Dutch translations correctly" time="0.000344208">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-simple.test.tsx" name="i18n Basic Functionality &gt; Configuration Tests &gt; should load English translations correctly" time="0.000283291">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-simple.test.tsx" name="i18n Basic Functionality &gt; Configuration Tests &gt; should handle translation interpolation" time="0.000653208">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-simple.test.tsx" name="i18n Basic Functionality &gt; Configuration Tests &gt; should handle language switching" time="0.000219334">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-simple.test.tsx" name="i18n Basic Functionality &gt; Configuration Tests &gt; should fallback to showing keys for missing translations" time="0.000161459">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-simple.test.tsx" name="i18n Basic Functionality &gt; Resource Validation &gt; should have all required resources loaded" time="0.000161125">
        </testcase>
        <testcase classname="app/i18n/__tests__/i18n-simple.test.tsx" name="i18n Basic Functionality &gt; Resource Validation &gt; should have common namespace in all resources" time="0.000114959">
        </testcase>
    </testsuite>
    <testsuite name="app/i18n/__tests__/lazy-loading.test.ts" timestamp="2025-08-11T17:20:20.390Z" hostname="Mac.HOME" tests="11" failures="0" errors="0" skipped="0" time="0.007321333">
        <testcase classname="app/i18n/__tests__/lazy-loading.test.ts" name="i18n Lazy Loading Performance &gt; Bundle Size Optimization &gt; should report significant bundle size savings" time="0.001119208">
            <system-out>
Bundle size savings: 40.0KB (83.3%)

            </system-out>
        </testcase>
        <testcase classname="app/i18n/__tests__/lazy-loading.test.ts" name="i18n Lazy Loading Performance &gt; Bundle Size Optimization &gt; should load only the requested language initially" time="0.000614542">
        </testcase>
        <testcase classname="app/i18n/__tests__/lazy-loading.test.ts" name="i18n Lazy Loading Performance &gt; Performance Comparison &gt; should initialize faster than full bundle" time="0.000307083">
            <system-out>
Lazy loading: 0.07ms
Full bundle: 0.05ms

            </system-out>
        </testcase>
        <testcase classname="app/i18n/__tests__/lazy-loading.test.ts" name="i18n Lazy Loading Performance &gt; Performance Comparison &gt; should handle rapid initialization requests efficiently" time="0.000401209">
        </testcase>
        <testcase classname="app/i18n/__tests__/lazy-loading.test.ts" name="i18n Lazy Loading Performance &gt; Language Switching Performance &gt; should load new languages on demand" time="0.000436625">
        </testcase>
        <testcase classname="app/i18n/__tests__/lazy-loading.test.ts" name="i18n Lazy Loading Performance &gt; Language Switching Performance &gt; should cache loaded languages for faster subsequent switches" time="0.000282041">
            <system-out>
First switch: 0.06ms
Cached switch: 0.01ms

            </system-out>
        </testcase>
        <testcase classname="app/i18n/__tests__/lazy-loading.test.ts" name="i18n Lazy Loading Performance &gt; Language Switching Performance &gt; should handle invalid language codes gracefully" time="0.000403791">
        </testcase>
        <testcase classname="app/i18n/__tests__/lazy-loading.test.ts" name="i18n Lazy Loading Performance &gt; Memory Efficiency &gt; should use less memory than full bundle approach" time="0.000197375">
            <system-out>
Lazy bundles loaded: 1
Full bundles loaded: 6

            </system-out>
        </testcase>
        <testcase classname="app/i18n/__tests__/lazy-loading.test.ts" name="i18n Lazy Loading Performance &gt; Memory Efficiency &gt; should only load what is actually used" time="0.000696958">
        </testcase>
        <testcase classname="app/i18n/__tests__/lazy-loading.test.ts" name="i18n Lazy Loading Performance &gt; Production Readiness &gt; should work with all supported languages" time="0.001726333">
        </testcase>
        <testcase classname="app/i18n/__tests__/lazy-loading.test.ts" name="i18n Lazy Loading Performance &gt; Production Readiness &gt; should handle concurrent language switches" time="0.000533708">
        </testcase>
    </testsuite>
    <testsuite name="app/i18n/__tests__/translation-coverage.test.ts" timestamp="2025-08-11T17:20:20.391Z" hostname="Mac.HOME" tests="11" failures="0" errors="0" skipped="0" time="0.046515">
        <testcase classname="app/i18n/__tests__/translation-coverage.test.ts" name="Translation Key Coverage &gt; should have all namespaces in every locale" time="0.000885416">
        </testcase>
        <testcase classname="app/i18n/__tests__/translation-coverage.test.ts" name="Translation Key Coverage &gt; should have consistent keys across all locales for each namespace" time="0.001461125">
        </testcase>
        <testcase classname="app/i18n/__tests__/translation-coverage.test.ts" name="Critical Key Verification &gt; should have all critical keys in every locale" time="0.001572625">
        </testcase>
        <testcase classname="app/i18n/__tests__/translation-coverage.test.ts" name="Critical Key Verification &gt; should have non-empty values for critical keys" time="0.000725209">
        </testcase>
        <testcase classname="app/i18n/__tests__/translation-coverage.test.ts" name="Form Validation Coverage &gt; should have all form error messages in every locale" time="0.000632625">
        </testcase>
        <testcase classname="app/i18n/__tests__/translation-coverage.test.ts" name="Navigation Coverage &gt; should have all navigation keys in every locale" time="0.000757291">
        </testcase>
        <testcase classname="app/i18n/__tests__/translation-coverage.test.ts" name="Translation Quality Checks &gt; should not have placeholder values in translations" time="0.02861075">
        </testcase>
        <testcase classname="app/i18n/__tests__/translation-coverage.test.ts" name="Translation Quality Checks &gt; should not have empty string translations" time="0.0091585">
        </testcase>
        <testcase classname="app/i18n/__tests__/translation-coverage.test.ts" name="Translation Quality Checks &gt; should maintain consistent interpolation variables" time="0.00074525">
        </testcase>
        <testcase classname="app/i18n/__tests__/translation-coverage.test.ts" name="Translation Bundle Analysis &gt; should report translation bundle sizes" time="0.000932458">
            <system-out>
Nederlands (nl): 11.07 KB
English (en): 10.57 KB
Deutsch (de): 11.97 KB
Français (fr): 12.31 KB
العربية (ar): 14.01 KB
Türkçe (tr): 11.22 KB

            </system-out>
        </testcase>
        <testcase classname="app/i18n/__tests__/translation-coverage.test.ts" name="Translation Bundle Analysis &gt; should calculate total i18n bundle impact" time="0.000410167">
            <system-out>
Total i18n bundle size: 71.15 KB

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="app/lib/__tests__/lib.constants.test.ts" timestamp="2025-08-11T17:20:20.392Z" hostname="Mac.HOME" tests="9" failures="0" errors="0" skipped="0" time="0.005294125">
        <testcase classname="app/lib/__tests__/lib.constants.test.ts" name="lib.constants &gt; SUPPORTED_LANGUAGES &gt; should have consistent structure for all languages" time="0.001789041">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.constants.test.ts" name="lib.constants &gt; SUPPORTED_LANGUAGES &gt; should have unique language codes" time="0.000435">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.constants.test.ts" name="lib.constants &gt; SUPPORTED_LANGUAGES &gt; should match languages configured in i18n resources" time="0.0001645">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.constants.test.ts" name="lib.constants &gt; SUPPORTED_LANGUAGES &gt; should have all languages present in i18n locale files" time="0.000187625">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.constants.test.ts" name="lib.constants &gt; DIVISIONS &gt; should contain labels for all supported languages" time="0.000924542">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.constants.test.ts" name="lib.constants &gt; DIVISIONS &gt; should not contain labels for unsupported languages" time="0.000671333">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.constants.test.ts" name="lib.constants &gt; DIVISIONS &gt; should have consistent structure for all divisions" time="0.000364833">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.constants.test.ts" name="lib.constants &gt; DIVISIONS &gt; should have unique order values" time="0.000079375">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.constants.test.ts" name="lib.constants &gt; DIVISIONS &gt; should have sequential order values starting from 1" time="0.000096041">
        </testcase>
    </testsuite>
    <testsuite name="app/lib/__tests__/lib.helpers.test.ts" timestamp="2025-08-11T17:20:20.393Z" hostname="Mac.HOME" tests="195" failures="0" errors="0" skipped="0" time="0.028008583">
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should return correct English label for PREMIER_DIVISION" time="0.000750166">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should return correct English label for FIRST_DIVISION" time="0.000103042">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should return correct English label for SECOND_DIVISION" time="0.000077916">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should return correct English label for THIRD_DIVISION" time="0.000063333">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should return correct English label for FOURTH_DIVISION" time="0.000057541">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should return correct English label for FIFTH_DIVISION" time="0.000057333">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should return correct Dutch label for PREMIER_DIVISION" time="0.000059416">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should return correct Dutch label for FIRST_DIVISION" time="0.000048042">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should return correct Dutch label for SECOND_DIVISION" time="0.000055083">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should return correct Dutch label for THIRD_DIVISION" time="0.000069875">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should return correct Dutch label for FOURTH_DIVISION" time="0.000050167">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should return correct Dutch label for FIFTH_DIVISION" time="0.000048041">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should return correct Arabic label for PREMIER_DIVISION" time="0.000049">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should return correct Arabic label for FIRST_DIVISION" time="0.000041625">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should return correct Arabic label for SECOND_DIVISION" time="0.000041375">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should return correct French label for PREMIER_DIVISION" time="0.000047041">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should return correct French label for FIRST_DIVISION" time="0.000070792">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should return correct French label for SECOND_DIVISION" time="0.000061542">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should fallback to Dutch when language PREMIER_DIVISION not available for xx" time="0.000051833">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should fallback to Dutch when language FIRST_DIVISION not available for zz" time="0.000040042">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should fallback to custom fallback language for PREMIER_DIVISION" time="0.000043708">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should fallback to custom fallback language for FIRST_DIVISION" time="0.0000495">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should return division key when no language available" time="0.000063333">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabel &gt; should use Dutch as default language" time="0.0000545">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivision &gt; should convert valid string PREMIER_DIVISION to Division" time="0.000082209">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivision &gt; should convert valid string FIRST_DIVISION to Division" time="0.000051334">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivision &gt; should convert valid string SECOND_DIVISION to Division" time="0.000050625">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivision &gt; should convert valid string THIRD_DIVISION to Division" time="0.000040333">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivision &gt; should convert valid string FOURTH_DIVISION to Division" time="0.000037584">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivision &gt; should convert valid string FIFTH_DIVISION to Division" time="0.000039">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivision &gt; should convert lowercase string premier_division to Division" time="0.000046792">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivision &gt; should convert lowercase string first_division to Division" time="0.0000385">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivision &gt; should convert lowercase string second_division to Division" time="0.000037916">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivision &gt; should convert mixed case string Premier_Division to Division" time="0.000045125">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivision &gt; should convert mixed case string First_DIVISION to Division" time="0.000037708">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivision &gt; should return undefined for invalid string INVALID_DIVISION" time="0.000054417">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivision &gt; should return undefined for invalid string random_string" time="0.000046791">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivision &gt; should return undefined for invalid string 123" time="0.000117">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivision &gt; should return undefined for invalid string " time="0.000057958">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivision &gt; should return undefined for null input" time="0.0000825">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivision &gt; should return undefined for undefined input" time="0.000046959">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidDivision &gt; should return true for valid division string PREMIER_DIVISION" time="0.000066333">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidDivision &gt; should return true for valid division string FIRST_DIVISION" time="0.000053667">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidDivision &gt; should return true for valid division string SECOND_DIVISION" time="0.000041458">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidDivision &gt; should return true for valid division string THIRD_DIVISION" time="0.00123375">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidDivision &gt; should return true for valid division string FOURTH_DIVISION" time="0.000155959">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidDivision &gt; should return true for valid division string FIFTH_DIVISION" time="0.000065458">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidDivision &gt; should return true for valid division string premier_division in any case" time="0.000069542">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidDivision &gt; should return true for valid division string First_Division in any case" time="0.000048166">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidDivision &gt; should return true for valid division string SECOND_division in any case" time="0.000049166">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidDivision &gt; should return false for invalid string INVALID_DIVISION" time="0.000060084">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidDivision &gt; should return false for invalid string random_string" time="0.000043459">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidDivision &gt; should return false for invalid string 123" time="0.00004175">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidDivision &gt; should return false for invalid string " time="0.000047834">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidDivision &gt; should return false for null input" time="0.00004925">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidDivision &gt; should return false for undefined input" time="0.000041292">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionByValue &gt; should return correct division object for PREMIER_DIVISION" time="0.000115291">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionByValue &gt; should return correct division object for FIRST_DIVISION" time="0.00006775">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionByValue &gt; should return undefined for invalid value INVALID_DIVISION" time="0.0000595">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionByValue &gt; should return undefined for invalid value random_string" time="0.000045917">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionByValue &gt; should return undefined for invalid value " time="0.000052125">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionByValue &gt; should be case sensitive for premier_division" time="0.0001585">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionByValue &gt; should be case sensitive for Premier_Division" time="0.000175083">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabelByValue &gt; should return correct English label for PREMIER_DIVISION" time="0.000106584">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabelByValue &gt; should return correct English label for FIRST_DIVISION" time="0.000054875">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabelByValue &gt; should return correct English label for SECOND_DIVISION" time="0.000052458">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabelByValue &gt; should return correct Dutch label for PREMIER_DIVISION" time="0.00006525">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabelByValue &gt; should return correct Dutch label for FIRST_DIVISION" time="0.000046584">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabelByValue &gt; should return correct Dutch label for SECOND_DIVISION" time="0.000048042">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabelByValue &gt; should return the value itself when division INVALID_DIVISION not found" time="0.000056291">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionLabelByValue &gt; should return the value itself when division random_string not found" time="0.000044959">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getAllDivisions &gt; should return all division objects" time="0.000637">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getAllDivisions &gt; should return divisions with correct structure" time="0.00043425">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getAllDivisions &gt; should return divisions in correct order" time="0.000297625">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionValues &gt; should return all division values" time="0.000190083">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getDivisionValues &gt; should return only string values" time="0.000086709">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivisionValue &gt; should convert valid string PREMIER_DIVISION to DivisionValue" time="0.000066">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivisionValue &gt; should convert valid string FIRST_DIVISION to DivisionValue" time="0.000052417">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivisionValue &gt; should convert valid string SECOND_DIVISION to DivisionValue" time="0.000053792">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivisionValue &gt; should convert valid string THIRD_DIVISION to DivisionValue" time="0.000048125">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivisionValue &gt; should convert valid string FOURTH_DIVISION to DivisionValue" time="0.000049">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivisionValue &gt; should convert valid string FIFTH_DIVISION to DivisionValue" time="0.000054041">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivisionValue &gt; should convert lowercase string premier_division to DivisionValue" time="0.000064583">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivisionValue &gt; should convert lowercase string first_division to DivisionValue" time="0.00005725">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivisionValue &gt; should convert lowercase string second_division to DivisionValue" time="0.000056708">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivisionValue &gt; should convert mixed case string Premier_Division to DivisionValue" time="0.00007325">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivisionValue &gt; should convert mixed case string First_DIVISION to DivisionValue" time="0.000049916">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivisionValue &gt; should return undefined for invalid string INVALID_DIVISION" time="0.000055125">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivisionValue &gt; should return undefined for invalid string random_string" time="0.00005275">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivisionValue &gt; should return undefined for invalid string 123" time="0.000050041">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivisionValue &gt; should return undefined for invalid string " time="0.000055125">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivisionValue &gt; should return undefined for null input" time="0.000059666">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToDivisionValue &gt; should return undefined for undefined input" time="0.000054542">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; Integration tests &gt; should have consistent behavior between string conversion functions" time="0.000108666">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; Integration tests &gt; should have consistent labels between different implementations" time="0.000139416">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; Integration tests &gt; should maintain order consistency" time="0.000101209">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string JO8 to Category enum" time="0.000087792">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string JO9 to Category enum" time="0.000061">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string JO10 to Category enum" time="0.000067958">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string JO11 to Category enum" time="0.000071875">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string JO12 to Category enum" time="0.000070416">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string JO13 to Category enum" time="0.000061291">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string JO14 to Category enum" time="0.000058541">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string JO15 to Category enum" time="0.000063125">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string JO16 to Category enum" time="0.00006225">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string JO17 to Category enum" time="0.000068125">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string JO19 to Category enum" time="0.000062709">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string MO8 to Category enum" time="0.00005925">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string MO9 to Category enum" time="0.000057708">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string MO10 to Category enum" time="0.00007775">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string MO11 to Category enum" time="0.000058292">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string MO12 to Category enum" time="0.000057916">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string MO13 to Category enum" time="0.00006025">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string MO14 to Category enum" time="0.000058166">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string MO15 to Category enum" time="0.000058917">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string MO16 to Category enum" time="0.000065708">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string MO17 to Category enum" time="0.00008025">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string MO19 to Category enum" time="0.000060375">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string VETERANEN_35_PLUS to Category enum" time="0.0000555">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string VETERANEN_40_PLUS to Category enum" time="0.0000575">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string VETERANEN_45_PLUS to Category enum" time="0.000055084">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert valid string VETERANEN_50_PLUS to Category enum" time="0.000060542">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert lowercase string jo8 to Category enum" time="0.000081125">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert mixed case string Jo9 to Category enum" time="0.000105333">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should convert lowercase string veteranen_35_plus to Category enum" time="0.0000835">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should return undefined for invalid string INVALID_CATEGORY" time="0.000079834">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should return undefined for invalid string random_string" time="0.000068791">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should return undefined for invalid string 123" time="0.000087917">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should return undefined for empty string" time="0.000077333">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should return undefined for null input" time="0.000069208">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; stringToCategory &gt; should return undefined for undefined input" time="0.000061917">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string JO8" time="0.000103208">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string JO9" time="0.000057375">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string JO10" time="0.000057834">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string JO11" time="0.000074833">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string JO12" time="0.000053167">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string JO13" time="0.000062084">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string JO14" time="0.000056375">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string JO15" time="0.000060666">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string JO16" time="0.000055292">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string JO17" time="0.002598375">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string JO19" time="0.000116458">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string MO8" time="0.00005525">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string MO9" time="0.000066417">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string MO10" time="0.000049959">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string MO11" time="0.00004775">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string MO12" time="0.000048542">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string MO13" time="0.000047042">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string MO14" time="0.000050458">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string MO15" time="0.000047708">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string MO16" time="0.000048334">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string MO17" time="0.000047667">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string MO19" time="0.0000475">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string VETERANEN_35_PLUS" time="0.000049583">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string VETERANEN_40_PLUS" time="0.000048542">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string VETERANEN_45_PLUS" time="0.000066125">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string VETERANEN_50_PLUS" time="0.000050084">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string jo8 in any case" time="0.000077416">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string Mo9 in any case" time="0.000057959">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return true for valid category string veteranen_40_plus in any case" time="0.000058667">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return false for invalid string INVALID_CATEGORY" time="0.000055209">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return false for invalid string random_string" time="0.000056916">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return false for invalid string 123" time="0.000055542">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return false for empty string" time="0.000063291">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return false for null input" time="0.000058208">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; isValidCategory &gt; should return false for undefined input" time="0.000056583">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; sortTeams &gt; club name sorting &gt; should sort teams primarily by club name alphabetically" time="0.007014875">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; sortTeams &gt; category sorting with numeric awareness &gt; should sort JO categories numerically (JO8 before JO10 before JO12)" time="0.000539166">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; sortTeams &gt; category sorting with numeric awareness &gt; should sort different category prefixes alphabetically (JO before MO)" time="0.000138084">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; sortTeams &gt; category sorting with numeric awareness &gt; should handle teams without categories by placing them last" time="0.000128583">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; sortTeams &gt; team name sorting &gt; should sort by team name when club and category are the same" time="0.000086958">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; sortTeams &gt; complex category formats &gt; should handle complex category names with suffixes" time="0.00009425">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; sortTeams &gt; complex category formats &gt; should handle non-numeric categories alphabetically" time="0.000082625">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; sortTeams &gt; full integration sorting &gt; should apply all sorting rules correctly in order" time="0.000325083">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; sortTeams &gt; edge cases &gt; should handle empty array" time="0.000197625">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; sortTeams &gt; edge cases &gt; should handle single team" time="0.00009175">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; sortTeams &gt; edge cases &gt; should handle teams with empty string values" time="0.00025925">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getFieldStatus &gt; when field is disabled &gt; should return neutral regardless of other conditions" time="0.000137584">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getFieldStatus &gt; when field is required &gt; should return success when has value and no error" time="0.000076542">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getFieldStatus &gt; when field is required &gt; should return error when has error" time="0.000078292">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getFieldStatus &gt; when field is required &gt; should return neutral when no value and no error" time="0.000075167">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getFieldStatus &gt; when field is optional &gt; should return success when has value and no error" time="0.000074208">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getFieldStatus &gt; when field is optional &gt; should return neutral when no value (never error for optional)" time="0.000077125">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getFieldStatus &gt; when field is optional &gt; should return error when has error (even for optional fields)" time="0.000084541">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getFieldStatus &gt; value type handling &gt; should handle string values correctly" time="0.000085333">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getFieldStatus &gt; value type handling &gt; should handle array values correctly" time="0.00022425">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getFieldStatus &gt; value type handling &gt; should handle boolean values correctly" time="0.000081458">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getFieldStatus &gt; real-world scenarios &gt; should handle tournament name field correctly" time="0.000088">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getFieldStatus &gt; real-world scenarios &gt; should handle start date field correctly" time="0.000073458">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getFieldStatus &gt; real-world scenarios &gt; should handle end date field correctly (optional)" time="0.000068834">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getFieldStatus &gt; real-world scenarios &gt; should handle toggle chip arrays correctly" time="0.000075459">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getFieldStatus &gt; real-world scenarios &gt; should handle checkbox agreement correctly" time="0.000086375">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getFieldStatus &gt; edge cases &gt; should handle undefined as disabled parameter" time="0.000066584">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getFieldStatus &gt; edge cases &gt; should prioritize disabled state over all other conditions" time="0.000065833">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.helpers.test.ts" name="lib.helpers &gt; getFieldStatus &gt; edge cases &gt; should handle complex validation states" time="0.000066667">
        </testcase>
    </testsuite>
    <testsuite name="app/lib/__tests__/lib.zod.test.ts" timestamp="2025-08-11T17:20:20.403Z" hostname="Mac.HOME" tests="27" failures="0" errors="0" skipped="0" time="0.011152958">
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; getTeamValidationSchema &gt; create mode &gt; should return schema with privacy agreement for create mode" time="0.001790459">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; getTeamValidationSchema &gt; create mode &gt; should require privacy agreement in create mode" time="0.001061458">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; getTeamValidationSchema &gt; create mode &gt; should validate all required fields in create mode" time="0.001111708">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; getTeamValidationSchema &gt; edit mode &gt; should return schema without privacy agreement for edit mode" time="0.000523125">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; getTeamValidationSchema &gt; edit mode &gt; should not require privacy agreement in edit mode" time="0.001125708">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; getTeamValidationSchema &gt; edit mode &gt; should validate all required fields except privacy agreement in edit mode" time="0.00067925">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; getTeamValidationSchema &gt; field validation &gt; should validate tournamentId field" time="0.0004505">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; getTeamValidationSchema &gt; field validation &gt; should validate clubName field" time="0.00043175">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; getTeamValidationSchema &gt; field validation &gt; should validate name field" time="0.000451">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; getTeamValidationSchema &gt; field validation &gt; should validate email field" time="0.000387875">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; getTeamValidationSchema &gt; field validation &gt; should validate phone field" time="0.000423792">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; extractTeamDataFromFormData &gt; should extract all team data from FormData" time="0.00043125">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; extractTeamDataFromFormData &gt; should handle missing form data fields" time="0.00008175">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; extractTeamDataFromFormData &gt; should handle privacyAgreement checkbox states" time="0.000070209">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; extractTeamDataFromFormData &gt; should handle empty FormData" time="0.000078917">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; validateTeamData &gt; create mode &gt; should validate successfully with valid data" time="0.000164209">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; validateTeamData &gt; create mode &gt; should require privacyAgreement in create mode" time="0.000109667">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; validateTeamData &gt; create mode &gt; should validate all required fields" time="0.000216">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; validateTeamData &gt; create mode &gt; should validate string length limits" time="0.0000905">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; validateTeamData &gt; create mode &gt; should validate email format" time="0.000081625">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; validateTeamData &gt; create mode &gt; should validate phone format" time="0.000068458">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; validateTeamData &gt; edit mode &gt; should validate successfully with valid data (without privacy agreement)" time="0.000096084">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; validateTeamData &gt; edit mode &gt; should not require privacyAgreement in edit mode" time="0.00005825">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; validateTeamData &gt; edit mode &gt; should validate all required fields except privacy agreement" time="0.000193125">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; validateTeamData &gt; edge cases &gt; should handle null/undefined values" time="0.000093959">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; validateTeamData &gt; edge cases &gt; should handle non-string values" time="0.000100167">
        </testcase>
        <testcase classname="app/lib/__tests__/lib.zod.test.ts" name="lib.zod &gt; type exports &gt; should have correct TypeScript types" time="0.000073708">
        </testcase>
    </testsuite>
    <testsuite name="app/models/__tests__/team.server.test.ts" timestamp="2025-08-11T17:20:20.404Z" hostname="Mac.HOME" tests="4" failures="0" errors="0" skipped="0" time="0.002931584">
        <testcase classname="app/models/__tests__/team.server.test.ts" name="team.server - getTeamLeader &gt; should return team leader when found" time="0.001472209">
        </testcase>
        <testcase classname="app/models/__tests__/team.server.test.ts" name="team.server - getTeamLeader &gt; should return null when team leader not found" time="0.000246458">
        </testcase>
        <testcase classname="app/models/__tests__/team.server.test.ts" name="team.server - getTeamLeader &gt; should handle database errors" time="0.000582583">
        </testcase>
        <testcase classname="app/models/__tests__/team.server.test.ts" name="team.server - getTeamLeader &gt; should only select required fields" time="0.000137292">
        </testcase>
    </testsuite>
    <testsuite name="app/components/__tests__/AppBar.test.tsx" timestamp="2025-08-11T17:20:20.405Z" hostname="Mac.HOME" tests="19" failures="0" errors="0" skipped="0" time="0.122467292">
        <testcase classname="app/components/__tests__/AppBar.test.tsx" name="AppBar Context Menu &gt; Public User (Not Authenticated) &gt; should show correct menu items for public user" time="0.019466959">
        </testcase>
        <testcase classname="app/components/__tests__/AppBar.test.tsx" name="AppBar Context Menu &gt; Public User (Not Authenticated) &gt; should show divider after Teams" time="0.007530459">
        </testcase>
        <testcase classname="app/components/__tests__/AppBar.test.tsx" name="AppBar Context Menu &gt; Public User (Not Authenticated) &gt; should have Teams link pointing to public teams route" time="0.005665125">
        </testcase>
        <testcase classname="app/components/__tests__/AppBar.test.tsx" name="AppBar Context Menu &gt; Regular Authenticated User &gt; should show correct menu items for authenticated user" time="0.012156667">
        </testcase>
        <testcase classname="app/components/__tests__/AppBar.test.tsx" name="AppBar Context Menu &gt; Regular Authenticated User &gt; should show authentication status as true" time="0.003560333">
        </testcase>
        <testcase classname="app/components/__tests__/AppBar.test.tsx" name="AppBar Context Menu &gt; Regular Authenticated User &gt; should have Teams link pointing to public teams route" time="0.004456958">
        </testcase>
        <testcase classname="app/components/__tests__/AppBar.test.tsx" name="AppBar Context Menu &gt; Admin User &gt; should show correct menu items for admin user" time="0.003667125">
        </testcase>
        <testcase classname="app/components/__tests__/AppBar.test.tsx" name="AppBar Context Menu &gt; Admin User &gt; should have Teams link pointing to admin teams route" time="0.003466625">
        </testcase>
        <testcase classname="app/components/__tests__/AppBar.test.tsx" name="AppBar Context Menu &gt; Admin User &gt; should show Admin Panel with correct properties" time="0.01024875">
        </testcase>
        <testcase classname="app/components/__tests__/AppBar.test.tsx" name="AppBar Context Menu &gt; Admin User &gt; should position Admin Panel after Teams and divider" time="0.0062395">
        </testcase>
        <testcase classname="app/components/__tests__/AppBar.test.tsx" name="AppBar Context Menu &gt; Menu Item Authentication Requirements &gt; should filter out authenticated items for non-authenticated users" time="0.002855542">
        </testcase>
        <testcase classname="app/components/__tests__/AppBar.test.tsx" name="AppBar Context Menu &gt; Menu Item Authentication Requirements &gt; should show authenticated items for authenticated users" time="0.003250417">
        </testcase>
        <testcase classname="app/components/__tests__/AppBar.test.tsx" name="AppBar Context Menu &gt; Role-Specific Behavior &gt; should hide Admin Panel for non-admin roles" time="0.002907208">
        </testcase>
        <testcase classname="app/components/__tests__/AppBar.test.tsx" name="AppBar Context Menu &gt; Role-Specific Behavior &gt; should show Admin Panel for ADMIN, MANAGER, and REFEREE roles" time="0.0029685">
        </testcase>
        <testcase classname="app/components/__tests__/AppBar.test.tsx" name="AppBar Context Menu &gt; Role-Specific Behavior &gt; should route Teams link correctly based on user role" time="0.010456">
        </testcase>
        <testcase classname="app/components/__tests__/AppBar.test.tsx" name="AppBar Context Menu &gt; Menu Structure Consistency &gt; should show correct first menu item based on user role" time="0.011125167">
        </testcase>
        <testcase classname="app/components/__tests__/AppBar.test.tsx" name="AppBar Context Menu &gt; Menu Structure Consistency &gt; should always show About before the last items (language and auth)" time="0.003198333">
        </testcase>
        <testcase classname="app/components/__tests__/AppBar.test.tsx" name="AppBar Context Menu &gt; Unified Menu &gt; should render a single unified UserMenu instance" time="0.003126459">
        </testcase>
        <testcase classname="app/components/__tests__/AppBar.test.tsx" name="AppBar Context Menu &gt; Unified Menu &gt; should work correctly for both authenticated and unauthenticated users" time="0.005103166">
        </testcase>
    </testsuite>
    <testsuite name="app/components/__tests__/AuthErrorBoundary.test.tsx" timestamp="2025-08-11T17:20:20.406Z" hostname="Mac.HOME" tests="6" failures="0" errors="0" skipped="0" time="0.050445375">
        <testcase classname="app/components/__tests__/AuthErrorBoundary.test.tsx" name="AuthErrorBoundary &gt; should render 404 route error correctly" time="0.022855542">
            <system-err>
[Route Error Caught]: 404 Not Found

            </system-err>
        </testcase>
        <testcase classname="app/components/__tests__/AuthErrorBoundary.test.tsx" name="AuthErrorBoundary &gt; should render 401 route error correctly" time="0.009647166">
            <system-err>
[Route Error Caught]: 401 Unauthorized

            </system-err>
        </testcase>
        <testcase classname="app/components/__tests__/AuthErrorBoundary.test.tsx" name="AuthErrorBoundary &gt; should render 403 route error correctly" time="0.001198958">
            <system-err>
[Route Error Caught]: 403 Forbidden

            </system-err>
        </testcase>
        <testcase classname="app/components/__tests__/AuthErrorBoundary.test.tsx" name="AuthErrorBoundary &gt; should render other route errors with default message" time="0.001077625">
            <system-err>
[Route Error Caught]: 500 Server Error

            </system-err>
        </testcase>
        <testcase classname="app/components/__tests__/AuthErrorBoundary.test.tsx" name="AuthErrorBoundary &gt; should render JavaScript error correctly" time="0.005853167">
            <system-err>
[Test Error Caught]: Test JavaScript error

            </system-err>
        </testcase>
        <testcase classname="app/components/__tests__/AuthErrorBoundary.test.tsx" name="AuthErrorBoundary &gt; should render unknown error correctly" time="0.000994333">
            <system-err>
[Console Error]: String error that is not an Error object

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="app/components/__tests__/ErrorMessage.test.tsx" timestamp="2025-08-11T17:20:20.406Z" hostname="Mac.HOME" tests="11" failures="0" errors="0" skipped="0" time="0.0346945">
        <testcase classname="app/components/__tests__/ErrorMessage.test.tsx" name="ErrorMessage &gt; should render error message with default styling" time="0.015686">
        </testcase>
        <testcase classname="app/components/__tests__/ErrorMessage.test.tsx" name="ErrorMessage &gt; should adapt styling for red panel color" time="0.001719166">
        </testcase>
        <testcase classname="app/components/__tests__/ErrorMessage.test.tsx" name="ErrorMessage &gt; should adapt styling for amber panel color" time="0.001020375">
        </testcase>
        <testcase classname="app/components/__tests__/ErrorMessage.test.tsx" name="ErrorMessage &gt; should adapt styling for indigo panel color" time="0.000804">
        </testcase>
        <testcase classname="app/components/__tests__/ErrorMessage.test.tsx" name="ErrorMessage &gt; should adapt styling for fuchsia panel color" time="0.004852917">
        </testcase>
        <testcase classname="app/components/__tests__/ErrorMessage.test.tsx" name="ErrorMessage &gt; should support different variants" time="0.00087125">
        </testcase>
        <testcase classname="app/components/__tests__/ErrorMessage.test.tsx" name="ErrorMessage &gt; should support inline variant" time="0.000649834">
        </testcase>
        <testcase classname="app/components/__tests__/ErrorMessage.test.tsx" name="ErrorMessage &gt; should include error icon" time="0.004759667">
        </testcase>
        <testcase classname="app/components/__tests__/ErrorMessage.test.tsx" name="ErrorMessage &gt; should have proper accessibility attributes" time="0.001849">
        </testcase>
        <testcase classname="app/components/__tests__/ErrorMessage.test.tsx" name="ErrorMessage &gt; should support custom className" time="0.00088325">
        </testcase>
        <testcase classname="app/components/__tests__/ErrorMessage.test.tsx" name="ErrorMessage &gt; should support custom id" time="0.000715583">
        </testcase>
    </testsuite>
    <testsuite name="app/components/__tests__/GeneralErrorBoundary.test.tsx" timestamp="2025-08-11T17:20:20.407Z" hostname="Mac.HOME" tests="5" failures="0" errors="0" skipped="0" time="0.019953208">
        <testcase classname="app/components/__tests__/GeneralErrorBoundary.test.tsx" name="GeneralErrorBoundary &gt; should render route error with default status handler for 404" time="0.013246042">
            <system-err>
[Route Error Caught]: 404 Not Found

            </system-err>
        </testcase>
        <testcase classname="app/components/__tests__/GeneralErrorBoundary.test.tsx" name="GeneralErrorBoundary &gt; should render route error with default status handler for other status" time="0.001753042">
            <system-err>
[Route Error Caught]: 500 Server Error - Internal Server Error

            </system-err>
        </testcase>
        <testcase classname="app/components/__tests__/GeneralErrorBoundary.test.tsx" name="GeneralErrorBoundary &gt; should render with custom status handler when provided" time="0.00142125">
            <system-err>
[Route Error Caught]: 403 Forbidden

            </system-err>
        </testcase>
        <testcase classname="app/components/__tests__/GeneralErrorBoundary.test.tsx" name="GeneralErrorBoundary &gt; should render with unexpected error handler for non-route errors" time="0.001182833">
            <system-err>
[Test Error Caught]: Test error

            </system-err>
        </testcase>
        <testcase classname="app/components/__tests__/GeneralErrorBoundary.test.tsx" name="GeneralErrorBoundary &gt; should render with custom unexpected error handler when provided" time="0.001660708">
            <system-err>
[Test Error Caught]: Custom error

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="app/components/__tests__/MobileBreakpointDetection.test.tsx" timestamp="2025-08-11T17:20:20.407Z" hostname="Mac.HOME" tests="25" failures="0" errors="0" skipped="0" time="0.020781417">
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Mobile device viewports (&lt; 768px) &gt; should detect iPhone SE (375px) as mobile with bottom nav" time="0.008481125">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Mobile device viewports (&lt; 768px) &gt; should detect iPhone 12/13/14 (390px) as mobile with bottom nav" time="0.000963375">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Mobile device viewports (&lt; 768px) &gt; should detect iPhone 12/13/14 Pro Max (428px) as mobile with bottom nav" time="0.000665834">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Mobile device viewports (&lt; 768px) &gt; should detect Samsung Galaxy S21 (360px) as mobile with bottom nav" time="0.000613417">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Mobile device viewports (&lt; 768px) &gt; should detect Pixel 5 (393px) as mobile with bottom nav" time="0.000622292">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Mobile device viewports (&lt; 768px) &gt; should handle edge case at mobile breakpoint (767px)" time="0.0008975">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Tablet device viewports (768px - 1023px) &gt; should detect iPad Mini (768px) as mobile without bottom nav" time="0.003244833">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Tablet device viewports (768px - 1023px) &gt; should detect iPad Air (820px) as mobile without bottom nav" time="0.000429875">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Tablet device viewports (768px - 1023px) &gt; should detect iPad Pro 11&quot; (834px) as mobile without bottom nav" time="0.000401625">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Tablet device viewports (768px - 1023px) &gt; should detect Surface Pro 7 (912px) as mobile without bottom nav" time="0.000391083">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Tablet device viewports (768px - 1023px) &gt; should detect iPad Pro 12.9&quot; (1024px) as mobile without bottom nav" time="0.000309708">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Tablet device viewports (768px - 1023px) &gt; should handle edge case just above mobile breakpoint (768px)" time="0.000285333">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Desktop device viewports (&gt;= 1024px) &gt; should detect Small Laptop (1024px) as desktop without bottom nav" time="0.000274042">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Desktop device viewports (&gt;= 1024px) &gt; should detect Medium Laptop (1366px) as desktop without bottom nav" time="0.000238125">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Desktop device viewports (&gt;= 1024px) &gt; should detect Large Laptop (1440px) as desktop without bottom nav" time="0.000233292">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Desktop device viewports (&gt;= 1024px) &gt; should detect Desktop HD (1920px) as desktop without bottom nav" time="0.000233125">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Desktop device viewports (&gt;= 1024px) &gt; should detect Desktop 4K (3840px) as desktop without bottom nav" time="0.000251584">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Desktop device viewports (&gt;= 1024px) &gt; should handle edge case at desktop breakpoint (1024px)" time="0.000294084">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Media query consistency &gt; should have CSS media queries that match JavaScript breakpoint logic" time="0.000143708">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Media query consistency &gt; should have consistent breakpoint values between constants and functions" time="0.000076667">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; SSR compatibility &gt; should handle undefined window gracefully" time="0.000068042">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Dynamic viewport changes &gt; should adapt to viewport changes during runtime" time="0.000099208">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Extreme viewport sizes &gt; should handle very small viewports" time="0.000304">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Extreme viewport sizes &gt; should handle very large viewports" time="0.000280916">
        </testcase>
        <testcase classname="app/components/__tests__/MobileBreakpointDetection.test.tsx" name="Mobile Breakpoint Detection Accuracy &gt; Extreme viewport sizes &gt; should handle zero or negative viewport widths" time="0.000081708">
        </testcase>
    </testsuite>
    <testsuite name="app/components/__tests__/PrefetchLink.test.tsx" timestamp="2025-08-11T17:20:20.409Z" hostname="Mac.HOME" tests="22" failures="0" errors="0" skipped="0" time="0.048959">
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="PrefetchLink &gt; renders basic link with default prefetch context" time="0.015216291">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="PrefetchLink &gt; uses custom prefetch context" time="0.001565708">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="PrefetchLink &gt; uses override prefetch strategy" time="0.001064333">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="PrefetchLink &gt; handles object-based to prop" time="0.000921042">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="PrefetchLink &gt; handles object-based to prop without pathname" time="0.000852416">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="PrefetchLink &gt; disables adaptive prefetching when adaptive=false" time="0.000699833">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="PrefetchLink &gt; applies adaptive prefetching for slow connections" time="0.000619667">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="PrefetchLink &gt; applies adaptive prefetching for 2g connections" time="0.000601166">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="PrefetchLink &gt; applies adaptive prefetching for data saver mode" time="0.000727">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="PrefetchLink &gt; applies adaptive prefetching for mobile devices" time="0.000748667">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="PrefetchNavLink &gt; renders NavLink with default primary navigation context" time="0.003146667">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="PrefetchNavLink &gt; uses custom prefetch context" time="0.000689583">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="PrefetchNavLink &gt; handles object-based to prop" time="0.000552625">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="PrefetchNavLink &gt; applies adaptive prefetching" time="0.0004945">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="Specialized Link Components &gt; PrimaryNavLink uses primaryNavigation context" time="0.000476834">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="Specialized Link Components &gt; ActionLink uses actionButtons context" time="0.000514584">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="Specialized Link Components &gt; ListItemLink uses listItems context" time="0.005211375">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="Specialized Link Components &gt; ErrorRecoveryLink uses errorPageLinks context" time="0.000784625">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="Specialized Link Components &gt; ListItemNavLink uses listItems context with NavLink" time="0.006564958">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="Specialized Link Components &gt; specialized components accept additional props" time="0.0038445">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="Defensive programming and edge cases &gt; component renders successfully with minimal props" time="0.002044208">
        </testcase>
        <testcase classname="app/components/__tests__/PrefetchLink.test.tsx" name="Defensive programming and edge cases &gt; handles adaptive prefetching when navigator.connection is unavailable" time="0.000782667">
        </testcase>
    </testsuite>
    <testsuite name="app/components/__tests__/TeamForm.test.tsx" timestamp="2025-08-11T17:20:20.410Z" hostname="Mac.HOME" tests="43" failures="0" errors="0" skipped="0" time="5.941714208">
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Panel 1 Validation Logic &gt; should not show panel-level error messages since they are removed" time="0.053639">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Panel 1 Validation Logic &gt; should maintain validation logic internally without displaying panel errors" time="0.073670625">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Panel 1 Validation Logic &gt; should keep panel validation working internally for form submission" time="0.050880125">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Touch-based Error Display &gt; should not show error messages initially" time="0.025238292">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Touch-based Error Display &gt; should not show error messages on focus" time="0.04071775">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Touch-based Error Display &gt; when panel 1 is completed &gt; should show error message when required field is blurred empty" time="0.100525375">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Touch-based Error Display &gt; when panel 1 is completed &gt; should not show error message when valid content is entered" time="0.17884075">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Touch-based Error Display &gt; when panel 1 is completed &gt; should show error message when email field is blurred with invalid email" time="0.310197667">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Touch-based Error Display &gt; when panel 1 is completed &gt; should show error message when club name exceeds length" time="0.75472175">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Touch-based Error Display &gt; when panel 1 is completed &gt; should clear error when valid input is provided after blur error" time="0.159334584">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Touch-based Error Display &gt; when panel 1 is completed &gt; should show error when phone field is blurred with invalid phone number" time="0.243681583">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Touch-based Error Display &gt; when panel 1 is completed &gt; should show error when name exceeds length limit and field is blurred" time="0.37689725">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Touch-based Error Display &gt; when panel 1 is completed &gt; should show multiple field errors when multiple fields are blurred with invalid data" time="0.313764833">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Server-side Errors &gt; should hide server-side errors for disabled fields" time="0.009248625">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Server-side Errors &gt; should show server-side errors when fields become enabled and are interacted with" time="0.089426625">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Form Submission Errors &gt; should disable save button when form is invalid and enable when all fields are valid" time="0.640681792">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Form Submission Errors &gt; should show validation errors when fields are blurred with invalid data" time="0.408601875">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Form Submission Errors &gt; should disable save button when form is invalid for admin form" time="0.014135375">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Form Submission Errors &gt; should disable save button when form is invalid for edit form" time="0.012639958">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Privacy Agreement Field &gt; should show privacy agreement checkbox in create mode" time="0.023762792">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Privacy Agreement Field &gt; should hide privacy agreement checkbox in edit mode" time="0.022336167">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Privacy Agreement Field &gt; should keep save button disabled until all required fields including privacy agreement are filled" time="0.484067417">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Admin Form Variant &gt; should not show privacy agreement checkbox in edit mode" time="0.012662084">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Division Selection &gt; should update divisions when tournament changes" time="0.099934458">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Form Submission Success &gt; should not display success panels since they are removed" time="0.009041667">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Component - filling the form &gt; Form Pre-population &gt; should pre-populate form fields with provided data" time="0.010017875">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Category Field &gt; renders category ComboField with correct options from tournament" time="0.047710708">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Category Field &gt; sets initial value from formData" time="0.018877375">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Category Field &gt; updates value on change" time="0.08457425">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Category Field &gt; shows required error if blurred empty" time="0.057921833">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Category Field &gt; shows correct placeholder" time="0.022622916">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Cancel Button Functionality &gt; Cancel Button Visibility &gt; should always show cancel button" time="0.014871708">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Cancel Button Functionality &gt; Cancel Button Visibility &gt; should show cancel button with correct text" time="0.0100005">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Cancel Button Functionality &gt; New Team Creation - Cancel to Empty State &gt; should reset form state when cancel button is clicked in create mode" time="0.364513084">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Cancel Button Functionality &gt; New Team Creation - Cancel to Empty State &gt; should clear validation errors when cancel button is clicked in create mode" time="0.058688">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Cancel Button Functionality &gt; Team Edit Mode - Cancel Functionality &gt; should reset form when reset button is clicked in edit mode" time="0.170798417">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Cancel Button Functionality &gt; Team Edit Mode - Cancel Functionality &gt; should clear validation errors when cancel button is clicked in edit mode" time="0.044656167">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Cancel Button Functionality &gt; Team Edit Mode - Cancel Functionality &gt; should reset form state when reset button is clicked with form modifications" time="0.26873125">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Cancel Button Functionality &gt; Cancel Button Behavior Across Modes &gt; should reset form when reset button is clicked" time="0.017949708">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Cancel Button Functionality &gt; Cancel Button Behavior Across Modes &gt; should not interfere with form submission" time="0.205455792">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Cancel Button Functionality &gt; Memory Leak Prevention &gt; should not throw errors during form submission" time="0.013966583">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Cancel Button Functionality &gt; Memory Leak Prevention &gt; should handle form submission without timing out" time="0.0105975">
        </testcase>
        <testcase classname="app/components/__tests__/TeamForm.test.tsx" name="TeamForm Cancel Button Functionality &gt; Memory Leak Prevention &gt; should handle component unmount gracefully" time="0.009737375">
        </testcase>
    </testsuite>
    <testsuite name="app/components/__tests__/TournamentFilter.test.tsx" timestamp="2025-08-11T17:20:20.413Z" hostname="Mac.HOME" tests="11" failures="0" errors="0" skipped="0" time="0.156072167">
        <testcase classname="app/components/__tests__/TournamentFilter.test.tsx" name="TournamentFilter &gt; should render tournament filter with all options" time="0.025412584">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentFilter.test.tsx" name="TournamentFilter &gt; should show &quot;All tournaments&quot; as default selection when no tournament is selected" time="0.007042584">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentFilter.test.tsx" name="TournamentFilter &gt; should show selected tournament when tournament is pre-selected" time="0.007302375">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentFilter.test.tsx" name="TournamentFilter &gt; should call onChange when tournament selection changes" time="0.063385625">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentFilter.test.tsx" name="TournamentFilter &gt; should handle empty tournament list items array" time="0.00607325">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentFilter.test.tsx" name="TournamentFilter &gt; should apply custom className" time="0.005307917">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentFilter.test.tsx" name="TournamentFilter &gt; should apply default className when no className prop is provided" time="0.0049015">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentFilter.test.tsx" name="TournamentFilter &gt; should pass correct props to useTournamentFilter hook" time="0.008280792">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentFilter.test.tsx" name="TournamentFilter &gt; integration with ComboField &gt; should pass correct props to ComboField" time="0.0054835">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentFilter.test.tsx" name="TournamentFilter &gt; accessibility &gt; should have proper labeling" time="0.005684958">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentFilter.test.tsx" name="TournamentFilter &gt; accessibility &gt; should be keyboard navigable" time="0.016141041">
        </testcase>
    </testsuite>
    <testsuite name="app/components/__tests__/TournamentForm.test.tsx" timestamp="2025-08-11T17:20:20.413Z" hostname="Mac.HOME" tests="37" failures="0" errors="0" skipped="0" time="0.645149709">
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Basic Rendering &gt; should render form with all basic elements" time="0.03321275">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Basic Rendering &gt; should render all form fields correctly" time="0.009369417">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Basic Rendering &gt; should render step numbers correctly" time="0.008038041">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Variant Handling &gt; should show success message for public variant when isSuccess is true" time="0.009779208">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Variant Handling &gt; should not show success message for admin variant" time="0.006906458">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Form Data Pre-population &gt; should pre-populate form fields with provided data" time="0.020922792">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Division Selection &gt; should render all available divisions" time="0.010980667">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Division Selection &gt; should handle division selection" time="0.04537225">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Division Selection &gt; should show selected count for divisions" time="0.01069925">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Division Selection &gt; should pre-select divisions from form data" time="0.0087745">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Division Selection &gt; should display division errors" time="0.017521209">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Category Selection &gt; should render all available categories" time="0.031851125">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Category Selection &gt; should handle category selection" time="0.022145916">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Category Selection &gt; should show selected count for categories" time="0.006562292">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Category Selection &gt; should pre-select categories from form data" time="0.005825041">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Category Selection &gt; should display category errors" time="0.020501833">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Error Handling &gt; should display field errors correctly" time="0.082920125">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Error Handling &gt; should focus name field when it has an error" time="0.05141075">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Action Buttons &gt; should render submit button with default text" time="0.009182">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Action Buttons &gt; should render submit button with custom text" time="0.008179084">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Action Buttons &gt; should always render reset button" time="0.013467291">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Action Buttons &gt; should reset form when reset button is clicked" time="0.020895333">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Hidden Form Fields &gt; should include intent hidden field when provided" time="0.006421125">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Hidden Form Fields &gt; should include hidden division fields for selected divisions" time="0.005916209">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Hidden Form Fields &gt; should include hidden category fields for selected categories" time="0.006020208">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Form Submission &gt; should submit form with POST method" time="0.032586916">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Form Submission &gt; should update hidden fields when selections change" time="0.020728583">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Responsive Design &gt; should have proper responsive grid classes" time="0.010334792">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Responsive Design &gt; should apply mobile-first responsive classes" time="0.01250925">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Accessibility &gt; should have proper form labels" time="0.016392292">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Accessibility &gt; should have proper heading structure" time="0.009896583">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Accessibility &gt; should have accessible checkbox labels" time="0.004277166">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Custom Styling &gt; should apply custom className to container" time="0.005297959">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; Custom Styling &gt; should have step-specific color themes" time="0.004858125">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; State Management &gt; should update selected divisions state when toggling" time="0.020137666">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; State Management &gt; should update selected categories state when toggling" time="0.018821791">
        </testcase>
        <testcase classname="app/components/__tests__/TournamentForm.test.tsx" name="TournamentForm Component &gt; State Management &gt; should allow deselecting divisions" time="0.015247125">
        </testcase>
    </testsuite>
    <testsuite name="app/stores/__tests__/useAuthStore.test.ts" timestamp="2025-08-11T17:20:20.415Z" hostname="Mac.HOME" tests="5" failures="0" errors="0" skipped="0" time="0.001809291">
        <testcase classname="app/stores/__tests__/useAuthStore.test.ts" name="useAuthStore &gt; should initialize with default values" time="0.0007595">
        </testcase>
        <testcase classname="app/stores/__tests__/useAuthStore.test.ts" name="useAuthStore &gt; should set authentication state" time="0.000131292">
        </testcase>
        <testcase classname="app/stores/__tests__/useAuthStore.test.ts" name="useAuthStore &gt; should unset authentication state" time="0.000110625">
        </testcase>
        <testcase classname="app/stores/__tests__/useAuthStore.test.ts" name="useAuthStore &gt; should persist state to sessionStorage" time="0.000215625">
        </testcase>
        <testcase classname="app/stores/__tests__/useAuthStore.test.ts" name="useAuthStore &gt; should handle multiple auth state changes" time="0.000118375">
        </testcase>
    </testsuite>
    <testsuite name="app/stores/__tests__/useSettingsStore.test.ts" timestamp="2025-08-11T17:20:20.416Z" hostname="Mac.HOME" tests="12" failures="0" errors="0" skipped="0" time="0.003060458">
        <testcase classname="app/stores/__tests__/useSettingsStore.test.ts" name="useSettingsStore &gt; should initialize with default values" time="0.000807542">
        </testcase>
        <testcase classname="app/stores/__tests__/useSettingsStore.test.ts" name="useSettingsStore &gt; should set theme" time="0.000135417">
        </testcase>
        <testcase classname="app/stores/__tests__/useSettingsStore.test.ts" name="useSettingsStore &gt; should toggle theme from light to dark" time="0.000214041">
        </testcase>
        <testcase classname="app/stores/__tests__/useSettingsStore.test.ts" name="useSettingsStore &gt; should toggle theme from dark to light" time="0.000102625">
        </testcase>
        <testcase classname="app/stores/__tests__/useSettingsStore.test.ts" name="useSettingsStore &gt; should set language" time="0.000079625">
        </testcase>
        <testcase classname="app/stores/__tests__/useSettingsStore.test.ts" name="useSettingsStore &gt; should set all supported languages" time="0.000130166">
        </testcase>
        <testcase classname="app/stores/__tests__/useSettingsStore.test.ts" name="useSettingsStore &gt; should persist theme to localStorage" time="0.000188292">
        </testcase>
        <testcase classname="app/stores/__tests__/useSettingsStore.test.ts" name="useSettingsStore &gt; should persist language to localStorage" time="0.00007875">
        </testcase>
        <testcase classname="app/stores/__tests__/useSettingsStore.test.ts" name="useSettingsStore &gt; should persist both theme and language changes" time="0.0001145">
        </testcase>
        <testcase classname="app/stores/__tests__/useSettingsStore.test.ts" name="useSettingsStore &gt; should reset store state to initial values" time="0.000272125">
        </testcase>
        <testcase classname="app/stores/__tests__/useSettingsStore.test.ts" name="useSettingsStore &gt; should handle multiple theme changes" time="0.000175875">
        </testcase>
        <testcase classname="app/stores/__tests__/useSettingsStore.test.ts" name="useSettingsStore &gt; should handle multiple language changes" time="0.000137583">
        </testcase>
    </testsuite>
    <testsuite name="app/stores/__tests__/useTeamFormStore.test.ts" timestamp="2025-08-11T17:20:20.416Z" hostname="Mac.HOME" tests="37" failures="0" errors="0" skipped="0" time="0.009394875">
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Initial State &gt; should initialize with default form field values" time="0.001099">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Initial State &gt; should initialize with default validation state" time="0.000392167">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Initial State &gt; should initialize with default form metadata" time="0.000140666">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Form Field Management &gt; should set individual form fields" time="0.000254625">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Form Field Management &gt; should set bulk form data" time="0.000151958">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Form Field Management &gt; should reset form to initial state" time="0.000175125">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Field Value Helper &gt; should get current field values correctly" time="0.0001565">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Tournament and Cascade Logic &gt; should set selected tournament and reset dependent fields" time="0.000193791">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Tournament and Cascade Logic &gt; should set selected division and reset category" time="0.00011575">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Tournament and Cascade Logic &gt; should set category without affecting other fields" time="0.000116917">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Tournament and Cascade Logic &gt; should update available options when tournament changes" time="0.00012025">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Reactive Validation System &gt; should validate field immediately when touched" time="0.001161583">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Reactive Validation System &gt; should not show validation errors for untouched fields" time="0.000097417">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Reactive Validation System &gt; should validate field when forceShowAllErrors is true" time="0.0001625">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Reactive Validation System &gt; should validate field when submitAttempted is true" time="0.000117334">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Reactive Validation System &gt; should clear error when field becomes valid" time="0.00017975">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Reactive Validation System &gt; should validate all touched fields" time="0.000383166">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Form Validation as Collection of Field Validations &gt; should validate entire form and show all required field errors" time="0.0002605">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Form Validation as Collection of Field Validations &gt; should validate form as valid when all required fields are filled" time="0.000503083">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Form Validation as Collection of Field Validations &gt; should not require privacy agreement in edit mode" time="0.000350541">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Field Error Management &gt; should set and clear field errors" time="0.000085042">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Field Error Management &gt; should set validation errors in bulk" time="0.000077208">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Field Error Management &gt; should set display errors in bulk" time="0.000067084">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Form Metadata &gt; should set form mode" time="0.000064916">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Form Metadata &gt; should set submitting state" time="0.000065208">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Form Metadata &gt; should set form validity" time="0.000065375">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Form Metadata &gt; should set submit attempted flag" time="0.000062458">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Form Metadata &gt; should set force show all errors flag" time="0.000061917">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Form Data Extraction &gt; should return current form data in TeamFormData format" time="0.000114833">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Persistence &gt; should persist form data to sessionStorage" time="0.000194625">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Complex Reactive Scenarios &gt; should handle reactive validation during form completion flow" time="0.000307042">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Complex Reactive Scenarios &gt; should handle cascade validation with tournament changes" time="0.000231166">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Complex Reactive Scenarios &gt; should handle form submission with mixed touched/untouched fields" time="0.000252458">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Session Storage Management &gt; should clear session storage when clearSessionStorage is called" time="0.000102916">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Session Storage Management &gt; should call clearSessionStorage when resetStoreState is called" time="0.000073958">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Session Storage Management &gt; should call clearSessionStorage when resetForm is called" time="0.000071667">
        </testcase>
        <testcase classname="app/stores/__tests__/useTeamFormStore.test.ts" name="useTeamFormStore &gt; Session Storage Management &gt; should reset store state and clear session storage" time="0.00014025">
        </testcase>
    </testsuite>
    <testsuite name="app/stores/__tests__/useTournamentFormStore.test.ts" timestamp="2025-08-11T17:20:20.419Z" hostname="Mac.HOME" tests="37" failures="0" errors="0" skipped="0" time="0.007764834">
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Initial State &gt; should initialize with default form field values" time="0.001133208">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Initial State &gt; should initialize with default validation state" time="0.000219542">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Initial State &gt; should initialize with default form metadata" time="0.000136209">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Form Field Management &gt; should set individual form fields" time="0.0002695">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Form Field Management &gt; should set bulk form data" time="0.000184416">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Form Field Management &gt; should reset form to initial state" time="0.000128708">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Form Field Management &gt; should clear field error when setting form field" time="0.000122666">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Field Value Helper &gt; should get current field values correctly" time="0.000089958">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Reactive Validation System &gt; should validate field immediately when touched" time="0.000177584">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Reactive Validation System &gt; should not show validation errors for untouched fields" time="0.000120875">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Reactive Validation System &gt; should validate field when forceShowAllErrors is true" time="0.000081166">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Reactive Validation System &gt; should validate field when submitAttempted is true" time="0.00006875">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Reactive Validation System &gt; should clear error when field becomes valid" time="0.000099917">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Form Validation as Collection of Field Validations &gt; should validate entire form and show all required field errors" time="0.00014975">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Form Validation as Collection of Field Validations &gt; should validate form as valid when all required fields are filled" time="0.000404542">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Field Error Management &gt; should set and clear field errors" time="0.000107583">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Field Error Management &gt; should set validation errors in bulk" time="0.000064958">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Field Error Management &gt; should set display errors in bulk" time="0.000054417">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Field Error Management &gt; should clear all errors" time="0.000075291">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Form Metadata &gt; should set form mode" time="0.000057292">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Form Metadata &gt; should set form validity" time="0.000055">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Form Metadata &gt; should set submit attempted flag" time="0.000054958">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Form Metadata &gt; should set force show all errors flag" time="0.000059375">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Server Errors &gt; should set server errors" time="0.000095209">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Server Errors &gt; should merge server errors with existing display errors" time="0.000092042">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Form Data Extraction &gt; should return current form data in TournamentFormData format" time="0.0000895">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Form State Helpers &gt; should detect dirty form" time="0.000081">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Form State Helpers &gt; should not be dirty after setting form data" time="0.000063459">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Panel Validity &gt; should check if panel is valid" time="0.000083625">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Panel Validity &gt; should check if panel is enabled" time="0.000072916">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Panel Validity &gt; should check if form is ready for submission" time="0.000069292">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Persistence &gt; should persist form data to sessionStorage" time="0.000166625">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Persistence &gt; should only persist specific fields" time="0.000229167">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Session Storage Management &gt; should clear session storage when clearSessionStorage is called" time="0.000102417">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Session Storage Management &gt; should call clearSessionStorage when resetStoreState is called" time="0.000067459">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Session Storage Management &gt; should call clearSessionStorage when resetForm is called" time="0.000094125">
        </testcase>
        <testcase classname="app/stores/__tests__/useTournamentFormStore.test.ts" name="useTournamentFormStore &gt; Session Storage Management &gt; should reset store state and clear session storage" time="0.000109875">
        </testcase>
    </testsuite>
    <testsuite name="app/styles/__tests__/button.styles.test.ts" timestamp="2025-08-11T17:20:20.421Z" hostname="Mac.HOME" tests="12" failures="0" errors="0" skipped="0" time="0.006948917">
        <testcase classname="app/styles/__tests__/button.styles.test.ts" name="Button Styles &gt; constants &gt; should have correct default button color" time="0.000726292">
        </testcase>
        <testcase classname="app/styles/__tests__/button.styles.test.ts" name="Button Styles &gt; constants &gt; should include essential common button classes" time="0.000248167">
        </testcase>
        <testcase classname="app/styles/__tests__/button.styles.test.ts" name="Button Styles &gt; getButtonClasses &gt; primary variant &gt; should generate correct classes for brand color" time="0.0005205">
        </testcase>
        <testcase classname="app/styles/__tests__/button.styles.test.ts" name="Button Styles &gt; getButtonClasses &gt; primary variant &gt; should generate correct classes for primary color (emerald)" time="0.00031975">
        </testcase>
        <testcase classname="app/styles/__tests__/button.styles.test.ts" name="Button Styles &gt; getButtonClasses &gt; primary variant &gt; should generate correct classes for standard colors" time="0.002105667">
        </testcase>
        <testcase classname="app/styles/__tests__/button.styles.test.ts" name="Button Styles &gt; getButtonClasses &gt; primary variant &gt; should use default color when no color specified" time="0.000452291">
        </testcase>
        <testcase classname="app/styles/__tests__/button.styles.test.ts" name="Button Styles &gt; getButtonClasses &gt; secondary variant &gt; should generate correct classes for brand color" time="0.000295417">
        </testcase>
        <testcase classname="app/styles/__tests__/button.styles.test.ts" name="Button Styles &gt; getButtonClasses &gt; secondary variant &gt; should generate correct classes for primary color (emerald)" time="0.000199417">
        </testcase>
        <testcase classname="app/styles/__tests__/button.styles.test.ts" name="Button Styles &gt; getButtonClasses &gt; secondary variant &gt; should generate correct classes for standard colors" time="0.000571541">
        </testcase>
        <testcase classname="app/styles/__tests__/button.styles.test.ts" name="Button Styles &gt; getButtonClasses &gt; secondary variant &gt; should use default color when no color specified" time="0.000103833">
        </testcase>
        <testcase classname="app/styles/__tests__/button.styles.test.ts" name="Button Styles &gt; getButtonClasses &gt; common classes inclusion &gt; should include common button classes for all variants" time="0.000557541">
        </testcase>
        <testcase classname="app/styles/__tests__/button.styles.test.ts" name="Button Styles &gt; getButtonClasses &gt; disabled state classes &gt; should include disabled state classes for all button variants" time="0.000174417">
        </testcase>
    </testsuite>
    <testsuite name="app/styles/__tests__/ring.styles.test.ts" timestamp="2025-08-11T17:20:20.422Z" hostname="Mac.HOME" tests="27" failures="0" errors="0" skipped="0" time="0.005844208">
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; getRingClasses &gt; should return only color classes, no base ring classes" time="0.001376167">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; getFocusRingClasses &gt; should return focus-prefixed ring classes" time="0.000363875">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; getHoverRingClasses &gt; should return hover-prefixed ring classes" time="0.000220375">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; getFocusHoverRingClasses &gt; should combine focus and hover ring classes" time="0.000168667">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; getDisabledRingClasses &gt; should return disabled ring classes that override all states" time="0.000119292">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; convenience functions &gt; getButtonRingClasses should return properly prefixed classes" time="0.000203583">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; convenience functions &gt; getTeamChipRingClasses should return properly prefixed classes" time="0.000135958">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; convenience functions &gt; getChipRingClasses should return properly prefixed classes" time="0.000097958">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; rest state verification &gt; should ensure no ring classes are applied at rest state" time="0.000166667">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; RING_CONFIGS &gt; button config &gt; should return standard colors for non-brand colors" time="0.000120583">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; RING_CONFIGS &gt; button config &gt; should return inverted colors for red buttons" time="0.000090959">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; RING_CONFIGS &gt; button config &gt; should return inverted colors for brand buttons" time="0.000071458">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; RING_CONFIGS &gt; button config &gt; should handle all color variants consistently" time="0.000236458">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; RING_CONFIGS &gt; teamChip config &gt; should return fixed red-white inversion pattern" time="0.000069708">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; RING_CONFIGS &gt; chip config &gt; should return color with slate-100 inversion in dark mode" time="0.000067583">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; RING_CONFIGS &gt; chip config &gt; should work with different colors" time="0.000149708">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; RING_CONFIGS &gt; input config &gt; should return subtler colors for form fields" time="0.000085709">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; RING_CONFIGS &gt; input config &gt; should use darker offset in dark mode for better contrast" time="0.000062709">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; convenience functions comprehensive tests &gt; getButtonRingClasses &gt; should include disabled classes for buttons" time="0.000090583">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; convenience functions comprehensive tests &gt; getButtonRingClasses &gt; should generate different classes for different colors" time="0.000081166">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; convenience functions comprehensive tests &gt; getButtonRingClasses &gt; should handle semantic colors properly" time="0.000060125">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; convenience functions comprehensive tests &gt; getInputRingClasses &gt; should generate proper input ring classes" time="0.000082042">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; convenience functions comprehensive tests &gt; getInputRingClasses &gt; should not include disabled classes (inputs handle disabled differently)" time="0.000061833">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; convenience functions comprehensive tests &gt; color consistency across functions &gt; should maintain color consistency between button and chip functions" time="0.000071417">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; convenience functions comprehensive tests &gt; color consistency across functions &gt; should handle special team chip case" time="0.000068416">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; convenience functions comprehensive tests &gt; edge cases and error handling &gt; should handle brand and primary colors" time="0.000067041">
        </testcase>
        <testcase classname="app/styles/__tests__/ring.styles.test.ts" name="Ring Styles &gt; convenience functions comprehensive tests &gt; edge cases and error handling &gt; should handle all valid ColorAccent values" time="0.000713875">
        </testcase>
    </testsuite>
    <testsuite name="test/routes/auth/auth.signin.component.test.tsx" timestamp="2025-08-11T17:20:20.424Z" hostname="Mac.HOME" tests="4" failures="0" errors="0" skipped="0" time="0.014363166">
        <testcase classname="test/routes/auth/auth.signin.component.test.tsx" name="Auth SignIn Route Component &gt; renders SignIn component" time="0.010344167">
        </testcase>
        <testcase classname="test/routes/auth/auth.signin.component.test.tsx" name="Auth SignIn Route Component &gt; passes actionData to SignIn component" time="0.00147425">
        </testcase>
        <testcase classname="test/routes/auth/auth.signin.component.test.tsx" name="Auth SignIn Route Component &gt; handles undefined actionData gracefully" time="0.000984416">
        </testcase>
        <testcase classname="test/routes/auth/auth.signin.component.test.tsx" name="Auth SignIn Route Component &gt; handles empty actionData" time="0.000843041">
        </testcase>
    </testsuite>
    <testsuite name="test/routes/auth/auth.signin.rate-limit.test.ts" timestamp="2025-08-11T17:20:20.424Z" hostname="Mac.HOME" tests="9" failures="0" errors="0" skipped="0" time="0.00651575">
        <testcase classname="test/routes/auth/auth.signin.rate-limit.test.ts" name="auth.signin rate limiting &gt; should apply rate limiting before processing form data" time="0.003180708">
        </testcase>
        <testcase classname="test/routes/auth/auth.signin.rate-limit.test.ts" name="auth.signin rate limiting &gt; should return rate limit response when blocked" time="0.000593458">
        </testcase>
        <testcase classname="test/routes/auth/auth.signin.rate-limit.test.ts" name="auth.signin rate limiting &gt; should use correct rate limit configuration for login" time="0.000199167">
        </testcase>
        <testcase classname="test/routes/auth/auth.signin.rate-limit.test.ts" name="auth.signin rate limiting &gt; should handle different IP addresses separately" time="0.000302042">
        </testcase>
        <testcase classname="test/routes/auth/auth.signin.rate-limit.test.ts" name="auth.signin rate limiting &gt; should handle missing form data gracefully with rate limiting" time="0.000274125">
        </testcase>
        <testcase classname="test/routes/auth/auth.signin.rate-limit.test.ts" name="auth.signin rate limiting &gt; should preserve rate limit headers in response" time="0.000186792">
        </testcase>
        <testcase classname="test/routes/auth/auth.signin.rate-limit.test.ts" name="auth.signin rate limiting &gt; IP extraction integration &gt; should work with CloudFlare headers" time="0.00048975">
        </testcase>
        <testcase classname="test/routes/auth/auth.signin.rate-limit.test.ts" name="auth.signin rate limiting &gt; IP extraction integration &gt; should work with proxy headers" time="0.000208875">
        </testcase>
        <testcase classname="test/routes/auth/auth.signin.rate-limit.test.ts" name="auth.signin rate limiting &gt; IP extraction integration &gt; should handle unknown IP addresses" time="0.00043825">
        </testcase>
    </testsuite>
    <testsuite name="test/routes/auth/auth.signup.component.test.tsx" timestamp="2025-08-11T17:20:20.424Z" hostname="Mac.HOME" tests="5" failures="0" errors="0" skipped="0" time="0.022981833">
        <testcase classname="test/routes/auth/auth.signup.component.test.tsx" name="Auth SignUp Route Component &gt; renders SignUp component" time="0.010443166">
        </testcase>
        <testcase classname="test/routes/auth/auth.signup.component.test.tsx" name="Auth SignUp Route Component &gt; passes actionData to SignUp component" time="0.001523292">
        </testcase>
        <testcase classname="test/routes/auth/auth.signup.component.test.tsx" name="Auth SignUp Route Component &gt; handles undefined actionData gracefully" time="0.001589333">
        </testcase>
        <testcase classname="test/routes/auth/auth.signup.component.test.tsx" name="Auth SignUp Route Component &gt; handles empty actionData" time="0.0016215">
        </testcase>
        <testcase classname="test/routes/auth/auth.signup.component.test.tsx" name="Auth SignUp Route Component &gt; passes complex actionData correctly" time="0.00696725">
        </testcase>
    </testsuite>
    <testsuite name="test/routes/admin/admin-dashboard.test.tsx" timestamp="2025-08-11T17:20:20.425Z" hostname="Mac.HOME" tests="27" failures="0" errors="0" skipped="0" time="0.1099355">
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Basic Rendering &gt; should render main page title" time="0.029642167">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Basic Rendering &gt; should render welcome message with user email" time="0.002744209">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Basic Rendering &gt; should render all five admin panels" time="0.001970125">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Admin Panels Configuration &gt; should configure Team Management panel correctly" time="0.0018275">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Admin Panels Configuration &gt; should configure Tournament Management panel correctly" time="0.003263042">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Admin Panels Configuration &gt; should configure User Management panel correctly" time="0.006381375">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Admin Panels Configuration &gt; should configure System Settings panel correctly" time="0.002313375">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Admin Panels Configuration &gt; should configure Reports &amp; Analytics panel correctly" time="0.001690584">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Data Display &gt; should display total teams count" time="0.004177125">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Data Display &gt; should display total tournaments count" time="0.002419042">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Data Display &gt; should display current user information" time="0.001565125">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Icons Integration &gt; should render appropriate icons for each panel" time="0.001475">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Icons Integration &gt; should apply correct icon styling" time="0.001507583">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Layout and Styling &gt; should apply correct styling to main heading" time="0.011911084">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Layout and Styling &gt; should apply correct styling to welcome message" time="0.002626625">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Layout and Styling &gt; should organize content in proper structure" time="0.002933292">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Navigation Links &gt; should provide navigation to teams management" time="0.001377125">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Navigation Links &gt; should provide navigation to tournaments management" time="0.001259375">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Navigation Links &gt; should not provide navigation for non-implemented panels" time="0.001231542">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Accessibility &gt; should have proper heading hierarchy" time="0.002347416">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Accessibility &gt; should have descriptive panel titles" time="0.00170625">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Translation Integration &gt; should use translation system for data labels" time="0.001485875">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Translation Integration &gt; should render with English language context" time="0.015558125">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Dynamic Data Handling &gt; should handle empty teams data" time="0.001416917">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; Dynamic Data Handling &gt; should handle empty tournaments data" time="0.001220583">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; User Context Display &gt; should display correct user information" time="0.001468958">
        </testcase>
        <testcase classname="test/routes/admin/admin-dashboard.test.tsx" name="Admin Dashboard &gt; User Context Display &gt; should handle different user data" time="0.001385459">
        </testcase>
    </testsuite>
    <testsuite name="test/routes/admin/admin-layout.test.tsx" timestamp="2025-08-11T17:20:20.426Z" hostname="Mac.HOME" tests="11" failures="0" errors="0" skipped="0" time="0.028825917">
        <testcase classname="test/routes/admin/admin-layout.test.tsx" name="Admin Layout &gt; Basic Rendering &gt; should render the Outlet component directly" time="0.008371083">
        </testcase>
        <testcase classname="test/routes/admin/admin-layout.test.tsx" name="Admin Layout &gt; Basic Rendering &gt; should provide minimal layout structure" time="0.000976959">
        </testcase>
        <testcase classname="test/routes/admin/admin-layout.test.tsx" name="Admin Layout &gt; Outlet Integration &gt; should render child routes through Outlet" time="0.000792792">
        </testcase>
        <testcase classname="test/routes/admin/admin-layout.test.tsx" name="Admin Layout &gt; Outlet Integration &gt; should provide pass-through layout for nested routes" time="0.002155292">
        </testcase>
        <testcase classname="test/routes/admin/admin-layout.test.tsx" name="Admin Layout &gt; Error Boundary Integration &gt; should export AuthErrorBoundary as ErrorBoundary" time="0.000220792">
        </testcase>
        <testcase classname="test/routes/admin/admin-layout.test.tsx" name="Admin Layout &gt; Error Boundary Integration &gt; should provide error handling capability" time="0.011735792">
        </testcase>
        <testcase classname="test/routes/admin/admin-layout.test.tsx" name="Admin Layout &gt; Layout Architecture &gt; should delegate layout responsibility to child routes" time="0.001579625">
        </testcase>
        <testcase classname="test/routes/admin/admin-layout.test.tsx" name="Admin Layout &gt; Layout Architecture &gt; should maintain simple pass-through structure" time="0.00061875">
        </testcase>
        <testcase classname="test/routes/admin/admin-layout.test.tsx" name="Admin Layout &gt; Accessibility &gt; should not interfere with child content accessibility" time="0.000680333">
        </testcase>
        <testcase classname="test/routes/admin/admin-layout.test.tsx" name="Admin Layout &gt; Accessibility &gt; should preserve semantic structure of child routes" time="0.000520625">
        </testcase>
        <testcase classname="test/routes/admin/admin-layout.test.tsx" name="Admin Layout &gt; Content Flow &gt; should allow unrestricted content flow to child routes" time="0.00039675">
        </testcase>
    </testsuite>
    <testsuite name="test/routes/teams/teams.new.rate-limit.test.ts" timestamp="2025-08-11T17:20:20.427Z" hostname="Mac.HOME" tests="9" failures="0" errors="0" skipped="0" time="0.005453833">
        <testcase classname="test/routes/teams/teams.new.rate-limit.test.ts" name="teams.new rate limiting integration &gt; should apply admin rate limiting to team creation" time="0.002536917">
        </testcase>
        <testcase classname="test/routes/teams/teams.new.rate-limit.test.ts" name="teams.new rate limiting integration &gt; should return rate limit response when blocked" time="0.000431958">
        </testcase>
        <testcase classname="test/routes/teams/teams.new.rate-limit.test.ts" name="teams.new rate limiting integration &gt; should handle validation errors within rate limit handler" time="0.000228459">
        </testcase>
        <testcase classname="test/routes/teams/teams.new.rate-limit.test.ts" name="teams.new rate limiting integration &gt; should properly handle async handler in rate limit wrapper" time="0.000212916">
        </testcase>
        <testcase classname="test/routes/teams/teams.new.rate-limit.test.ts" name="teams.new rate limiting integration &gt; should handle different HTTP methods appropriately" time="0.000241458">
        </testcase>
        <testcase classname="test/routes/teams/teams.new.rate-limit.test.ts" name="teams.new rate limiting integration &gt; should preserve response characteristics through rate limiting" time="0.0002045">
        </testcase>
        <testcase classname="test/routes/teams/teams.new.rate-limit.test.ts" name="teams.new rate limiting integration &gt; error handling &gt; should handle rate limit middleware errors" time="0.000671584">
        </testcase>
        <testcase classname="test/routes/teams/teams.new.rate-limit.test.ts" name="teams.new rate limiting integration &gt; error handling &gt; should handle handler errors within middleware" time="0.000175042">
        </testcase>
        <testcase classname="test/routes/teams/teams.new.rate-limit.test.ts" name="teams.new rate limiting integration &gt; type safety &gt; should properly handle Response type checking" time="0.000164542">
        </testcase>
    </testsuite>
    <testsuite name="app/utils/__tests__/adminMiddleware.server.test.ts" timestamp="2025-08-11T17:20:20.428Z" hostname="Mac.HOME" tests="14" failures="0" errors="0" skipped="0" time="0.00659125">
        <testcase classname="app/utils/__tests__/adminMiddleware.server.test.ts" name="adminMiddleware.server &gt; withAdminRateLimit &gt; should call handler when rate limit allows request" time="0.002450917">
        </testcase>
        <testcase classname="app/utils/__tests__/adminMiddleware.server.test.ts" name="adminMiddleware.server &gt; withAdminRateLimit &gt; should return rate limit response when blocked" time="0.0007905">
        </testcase>
        <testcase classname="app/utils/__tests__/adminMiddleware.server.test.ts" name="adminMiddleware.server &gt; withAdminRateLimit &gt; should handle async handlers" time="0.000305875">
        </testcase>
        <testcase classname="app/utils/__tests__/adminMiddleware.server.test.ts" name="adminMiddleware.server &gt; withAdminRateLimit &gt; should handle sync handlers" time="0.000134625">
        </testcase>
        <testcase classname="app/utils/__tests__/adminMiddleware.server.test.ts" name="adminMiddleware.server &gt; withAdminRateLimit &gt; should handle handler errors" time="0.000589583">
        </testcase>
        <testcase classname="app/utils/__tests__/adminMiddleware.server.test.ts" name="adminMiddleware.server &gt; withAdminSensitiveRateLimit &gt; should use sensitive rate limits configuration" time="0.00021975">
        </testcase>
        <testcase classname="app/utils/__tests__/adminMiddleware.server.test.ts" name="adminMiddleware.server &gt; withAdminSensitiveRateLimit &gt; should block sensitive operations when rate limited" time="0.000207125">
        </testcase>
        <testcase classname="app/utils/__tests__/adminMiddleware.server.test.ts" name="adminMiddleware.server &gt; withAdminSensitiveRateLimit &gt; should handle different IP addresses separately" time="0.000238917">
        </testcase>
        <testcase classname="app/utils/__tests__/adminMiddleware.server.test.ts" name="adminMiddleware.server &gt; isRateLimitResponse &gt; should return true for 429 Response" time="0.000123625">
        </testcase>
        <testcase classname="app/utils/__tests__/adminMiddleware.server.test.ts" name="adminMiddleware.server &gt; isRateLimitResponse &gt; should return false for non-429 Response" time="0.0001195">
        </testcase>
        <testcase classname="app/utils/__tests__/adminMiddleware.server.test.ts" name="adminMiddleware.server &gt; isRateLimitResponse &gt; should return false for non-Response objects" time="0.000091958">
        </testcase>
        <testcase classname="app/utils/__tests__/adminMiddleware.server.test.ts" name="adminMiddleware.server &gt; isRateLimitResponse &gt; should return false for Response-like objects" time="0.000064625">
        </testcase>
        <testcase classname="app/utils/__tests__/adminMiddleware.server.test.ts" name="adminMiddleware.server &gt; IP address handling &gt; should use correct IP prefixes for different middleware types" time="0.00015025">
        </testcase>
        <testcase classname="app/utils/__tests__/adminMiddleware.server.test.ts" name="adminMiddleware.server &gt; IP address handling &gt; should handle unknown IP addresses" time="0.000451666">
        </testcase>
    </testsuite>
    <testsuite name="app/utils/__tests__/animationConstants.test.ts" timestamp="2025-08-11T17:20:20.428Z" hostname="Mac.HOME" tests="18" failures="0" errors="0" skipped="0" time="0.003949291">
        <testcase classname="app/utils/__tests__/animationConstants.test.ts" name="animationConstants &gt; ANIMATION_DURATION &gt; should export correct duration values synchronized with CSS" time="0.000770125">
        </testcase>
        <testcase classname="app/utils/__tests__/animationConstants.test.ts" name="animationConstants &gt; ANIMATION_DURATION &gt; should have consistent duration format" time="0.00019375">
        </testcase>
        <testcase classname="app/utils/__tests__/animationConstants.test.ts" name="animationConstants &gt; ANIMATION_TIMING &gt; should export correct timing function values synchronized with CSS" time="0.000104708">
        </testcase>
        <testcase classname="app/utils/__tests__/animationConstants.test.ts" name="animationConstants &gt; ANIMATION_TIMING &gt; should have valid CSS timing functions" time="0.000093709">
        </testcase>
        <testcase classname="app/utils/__tests__/animationConstants.test.ts" name="animationConstants &gt; ANIMATIONS &gt; should combine duration and timing for AppBar animations" time="0.00008775">
        </testcase>
        <testcase classname="app/utils/__tests__/animationConstants.test.ts" name="animationConstants &gt; ANIMATIONS &gt; should combine duration and timing for BottomNav animations" time="0.000081125">
        </testcase>
        <testcase classname="app/utils/__tests__/animationConstants.test.ts" name="animationConstants &gt; ANIMATIONS &gt; should include forwards fill-mode in all animations" time="0.000128958">
        </testcase>
        <testcase classname="app/utils/__tests__/animationConstants.test.ts" name="animationConstants &gt; ANIMATION_CLASSES &gt; should provide correct CSS class names for AppBar" time="0.000084917">
        </testcase>
        <testcase classname="app/utils/__tests__/animationConstants.test.ts" name="animationConstants &gt; ANIMATION_CLASSES &gt; should provide correct CSS class names for BottomNav" time="0.00009325">
        </testcase>
        <testcase classname="app/utils/__tests__/animationConstants.test.ts" name="animationConstants &gt; ANIMATION_CLASSES &gt; should use consistent naming convention" time="0.000169375">
        </testcase>
        <testcase classname="app/utils/__tests__/animationConstants.test.ts" name="animationConstants &gt; ANIMATION_CLASSES &gt; should have parallel structure between AppBar and BottomNav" time="0.000301833">
        </testcase>
        <testcase classname="app/utils/__tests__/animationConstants.test.ts" name="animationConstants &gt; type definitions &gt; should have correct AnimationState type values" time="0.000345208">
        </testcase>
        <testcase classname="app/utils/__tests__/animationConstants.test.ts" name="animationConstants &gt; type definitions &gt; should have correct AnimationType type values" time="0.000087542">
        </testcase>
        <testcase classname="app/utils/__tests__/animationConstants.test.ts" name="animationConstants &gt; consistency across constants &gt; should have matching animation names between ANIMATIONS and keyframe names" time="0.000070333">
        </testcase>
        <testcase classname="app/utils/__tests__/animationConstants.test.ts" name="animationConstants &gt; consistency across constants &gt; should have corresponding class names for each animation state" time="0.000142542">
        </testcase>
        <testcase classname="app/utils/__tests__/animationConstants.test.ts" name="animationConstants &gt; consistency across constants &gt; should use kebab-case in CSS class names" time="0.000118125">
        </testcase>
        <testcase classname="app/utils/__tests__/animationConstants.test.ts" name="animationConstants &gt; animation performance considerations &gt; should use hardware-accelerated properties" time="0.000060083">
        </testcase>
        <testcase classname="app/utils/__tests__/animationConstants.test.ts" name="animationConstants &gt; animation performance considerations &gt; should have reasonable animation durations" time="0.000092291">
        </testcase>
    </testsuite>
    <testsuite name="app/utils/__tests__/breakpoints.test.ts" timestamp="2025-08-11T17:20:20.430Z" hostname="Mac.HOME" tests="18" failures="0" errors="0" skipped="0" time="0.003073209">
        <testcase classname="app/utils/__tests__/breakpoints.test.ts" name="breakpoints &gt; constants &gt; should export correct breakpoint values" time="0.000731">
        </testcase>
        <testcase classname="app/utils/__tests__/breakpoints.test.ts" name="breakpoints &gt; constants &gt; should have consistent breakpoint object" time="0.000337875">
        </testcase>
        <testcase classname="app/utils/__tests__/breakpoints.test.ts" name="breakpoints &gt; isMobile function &gt; should return false when window is undefined (SSR)" time="0.000186584">
        </testcase>
        <testcase classname="app/utils/__tests__/breakpoints.test.ts" name="breakpoints &gt; isMobile function &gt; should return true for mobile viewport (&lt; 1024px)" time="0.000093959">
        </testcase>
        <testcase classname="app/utils/__tests__/breakpoints.test.ts" name="breakpoints &gt; isMobile function &gt; should return false for desktop viewport (&gt;= 1024px)" time="0.0000825">
        </testcase>
        <testcase classname="app/utils/__tests__/breakpoints.test.ts" name="breakpoints &gt; isMobile function &gt; should handle edge case at exact desktop breakpoint" time="0.000083">
        </testcase>
        <testcase classname="app/utils/__tests__/breakpoints.test.ts" name="breakpoints &gt; isMobile function &gt; should handle edge case just below desktop breakpoint" time="0.000078167">
        </testcase>
        <testcase classname="app/utils/__tests__/breakpoints.test.ts" name="breakpoints &gt; showBottomNav function &gt; should return false when window is undefined (SSR)" time="0.000086208">
        </testcase>
        <testcase classname="app/utils/__tests__/breakpoints.test.ts" name="breakpoints &gt; showBottomNav function &gt; should return true for mobile viewport (&lt;= 767px)" time="0.000078208">
        </testcase>
        <testcase classname="app/utils/__tests__/breakpoints.test.ts" name="breakpoints &gt; showBottomNav function &gt; should return false for tablet/desktop viewport (&gt; 767px)" time="0.000096167">
        </testcase>
        <testcase classname="app/utils/__tests__/breakpoints.test.ts" name="breakpoints &gt; showBottomNav function &gt; should handle edge case at exact mobile breakpoint" time="0.000064042">
        </testcase>
        <testcase classname="app/utils/__tests__/breakpoints.test.ts" name="breakpoints &gt; showBottomNav function &gt; should handle edge case just above mobile breakpoint" time="0.000058292">
        </testcase>
        <testcase classname="app/utils/__tests__/breakpoints.test.ts" name="breakpoints &gt; showBottomNav function &gt; should handle very small viewports" time="0.000052625">
        </testcase>
        <testcase classname="app/utils/__tests__/breakpoints.test.ts" name="breakpoints &gt; media queries &gt; should provide correct mobile query string" time="0.000049875">
        </testcase>
        <testcase classname="app/utils/__tests__/breakpoints.test.ts" name="breakpoints &gt; media queries &gt; should provide correct desktop query string" time="0.000050333">
        </testcase>
        <testcase classname="app/utils/__tests__/breakpoints.test.ts" name="breakpoints &gt; media queries &gt; should maintain type safety for query keys" time="0.0000815">
        </testcase>
        <testcase classname="app/utils/__tests__/breakpoints.test.ts" name="breakpoints &gt; consistency between breakpoint functions &gt; should have consistent behavior at different viewport sizes" time="0.00013925">
        </testcase>
        <testcase classname="app/utils/__tests__/breakpoints.test.ts" name="breakpoints &gt; consistency between breakpoint functions &gt; should handle breakpoint boundaries correctly" time="0.000109833">
        </testcase>
    </testsuite>
    <testsuite name="app/utils/__tests__/dataLoaders.test.ts" timestamp="2025-08-11T17:20:20.431Z" hostname="Mac.HOME" tests="10" failures="0" errors="0" skipped="0" time="0.016770334">
        <testcase classname="app/utils/__tests__/dataLoaders.test.ts" name="dataLoaders &gt; loadTeamsAndTournamentsData &gt; should load all data when no tournamentId filter is provided" time="0.001793375">
        </testcase>
        <testcase classname="app/utils/__tests__/dataLoaders.test.ts" name="dataLoaders &gt; loadTeamsAndTournamentsData &gt; should load filtered data when tournamentId is provided" time="0.000429042">
        </testcase>
        <testcase classname="app/utils/__tests__/dataLoaders.test.ts" name="dataLoaders &gt; loadTeamsAndTournamentsData &gt; should return empty arrays when no data is found" time="0.0001875">
        </testcase>
        <testcase classname="app/utils/__tests__/dataLoaders.test.ts" name="dataLoaders &gt; loadTeamsAndTournamentsData &gt; should handle database errors gracefully" time="0.000699417">
        </testcase>
        <testcase classname="app/utils/__tests__/dataLoaders.test.ts" name="dataLoaders &gt; loadTeamsAndTournamentsData &gt; should handle team loading errors gracefully" time="0.000243334">
        </testcase>
        <testcase classname="app/utils/__tests__/dataLoaders.test.ts" name="dataLoaders &gt; loadTeamsAndTournamentsData &gt; should call functions in parallel for performance" time="0.011646542">
        </testcase>
        <testcase classname="app/utils/__tests__/dataLoaders.test.ts" name="dataLoaders &gt; loadTeamsAndTournamentsData &gt; edge cases &gt; should handle null tournament data" time="0.000319833">
        </testcase>
        <testcase classname="app/utils/__tests__/dataLoaders.test.ts" name="dataLoaders &gt; loadTeamsAndTournamentsData &gt; edge cases &gt; should handle null team data" time="0.000166083">
        </testcase>
        <testcase classname="app/utils/__tests__/dataLoaders.test.ts" name="dataLoaders &gt; loadTeamsAndTournamentsData &gt; edge cases &gt; should handle empty string tournamentId" time="0.000311708">
        </testcase>
        <testcase classname="app/utils/__tests__/dataLoaders.test.ts" name="dataLoaders &gt; loadTeamsAndTournamentsData &gt; edge cases &gt; should handle malformed URLs gracefully" time="0.000330208">
        </testcase>
    </testsuite>
    <testsuite name="app/utils/__tests__/domUtils.scrollLogic.test.ts" timestamp="2025-08-11T17:20:20.432Z" hostname="Mac.HOME" tests="20" failures="0" errors="0" skipped="0" time="0.004451708">
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; shouldShowHeader &gt; should return null when movement is below threshold" time="0.00201175">
        </testcase>
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; shouldShowHeader &gt; should return false (hide) when scrolling down beyond threshold" time="0.000183875">
        </testcase>
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; shouldShowHeader &gt; should return true (show) when scrolling up beyond threshold" time="0.000156959">
        </testcase>
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; shouldShowHeader &gt; should handle zero threshold" time="0.000103917">
        </testcase>
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; shouldShowHeader &gt; should handle negative threshold gracefully" time="0.000088583">
        </testcase>
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; isValidScrollPosition &gt; should return true for positions within valid range" time="0.000111666">
        </testcase>
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; isValidScrollPosition &gt; should return false for negative positions (top overscroll)" time="0.000080958">
        </testcase>
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; isValidScrollPosition &gt; should return false for positions beyond maxScrollY (bottom overscroll)" time="0.00014225">
        </testcase>
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; isValidScrollPosition &gt; should handle edge case where maxScrollY is 0" time="0.000083458">
        </testcase>
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; calculateMaxScrollY &gt; should calculate correct max scroll for scrollable content" time="0.000102292">
        </testcase>
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; calculateMaxScrollY &gt; should return 0 when content is shorter than viewport" time="0.000070583">
        </testcase>
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; calculateMaxScrollY &gt; should handle zero values" time="0.00006625">
        </testcase>
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; calculateMaxScrollY &gt; should handle negative values gracefully" time="0.000057833">
        </testcase>
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; isScrollable &gt; should return true when document is taller than viewport" time="0.000068416">
        </testcase>
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; isScrollable &gt; should return false when document is shorter than or equal to viewport" time="0.000061">
        </testcase>
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; isScrollable &gt; should handle zero values" time="0.000061333">
        </testcase>
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; real-world scenarios &gt; should handle typical mobile viewport" time="0.00010425">
        </testcase>
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; real-world scenarios &gt; should handle short page scenario" time="0.000077625">
        </testcase>
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; real-world scenarios &gt; should handle overscroll bounce scenarios" time="0.000093042">
        </testcase>
        <testcase classname="app/utils/__tests__/domUtils.scrollLogic.test.ts" name="scrollLogic &gt; real-world scenarios &gt; should handle scroll direction with different thresholds" time="0.000100584">
        </testcase>
    </testsuite>
    <testsuite name="app/utils/__tests__/email.server.test.tsx" timestamp="2025-08-11T17:20:20.433Z" hostname="Mac.HOME" tests="10" failures="0" errors="0" skipped="0" time="0.006224084">
        <testcase classname="app/utils/__tests__/email.server.test.tsx" name="email.server &gt; sendConfirmationEmail &gt; should send email successfully with correct parameters" time="0.001812417">
        </testcase>
        <testcase classname="app/utils/__tests__/email.server.test.tsx" name="email.server &gt; sendConfirmationEmail &gt; should throw error when team leader not found" time="0.000938042">
        </testcase>
        <testcase classname="app/utils/__tests__/email.server.test.tsx" name="email.server &gt; sendConfirmationEmail &gt; should throw error when EMAIL_FROM not set" time="0.000269167">
        </testcase>
        <testcase classname="app/utils/__tests__/email.server.test.tsx" name="email.server &gt; sendConfirmationEmail &gt; should throw error when RESEND_API_KEY not set" time="0.000213">
        </testcase>
        <testcase classname="app/utils/__tests__/email.server.test.tsx" name="email.server &gt; sendConfirmationEmail &gt; should use correct baseUrl for development environment" time="0.000804042">
        </testcase>
        <testcase classname="app/utils/__tests__/email.server.test.tsx" name="email.server &gt; sendConfirmationEmail &gt; should use FLY_APP_NAME for logo URL in production" time="0.000292">
        </testcase>
        <testcase classname="app/utils/__tests__/email.server.test.tsx" name="email.server &gt; sendConfirmationEmail &gt; should use staging logo URL for development" time="0.000258667">
        </testcase>
        <testcase classname="app/utils/__tests__/email.server.test.tsx" name="email.server &gt; sendConfirmationEmail &gt; should handle EMAIL_BASE_URL override" time="0.000251167">
        </testcase>
        <testcase classname="app/utils/__tests__/email.server.test.tsx" name="email.server &gt; sendConfirmationEmail &gt; should throw error when Resend API fails" time="0.000327792">
        </testcase>
        <testcase classname="app/utils/__tests__/email.server.test.tsx" name="email.server &gt; sendConfirmationEmail &gt; should pass correct props to email template" time="0.000499708">
        </testcase>
    </testsuite>
    <testsuite name="app/utils/__tests__/flatRoutes.test.ts" timestamp="2025-08-11T17:20:20.433Z" hostname="Mac.HOME" tests="11" failures="0" errors="0" skipped="0" time="0.008362458">
        <testcase classname="app/utils/__tests__/flatRoutes.test.ts" name="scanFlatRoutes &gt; handles root level files correctly" time="0.001872">
        </testcase>
        <testcase classname="app/utils/__tests__/flatRoutes.test.ts" name="scanFlatRoutes &gt; handles flat route naming correctly" time="0.000367833">
        </testcase>
        <testcase classname="app/utils/__tests__/flatRoutes.test.ts" name="scanFlatRoutes &gt; handles layout files with children correctly" time="0.000280042">
        </testcase>
        <testcase classname="app/utils/__tests__/flatRoutes.test.ts" name="scanFlatRoutes &gt; handles nested admin routes correctly (the critical fix)" time="0.000218333">
        </testcase>
        <testcase classname="app/utils/__tests__/flatRoutes.test.ts" name="scanFlatRoutes &gt; handles mixed public and admin routes correctly" time="0.00068475">
        </testcase>
        <testcase classname="app/utils/__tests__/flatRoutes.test.ts" name="scanFlatRoutes &gt; handles auth routes correctly" time="0.00016875">
        </testcase>
        <testcase classname="app/utils/__tests__/flatRoutes.test.ts" name="scanFlatRoutes &gt; handles resource routes correctly" time="0.0001295">
        </testcase>
        <testcase classname="app/utils/__tests__/flatRoutes.test.ts" name="scanFlatRoutes &gt; skips underscore files (except _index)" time="0.000140083">
        </testcase>
        <testcase classname="app/utils/__tests__/flatRoutes.test.ts" name="scanFlatRoutes &gt; handles complex nested structure" time="0.000564375">
        </testcase>
        <testcase classname="app/utils/__tests__/flatRoutes.test.ts" name="scanFlatRoutes &gt; edge case: empty file list" time="0.000308916">
        </testcase>
        <testcase classname="app/utils/__tests__/flatRoutes.test.ts" name="scanFlatRoutes &gt; edge case: layout without children" time="0.00297675">
        </testcase>
    </testsuite>
    <testsuite name="app/utils/__tests__/formValidation.test.ts" timestamp="2025-08-11T17:20:20.434Z" hostname="Mac.HOME" tests="34" failures="0" errors="0" skipped="0" time="0.009301375">
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; mapStoreFieldToZodField &gt; should return the same field name" time="0.002263541">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; mapStoreFieldToZodField &gt; should handle arbitrary field names" time="0.000150584">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; getFieldErrorTranslationKey &gt; custom validation errors &gt; should return email invalid key for teamLeaderEmail custom errors" time="0.000111083">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; getFieldErrorTranslationKey &gt; custom validation errors &gt; should return phone invalid key for teamLeaderPhone custom errors" time="0.000066">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; getFieldErrorTranslationKey &gt; custom validation errors &gt; should fallback to default for other fields with custom errors" time="0.000093916">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; getFieldErrorTranslationKey &gt; too_big validation errors &gt; should return name too long key for name too_big errors" time="0.000068709">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; getFieldErrorTranslationKey &gt; too_big validation errors &gt; should return clubName too long key for clubName too_big errors" time="0.000062333">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; getFieldErrorTranslationKey &gt; too_big validation errors &gt; should return teamLeaderName too long key for teamLeaderName too_big errors" time="0.000054375">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; getFieldErrorTranslationKey &gt; too_big validation errors &gt; should fallback to default for other fields with too_big errors" time="0.000060208">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; getFieldErrorTranslationKey &gt; default required field errors &gt; should return correct translation keys for standard fields" time="0.000545875">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; getFieldErrorTranslationKey &gt; default required field errors &gt; should return correct translation keys for legacy store field names" time="0.000558875">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; getFieldErrorTranslationKey &gt; default required field errors &gt; should return default key for unknown fields" time="0.000121834">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; getFieldErrorTranslationKey &gt; with zodIssue parameter &gt; should handle undefined zodIssue" time="0.000061667">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; getFieldErrorTranslationKey &gt; with zodIssue parameter &gt; should handle zodIssue without code" time="0.000052541">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; getFieldErrorTranslationKey &gt; with zodIssue parameter &gt; should handle unknown zodIssue codes" time="0.000049125">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; validateSingleField &gt; create mode &gt; should return null for valid fields" time="0.001046208">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; validateSingleField &gt; create mode &gt; should return error key for empty required fields" time="0.000445791">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; validateSingleField &gt; create mode &gt; should return error key for privacy agreement in create mode" time="0.000122458">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; validateSingleField &gt; create mode &gt; should return error key for invalid email format" time="0.000095916">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; validateSingleField &gt; create mode &gt; should return error key for invalid phone format" time="0.000105125">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; validateSingleField &gt; create mode &gt; should return error key for too long team name" time="0.000084334">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; validateSingleField &gt; edit mode &gt; should return null for valid fields" time="0.000307666">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; validateSingleField &gt; edit mode &gt; should not require privacy agreement in edit mode" time="0.000061084">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; validateSingleField &gt; edit mode &gt; should return error key for empty required fields" time="0.000179125">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; validateSingleField &gt; fallback validation &gt; should handle validation errors gracefully" time="0.000134083">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; validateSingleField &gt; fallback validation &gt; should handle unknown field names" time="0.00005575">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; validateEntireForm &gt; create mode &gt; should return empty errors for valid form data" time="0.000287583">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; validateEntireForm &gt; create mode &gt; should return all field errors for empty form data" time="0.000129625">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; validateEntireForm &gt; create mode &gt; should return specific field errors for invalid data" time="0.000086417">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; validateEntireForm &gt; edit mode &gt; should return empty errors for valid form data" time="0.000055166">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; validateEntireForm &gt; edit mode &gt; should not require privacy agreement in edit mode" time="0.000059459">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; validateEntireForm &gt; edit mode &gt; should return errors for other required fields in edit mode" time="0.000135333">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; validateEntireForm &gt; error handling &gt; should handle validation errors gracefully" time="0.000139917">
        </testcase>
        <testcase classname="app/utils/__tests__/formValidation.test.ts" name="form-validation &gt; validateEntireForm &gt; error handling &gt; should return empty object for unexpected errors" time="0.000071583">
        </testcase>
    </testsuite>
    <testsuite name="app/utils/__tests__/misc.test.tsx" timestamp="2025-08-11T17:20:20.436Z" hostname="Mac.HOME" tests="19" failures="0" errors="0" skipped="0" time="0.008012">
        <testcase classname="app/utils/__tests__/misc.test.tsx" name="getErrorMessage &gt; returns string errors as-is" time="0.001375">
        </testcase>
        <testcase classname="app/utils/__tests__/misc.test.tsx" name="getErrorMessage &gt; extracts message from error objects" time="0.000146458">
        </testcase>
        <testcase classname="app/utils/__tests__/misc.test.tsx" name="getErrorMessage &gt; returns &quot;Unknown Error&quot; for non-string non-object-with-message values" time="0.000146792">
        </testcase>
        <testcase classname="app/utils/__tests__/misc.test.tsx" name="getErrorMessage &gt; handles objects with non-string message property" time="0.000096625">
        </testcase>
        <testcase classname="app/utils/__tests__/misc.test.tsx" name="cn &gt; merges class names correctly" time="0.003515459">
        </testcase>
        <testcase classname="app/utils/__tests__/misc.test.tsx" name="cn &gt; handles conditional classes" time="0.000162125">
        </testcase>
        <testcase classname="app/utils/__tests__/misc.test.tsx" name="cn &gt; handles empty values" time="0.000090625">
        </testcase>
        <testcase classname="app/utils/__tests__/misc.test.tsx" name="cn &gt; merges Tailwind classes correctly" time="0.000105458">
        </testcase>
        <testcase classname="app/utils/__tests__/misc.test.tsx" name="invariantResponse &gt; does not throw when condition is true" time="0.000448583">
        </testcase>
        <testcase classname="app/utils/__tests__/misc.test.tsx" name="invariantResponse &gt; throws Response when condition is false" time="0.000586375">
        </testcase>
        <testcase classname="app/utils/__tests__/misc.test.tsx" name="invariantResponse &gt; uses custom message when provided" time="0.000130583">
        </testcase>
        <testcase classname="app/utils/__tests__/misc.test.tsx" name="invariantResponse &gt; uses function message when provided" time="0.000082667">
        </testcase>
        <testcase classname="app/utils/__tests__/misc.test.tsx" name="invariantResponse &gt; uses default message when none provided" time="0.000070458">
        </testcase>
        <testcase classname="app/utils/__tests__/misc.test.tsx" name="invariantResponse &gt; respects custom responseInit" time="0.000074042">
        </testcase>
        <testcase classname="app/utils/__tests__/misc.test.tsx" name="isRouteErrorResponse &gt; returns true for route error responses" time="0.000056">
        </testcase>
        <testcase classname="app/utils/__tests__/misc.test.tsx" name="isRouteErrorResponse &gt; returns true for objects with status property" time="0.000052666">
        </testcase>
        <testcase classname="app/utils/__tests__/misc.test.tsx" name="isRouteErrorResponse &gt; returns false for non-objects" time="0.000073458">
        </testcase>
        <testcase classname="app/utils/__tests__/misc.test.tsx" name="isRouteErrorResponse &gt; returns false for objects without status property" time="0.000090833">
        </testcase>
        <testcase classname="app/utils/__tests__/misc.test.tsx" name="isRouteErrorResponse &gt; returns false for falsy values" time="0.000059917">
        </testcase>
    </testsuite>
    <testsuite name="app/utils/__tests__/prefetchTypes.test.ts" timestamp="2025-08-11T17:20:20.437Z" hostname="Mac.HOME" tests="6" failures="0" errors="0" skipped="0" time="0.002469291">
        <testcase classname="app/utils/__tests__/prefetchTypes.test.ts" name="defaultPrefetchConfig in test environment &gt; disables all prefetching during tests" time="0.00093225">
        </testcase>
        <testcase classname="app/utils/__tests__/prefetchTypes.test.ts" name="routePrefetchOverrides in test environment &gt; disables all route overrides during tests" time="0.000459875">
        </testcase>
        <testcase classname="app/utils/__tests__/prefetchTypes.test.ts" name="getPrefetchStrategy in test environment &gt; always returns none during tests regardless of route or context" time="0.000191458">
        </testcase>
        <testcase classname="app/utils/__tests__/prefetchTypes.test.ts" name="getPrefetchStrategy in test environment &gt; returns none even with custom config during tests" time="0.000100334">
        </testcase>
        <testcase classname="app/utils/__tests__/prefetchTypes.test.ts" name="getAdaptivePrefetchStrategy in test environment &gt; always returns none during tests regardless of context" time="0.000118667">
        </testcase>
        <testcase classname="app/utils/__tests__/prefetchTypes.test.ts" name="getAdaptivePrefetchStrategy in test environment &gt; returns none even with network context during tests" time="0.000128666">
        </testcase>
    </testsuite>
    <testsuite name="app/utils/__tests__/rateLimit.server.test.ts" timestamp="2025-08-11T17:20:20.438Z" hostname="Mac.HOME" tests="24" failures="0" errors="0" skipped="0" time="0.011454333">
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; checkRateLimit &gt; should allow first request" time="0.001764833">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; checkRateLimit &gt; should track multiple requests from same identifier" time="0.000337166">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; checkRateLimit &gt; should block requests after limit exceeded" time="0.000208042">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; checkRateLimit &gt; should reset window after time passes" time="0.00028875">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; checkRateLimit &gt; should handle different identifiers separately" time="0.000159375">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; checkRateLimit &gt; should reset after block duration expires" time="0.00018575">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; checkRateLimit &gt; should use windowMs as default block duration" time="0.000141666">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; checkRateLimit &gt; should handle resetTime correctly" time="0.000186209">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; getClientIP &gt; should extract IP from cf-connecting-ip header" time="0.000782334">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; getClientIP &gt; should extract IP from x-real-ip header" time="0.000580125">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; getClientIP &gt; should extract first IP from x-forwarded-for header" time="0.000150208">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; getClientIP &gt; should prioritize cf-connecting-ip over other headers" time="0.000200666">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; getClientIP &gt; should return unknown when no IP headers present" time="0.000145209">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; createRateLimitResponse &gt; should create proper rate limit response" time="0.002435833">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; createRateLimitResponse &gt; should include proper headers without retry-after when allowed" time="0.000310125">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; createRateLimitResponse &gt; should include error message in response body" time="0.000282959">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; RATE_LIMITS configuration &gt; should have proper admin login limits" time="0.000149458">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; RATE_LIMITS configuration &gt; should have proper admin actions limits" time="0.000119958">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; RATE_LIMITS configuration &gt; should have proper user registration limits" time="0.000106958">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; memory cleanup &gt; should clean up old entries automatically" time="0.000120667">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; test environment bypass &gt; should bypass rate limiting when NODE_ENV is test" time="0.000421209">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; test environment bypass &gt; should bypass rate limiting when PLAYWRIGHT is true" time="0.001032">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; test environment bypass &gt; should bypass rate limiting with x-test-bypass header" time="0.000396916">
        </testcase>
        <testcase classname="app/utils/__tests__/rateLimit.server.test.ts" name="rateLimit.server &gt; test environment bypass &gt; should not bypass without test header" time="0.000181375">
        </testcase>
    </testsuite>
    <testsuite name="app/utils/__tests__/rbac.test.ts" timestamp="2025-08-11T17:20:20.439Z" hostname="Mac.HOME" tests="15" failures="0" errors="0" skipped="0" time="0.004828458">
        <testcase classname="app/utils/__tests__/rbac.test.ts" name="RBAC &gt; hasPermission &gt; should grant correct permissions to ADMIN" time="0.001444959">
        </testcase>
        <testcase classname="app/utils/__tests__/rbac.test.ts" name="RBAC &gt; hasPermission &gt; should grant correct permissions to MANAGER" time="0.000252625">
        </testcase>
        <testcase classname="app/utils/__tests__/rbac.test.ts" name="RBAC &gt; hasPermission &gt; should grant correct permissions to REFEREE (including matches:edit)" time="0.000280458">
        </testcase>
        <testcase classname="app/utils/__tests__/rbac.test.ts" name="RBAC &gt; hasPermission &gt; should grant read and team creation permissions to PUBLIC" time="0.000144417">
        </testcase>
        <testcase classname="app/utils/__tests__/rbac.test.ts" name="RBAC &gt; hasPermission &gt; should handle unauthenticated users" time="0.000123458">
        </testcase>
        <testcase classname="app/utils/__tests__/rbac.test.ts" name="RBAC &gt; getUIContext &gt; should return admin context for ADMIN and MANAGER" time="0.000093709">
        </testcase>
        <testcase classname="app/utils/__tests__/rbac.test.ts" name="RBAC &gt; getUIContext &gt; should return public context for REFEREE and PUBLIC" time="0.000074042">
        </testcase>
        <testcase classname="app/utils/__tests__/rbac.test.ts" name="RBAC &gt; isAdmin &gt; should identify ADMIN and MANAGER as admin users" time="0.0004085">
        </testcase>
        <testcase classname="app/utils/__tests__/rbac.test.ts" name="RBAC &gt; isAdmin &gt; should not identify REFEREE and PUBLIC as admin users" time="0.000111458">
        </testcase>
        <testcase classname="app/utils/__tests__/rbac.test.ts" name="RBAC &gt; getRoleLevel &gt; should return correct hierarchy levels" time="0.000124459">
        </testcase>
        <testcase classname="app/utils/__tests__/rbac.test.ts" name="RBAC &gt; hasRoleLevel &gt; should correctly compare role levels" time="0.000180292">
        </testcase>
        <testcase classname="app/utils/__tests__/rbac.test.ts" name="RBAC &gt; hasAnyPermission and hasAllPermissions &gt; should work with multiple permissions" time="0.000118042">
        </testcase>
        <testcase classname="app/utils/__tests__/rbac.test.ts" name="RBAC &gt; requirePermission &gt; should not throw for users with permission" time="0.00056875">
        </testcase>
        <testcase classname="app/utils/__tests__/rbac.test.ts" name="RBAC &gt; requirePermission &gt; should throw 403 for users without permission" time="0.00012775">
        </testcase>
        <testcase classname="app/utils/__tests__/rbac.test.ts" name="RBAC &gt; canAccess &gt; should be equivalent to hasPermission" time="0.000073375">
        </testcase>
    </testsuite>
    <testsuite name="app/utils/__tests__/routeUtils.test.ts" timestamp="2025-08-11T17:20:20.440Z" hostname="Mac.HOME" tests="38" failures="0" errors="0" skipped="0" time="0.01437675">
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; usePageTitle &gt; should return empty string when no matches" time="0.005369375">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; usePageTitle &gt; should return empty string when matches have no titles" time="0.000591125">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; usePageTitle &gt; should return translated title from most specific route" time="0.000890167">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; usePageTitle &gt; should fallback to less specific route when most specific has no title" time="0.00052175">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; usePageTitle &gt; should handle routes with handle but no title property" time="0.000483083">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; usePageTitle &gt; should handle single route with title" time="0.000417958">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; usePageTitle &gt; should memoize results and only recompute when dependencies change" time="0.000668375">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; usePageTitle &gt; should handle translation function changes" time="0.00138275">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; usePageTitle &gt; should handle complex nested route structures" time="0.000561375">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; usePageTitle &gt; should handle malformed route metadata gracefully" time="0.000379791">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; normalizePathname &gt; should remove trailing slashes from paths" time="0.000149208">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; normalizePathname &gt; should preserve paths without trailing slashes" time="0.000069875">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; normalizePathname &gt; should preserve root path" time="0.000052541">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; normalizePathname &gt; should handle empty strings and whitespace" time="0.00006975">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; normalizePathname &gt; should handle multiple trailing slashes" time="0.000057375">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; normalizePathname &gt; should handle complex paths" time="0.000056792">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; normalizePathname &gt; should handle paths with query-like strings (though not actual query params)" time="0.000059">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; normalizePathname &gt; should handle edge cases" time="0.000078375">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; normalizePathname &gt; route matching use cases &gt; should normalize paths consistently for route matching" time="0.000176209">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; normalizePathname &gt; route matching use cases &gt; should handle NavigationItem component use cases" time="0.00011625">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; normalizePathname &gt; performance and type safety &gt; should handle various string types" time="0.00006675">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; normalizePathname &gt; performance and type safety &gt; should be deterministic" time="0.000105625">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; validateEmail &gt; returns false for non-emails" time="0.000133625">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; validateEmail &gt; returns true for emails" time="0.000054">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; validateEmail &gt; returns false for short strings" time="0.000064375">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; validateEmail &gt; returns true for valid email formats" time="0.00006775">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; safeRedirect &gt; returns default redirect for null/undefined values" time="0.000087833">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; safeRedirect &gt; returns custom default redirect when provided" time="0.000066792">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; safeRedirect &gt; returns default redirect for non-string values" time="0.000075375">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; safeRedirect &gt; returns default redirect for unsafe redirects" time="0.000102625">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; safeRedirect &gt; returns safe relative paths" time="0.000082583">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; safeRedirect &gt; returns safe paths with query parameters" time="0.000063041">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; safeRedirect &gt; returns safe paths with hash fragments" time="0.000061292">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; capitalize &gt; capitalizes first letter and lowercases rest" time="0.000091916">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; capitalize &gt; handles empty strings" time="0.000055333">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; capitalize &gt; handles single character strings" time="0.00006375">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; capitalize &gt; handles strings with numbers and special characters" time="0.000088833">
        </testcase>
        <testcase classname="app/utils/__tests__/routeUtils.test.ts" name="route-utils &gt; capitalize &gt; handles non-English characters" time="0.000075417">
        </testcase>
    </testsuite>
    <testsuite name="app/utils/__tests__/teamCreation.server.test.ts" timestamp="2025-08-11T17:20:20.443Z" hostname="Mac.HOME" tests="9" failures="0" errors="0" skipped="0" time="0.004638542">
        <testcase classname="app/utils/__tests__/teamCreation.server.test.ts" name="teamCreation.server - createTeamFromFormData &gt; should successfully create team and send confirmation email" time="0.002079833">
            <system-out>
About to send confirmation email for team: Ajax Amsterdam

Confirmation email sent successfully for team: Ajax Amsterdam

            </system-out>
        </testcase>
        <testcase classname="app/utils/__tests__/teamCreation.server.test.ts" name="teamCreation.server - createTeamFromFormData &gt; should return validation errors when form validation fails" time="0.000240041">
        </testcase>
        <testcase classname="app/utils/__tests__/teamCreation.server.test.ts" name="teamCreation.server - createTeamFromFormData &gt; should return error when division is invalid" time="0.000128541">
        </testcase>
        <testcase classname="app/utils/__tests__/teamCreation.server.test.ts" name="teamCreation.server - createTeamFromFormData &gt; should return error when category is invalid" time="0.000108167">
        </testcase>
        <testcase classname="app/utils/__tests__/teamCreation.server.test.ts" name="teamCreation.server - createTeamFromFormData &gt; should return error when tournament not found" time="0.000106792">
        </testcase>
        <testcase classname="app/utils/__tests__/teamCreation.server.test.ts" name="teamCreation.server - createTeamFromFormData &gt; should create new team leader when not found" time="0.000303625">
            <system-out>
About to send confirmation email for team: Ajax Amsterdam

Confirmation email sent successfully for team: Ajax Amsterdam

            </system-out>
        </testcase>
        <testcase classname="app/utils/__tests__/teamCreation.server.test.ts" name="teamCreation.server - createTeamFromFormData &gt; should continue team creation even if email sending fails" time="0.000692541">
            <system-out>
About to send confirmation email for team: Ajax Amsterdam

            </system-out>
        </testcase>
        <testcase classname="app/utils/__tests__/teamCreation.server.test.ts" name="teamCreation.server - createTeamFromFormData &gt; should not send email when tournament not found for email" time="0.000186292">
        </testcase>
        <testcase classname="app/utils/__tests__/teamCreation.server.test.ts" name="teamCreation.server - createTeamFromFormData &gt; should handle team leader name with multiple spaces" time="0.000216417">
            <system-out>
About to send confirmation email for team: Ajax Amsterdam

Confirmation email sent successfully for team: Ajax Amsterdam

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="app/utils/__tests__/toastUtils.test.tsx" timestamp="2025-08-11T17:20:20.443Z" hostname="Mac.HOME" tests="33" failures="0" errors="0" skipped="0" time="0.013684542">
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; toast.success &gt; should create a success toast with title only" time="0.00176975">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; toast.success &gt; should create a success toast with title and description" time="0.000247">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; toast.success &gt; should create a success toast with custom duration" time="0.000164292">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; toast.success &gt; should handle priority option" time="0.000160708">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; toast.error &gt; should create an error toast with title only" time="0.000142459">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; toast.error &gt; should create an error toast with title and description" time="0.000146667">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; toast.info &gt; should create an info toast with title only" time="0.0001235">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; toast.info &gt; should create an info toast with title and description" time="0.00012125">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; toast.warning &gt; should create a warning toast with title only" time="0.000154167">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; toast.warning &gt; should create a warning toast with title and description" time="0.000179209">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Default options &gt; should use default duration when no duration is provided" time="0.000107458">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Default options &gt; should use custom duration when provided" time="0.000103833">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Default options &gt; should handle undefined description" time="0.000097125">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Function signatures &gt; should have correct function signatures for all toast types" time="0.000613792">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Return values &gt; should return the result of sonner toast methods" time="0.000193708">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Return values &gt; should return unique values for different toast types with same message" time="0.000133083">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Error-specific toast types &gt; should handle validation errors" time="0.000121417">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Error-specific toast types &gt; should handle network errors" time="0.000095625">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Error-specific toast types &gt; should handle permission errors" time="0.000093125">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Error-specific toast types &gt; should handle server errors" time="0.00009225">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Error-specific toast types &gt; should handle client errors" time="0.000090417">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Error-specific toast types &gt; should handle unknown errors" time="0.000092917">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Helper functions &gt; should create error toast with createErrorToast" time="0.004900042">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Helper functions &gt; should show validation error with showValidationError" time="0.000275166">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Helper functions &gt; should show network error with showNetworkError" time="0.000116166">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Helper functions &gt; should show permission error with showPermissionError" time="0.000091792">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Helper functions &gt; should show server error with showServerError" time="0.000083875">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Performance and Memory Management &gt; should handle rapid toast creation without memory leaks" time="0.000678209">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Performance and Memory Management &gt; should handle rapid different toast types correctly" time="0.000226792">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Performance and Memory Management &gt; should clean up toast cache after timeout" time="0.000867833">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Performance and Memory Management &gt; should handle toast dismissal and cache cleanup" time="0.000321833">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Performance and Memory Management &gt; should handle burst toast creation with different messages" time="0.000159208">
        </testcase>
        <testcase classname="app/utils/__tests__/toastUtils.test.tsx" name="toastUtils &gt; Performance and Memory Management &gt; should handle mixed priority toasts efficiently" time="0.000165291">
        </testcase>
    </testsuite>
    <testsuite name="app/components/Panel/__tests__/Panel.test.tsx" timestamp="2025-08-11T17:20:20.445Z" hostname="Mac.HOME" tests="39" failures="0" errors="0" skipped="0" time="0.062632292">
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Basic Rendering &gt; should render with minimal props" time="0.010254">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Basic Rendering &gt; should render title when provided" time="0.005055833">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Basic Rendering &gt; should render subtitle when provided" time="0.0027905">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Basic Rendering &gt; should render icon when provided" time="0.003892416">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Basic Rendering &gt; should render children when provided" time="0.006295833">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Basic Rendering &gt; should not render optional elements when props not provided" time="0.001071334">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Color Variants &gt; should apply brand color classes by default" time="0.000482917">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Color Variants &gt; should apply emerald color classes" time="0.000470959">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Color Variants &gt; should apply blue color classes" time="0.000387125">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Color Variants &gt; should apply teal color classes" time="0.000410125">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Color Variants &gt; should apply red color classes" time="0.000324209">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Panel Variants &gt; should apply content-panel variant by default" time="0.000295042">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Panel Variants &gt; should apply container variant classes" time="0.000289375">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Panel Variants &gt; should apply background variant classes" time="0.000287167">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Panel Variants &gt; should apply hover variant classes" time="0.00031725">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Panel Variants &gt; should apply dashboard-panel variant classes" time="0.004665209">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Icon Color Logic &gt; should use panel color for icon when no iconColor specified" time="0.000717708">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Icon Color Logic &gt; should use specified iconColor over panel color" time="0.000490083">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Icon Color Logic &gt; should use iconColor for children when no childrenIconColor specified" time="0.000408167">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Icon Color Logic &gt; should use specified childrenIconColor over iconColor" time="0.000374458">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Special Features &gt; should render panel number when provided" time="0.000410167">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Special Features &gt; should apply disabled styling to panel number when disabled=true" time="0.000421958">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Special Features &gt; should render glow effect when showGlow=true" time="0.000336708">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Special Features &gt; should apply disabled styling when disabled=true" time="0.000283167">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Special Features &gt; should merge custom className with generated classes" time="0.000304834">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Language Support &gt; should apply latin-title class for Arabic language" time="0.000892959">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Language Support &gt; should not apply latin-title class for English language" time="0.000646458">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Brand Color Special Handling &gt; should apply special brand text color to subtitle" time="0.000469417">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Brand Color Special Handling &gt; should not apply special brand text color for other colors" time="0.009308083">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Content Layout &gt; should organize content in correct order: icon, title, subtitle, children" time="0.005720542">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Content Layout &gt; should organize dashboard variant content in horizontal layout" time="0.000890625">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Content Layout &gt; should apply correct spacing classes" time="0.000546333">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Content Layout &gt; should apply padding for hover variant in content area" time="0.000295541">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Content Layout &gt; should not apply extra padding for non-hover variants" time="0.000320125">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Edge Cases &gt; should handle empty string title" time="0.000269625">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Edge Cases &gt; should handle empty string subtitle" time="0.000265333">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Edge Cases &gt; should handle panelNumber as string" time="0.000290041">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Edge Cases &gt; should handle zero as panelNumber" time="0.00031125">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/Panel.test.tsx" name="Panel Component &gt; Edge Cases &gt; should not render glow testId when no main testId provided" time="0.000311458">
        </testcase>
    </testsuite>
    <testsuite name="app/components/Panel/__tests__/panel.variants.test.ts" timestamp="2025-08-11T17:20:20.448Z" hostname="Mac.HOME" tests="22" failures="0" errors="0" skipped="0" time="0.003660375">
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; panelVariants &gt; should generate correct classes for content-panel variant" time="0.000868708">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; panelVariants &gt; should generate correct classes for dashboard-panel variant" time="0.000202709">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; panelVariants &gt; should generate correct classes for form-panel variant" time="0.0000975">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; panelVariants &gt; should generate correct classes for layer variants" time="0.000182">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; panelVariants &gt; should apply color variants correctly" time="0.000140041">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; panelVariants &gt; should use correct default variants" time="0.000096333">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; panelGlowVariants &gt; should generate correct base classes with RTL support" time="0.000133791">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; panelGlowVariants &gt; should apply color variants correctly" time="0.000073708">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; panelGlowVariants &gt; should use correct default color" time="0.000057125">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; dashboardIconVariants &gt; should generate correct base classes" time="0.00010975">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; dashboardIconVariants &gt; should apply color variants correctly" time="0.000073958">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; dashboardIconVariants &gt; should use correct default color" time="0.000045959">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; dashboardIconVariants &gt; should support all color variants" time="0.000185292">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; RTL Support &gt; should have RTL-aware glow positioning" time="0.000062">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; RTL Support &gt; should maintain consistent positioning structure" time="0.000136458">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; Dashboard Variant Integration &gt; should combine panel and dashboard icon variants correctly" time="0.000075334">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; Dashboard Variant Integration &gt; should support independent color selection for panel and icon" time="0.000067166">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; panelNumberVariants (basePanelNumberVariants) &gt; should generate correct base classes" time="0.000162667">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; panelNumberVariants (basePanelNumberVariants) &gt; should apply color variants correctly" time="0.000061333">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; panelNumberVariants (basePanelNumberVariants) &gt; should apply disabled variant with gray styling" time="0.000061584">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; panelNumberVariants (basePanelNumberVariants) &gt; should use correct default variants" time="0.000074917">
        </testcase>
        <testcase classname="app/components/Panel/__tests__/panel.variants.test.ts" name="Panel Variants (CVA) &gt; panelNumberVariants (basePanelNumberVariants) &gt; should override color with disabled styling when disabled=true" time="0.000066">
        </testcase>
    </testsuite>
    <testsuite name="app/components/TeamChip/__tests__/TeamChip.test.tsx" timestamp="2025-08-11T17:20:20.449Z" hostname="Mac.HOME" tests="28" failures="0" errors="0" skipped="0" time="0.035391">
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Basic Rendering &gt; should render team name correctly" time="0.01123175">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Basic Rendering &gt; should render as a div when no onClick or showActions" time="0.001157708">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Basic Rendering &gt; should apply custom className" time="0.00082475">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Click Functionality &gt; should render as button when onClick is provided" time="0.002864834">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Click Functionality &gt; should call onClick when clicked" time="0.002612">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Click Functionality &gt; should add cursor-pointer class when onClick is provided" time="0.001486625">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Admin Actions &gt; should render as div with button role when showActions is true" time="0.00135575">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Admin Actions &gt; should render delete button when showActions and onDelete are provided" time="0.000774">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Admin Actions &gt; should call onDelete when delete button is clicked" time="0.000736667">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Admin Actions &gt; should stop propagation on delete button click" time="0.000624709">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Admin Actions &gt; should not render delete button when showActions is true but onDelete is not provided" time="0.000352583">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Admin Actions &gt; should apply admin chip classes when showActions and onDelete are provided" time="0.0003775">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Keyboard Navigation &gt; should handle Enter key on admin chip" time="0.0009185">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Keyboard Navigation &gt; should handle Space key on admin chip" time="0.00064275">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Keyboard Navigation &gt; should not handle other keys on admin chip" time="0.000582792">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Keyboard Navigation &gt; should call onClick handler on Enter and Space keys" time="0.000682333">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Accessibility &gt; should have proper accessibility attributes for button variant" time="0.001178375">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Accessibility &gt; should have proper accessibility attributes for admin variant" time="0.000842958">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Accessibility &gt; should have proper delete button accessibility" time="0.000540542">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; RTL Support &gt; should apply latin text class for team names" time="0.00048825">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; RTL Support &gt; should apply correct chip classes for admin mode" time="0.001708042">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; CSS Classes &gt; should have correct base CSS classes" time="0.0004035">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; CSS Classes &gt; should have hover and focus classes when interactive" time="0.000456">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; CSS Classes &gt; should have default padding when not in admin mode" time="0.00028125">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Team Data Variations &gt; should handle different team names" time="0.000344666">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Team Data Variations &gt; should handle special characters in team names" time="0.000368375">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Team Data Variations &gt; should truncate long team names" time="0.0003205">
        </testcase>
        <testcase classname="app/components/TeamChip/__tests__/TeamChip.test.tsx" name="TeamChip Component &gt; Icon Rendering &gt; should render close icon in delete button" time="0.000367375">
        </testcase>
    </testsuite>
    <testsuite name="app/components/ActionLinkPanel/__tests__/ActionLinkPanel.test.tsx" timestamp="2025-08-11T17:20:20.450Z" hostname="Mac.HOME" tests="18" failures="0" errors="0" skipped="0" time="0.057492625">
        <testcase classname="app/components/ActionLinkPanel/__tests__/ActionLinkPanel.test.tsx" name="ActionLinkPanel Component Integration &gt; Component Architecture &gt; should render PanelBackground with correct props" time="0.008667167">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/ActionLinkPanel.test.tsx" name="ActionLinkPanel Component Integration &gt; Component Architecture &gt; should render base PanelLayer with correct props" time="0.001420667">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/ActionLinkPanel.test.tsx" name="ActionLinkPanel Component Integration &gt; Component Architecture &gt; should render hover PanelLayer when hoverColor provided" time="0.000952416">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/ActionLinkPanel.test.tsx" name="ActionLinkPanel Component Integration &gt; Component Architecture &gt; should not render hover PanelLayer when no hoverColor" time="0.000678625">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/ActionLinkPanel.test.tsx" name="ActionLinkPanel Component Integration &gt; Component Architecture &gt; should pass children to both layers when hoverColor provided" time="0.014109083">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/ActionLinkPanel.test.tsx" name="ActionLinkPanel Component Integration &gt; Router Integration &gt; should render as div when no &quot;to&quot; prop provided" time="0.001247042">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/ActionLinkPanel.test.tsx" name="ActionLinkPanel Component Integration &gt; Router Integration &gt; should render as Link when &quot;to&quot; prop provided" time="0.001831667">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/ActionLinkPanel.test.tsx" name="ActionLinkPanel Component Integration &gt; Router Integration &gt; should not apply onClick when &quot;to&quot; prop provided" time="0.0007695">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/ActionLinkPanel.test.tsx" name="ActionLinkPanel Component Integration &gt; Event Handling &gt; should handle onClick when no &quot;to&quot; prop" time="0.00143875">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/ActionLinkPanel.test.tsx" name="ActionLinkPanel Component Integration &gt; Event Handling &gt; should apply button role when onClick provided" time="0.000714625">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/ActionLinkPanel.test.tsx" name="ActionLinkPanel Component Integration &gt; Event Handling &gt; should not apply button role when no onClick" time="0.000491209">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/ActionLinkPanel.test.tsx" name="ActionLinkPanel Component Integration &gt; Border Color Logic &gt; should apply main border color" time="0.000422959">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/ActionLinkPanel.test.tsx" name="ActionLinkPanel Component Integration &gt; Border Color Logic &gt; should apply hover border color when hoverColor provided" time="0.000502708">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/ActionLinkPanel.test.tsx" name="ActionLinkPanel Component Integration &gt; Border Color Logic &gt; should not apply hover border when no hoverColor" time="0.000393916">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/ActionLinkPanel.test.tsx" name="ActionLinkPanel Component Integration &gt; Base Styling &gt; should apply core panel classes" time="0.01893625">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/ActionLinkPanel.test.tsx" name="ActionLinkPanel Component Integration &gt; Base Styling &gt; should render both base and hover layers when hoverColor provided" time="0.000956208">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/ActionLinkPanel.test.tsx" name="ActionLinkPanel Component Integration &gt; Edge Cases &gt; should handle missing optional props gracefully" time="0.002409">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/ActionLinkPanel.test.tsx" name="ActionLinkPanel Component Integration &gt; Edge Cases &gt; should handle empty strings" time="0.000589416">
        </testcase>
    </testsuite>
    <testsuite name="app/components/ActionLinkPanel/__tests__/ErrorBoundary.test.tsx" timestamp="2025-08-11T17:20:20.451Z" hostname="Mac.HOME" tests="2" failures="0" errors="0" skipped="0" time="0.027454167">
        <testcase classname="app/components/ActionLinkPanel/__tests__/ErrorBoundary.test.tsx" name="ErrorBoundary &gt; should render fallback UI when an error occurs" time="0.025463">
            <system-err>
[Console Error]: In HTML, %s cannot be a descendant of &lt;%s&gt;.
This will cause a hydration error.%s
[Console Error]: %o

%s

%s

[Console Error]: Uncaught error in ActionLinkPanel:

            </system-err>
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/ErrorBoundary.test.tsx" name="ErrorBoundary &gt; should render children when no error occurs" time="0.000881583">
        </testcase>
    </testsuite>
    <testsuite name="app/components/ActionLinkPanel/__tests__/PanelBackground.test.tsx" timestamp="2025-08-11T17:20:20.452Z" hostname="Mac.HOME" tests="16" failures="0" errors="0" skipped="0" time="0.016157458">
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelBackground.test.tsx" name="PanelBackground Component &gt; Basic Rendering &gt; should render with background color" time="0.007160459">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelBackground.test.tsx" name="PanelBackground Component &gt; Basic Rendering &gt; should apply absolute positioning classes" time="0.00077725">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelBackground.test.tsx" name="PanelBackground Component &gt; Basic Rendering &gt; should apply custom className when provided" time="0.000625208">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelBackground.test.tsx" name="PanelBackground Component &gt; Basic Rendering &gt; should apply data-testid when provided" time="0.000536209">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelBackground.test.tsx" name="PanelBackground Component &gt; Basic Rendering &gt; should not have data-testid when not provided" time="0.002044625">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelBackground.test.tsx" name="PanelBackground Component &gt; Background Color Variations &gt; should handle Tailwind gradient backgrounds" time="0.001220667">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelBackground.test.tsx" name="PanelBackground Component &gt; Background Color Variations &gt; should handle solid color backgrounds" time="0.000395167">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelBackground.test.tsx" name="PanelBackground Component &gt; Background Color Variations &gt; should handle transparent backgrounds" time="0.000308666">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelBackground.test.tsx" name="PanelBackground Component &gt; Background Color Variations &gt; should handle opacity backgrounds" time="0.000293583">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelBackground.test.tsx" name="PanelBackground Component &gt; Class Combination &gt; should combine all classes correctly" time="0.000429417">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelBackground.test.tsx" name="PanelBackground Component &gt; Class Combination &gt; should not break with empty className" time="0.000289708">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelBackground.test.tsx" name="PanelBackground Component &gt; Class Combination &gt; should handle undefined className gracefully" time="0.000244833">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelBackground.test.tsx" name="PanelBackground Component &gt; Accessibility &gt; should be a generic div element" time="0.000279208">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelBackground.test.tsx" name="PanelBackground Component &gt; Accessibility &gt; should not have any interactive elements" time="0.000290791">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelBackground.test.tsx" name="PanelBackground Component &gt; Edge Cases &gt; should handle very long background class names" time="0.000255792">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelBackground.test.tsx" name="PanelBackground Component &gt; Edge Cases &gt; should handle empty background color gracefully" time="0.000217458">
        </testcase>
    </testsuite>
    <testsuite name="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" timestamp="2025-08-11T17:20:20.453Z" hostname="Mac.HOME" tests="28" failures="0" errors="0" skipped="0" time="0.045345084">
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Basic Rendering &gt; should render title, description, and icon" time="0.011873667">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Basic Rendering &gt; should render children when provided" time="0.0013575">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Basic Rendering &gt; should apply custom className" time="0.000942917">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Basic Rendering &gt; should apply data-testid when provided" time="0.000672834">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Color Handling &gt; should use mainColor for base layer (isHover=false)" time="0.000756417">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Color Handling &gt; should use hoverColor for hover layer when provided" time="0.000709417">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Color Handling &gt; should fallback to mainColor when isHover=true but no hoverColor" time="0.000565458">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Color Handling &gt; should use slate gradient for brand color" time="0.000545458">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Icon Color Logic &gt; should handle ColorAccent iconColor for base layer" time="0.004058">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Icon Color Logic &gt; should handle brand iconColor for base layer" time="0.001079">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Icon Color Logic &gt; should use hover logic for hover layer with non-brand color" time="0.000627917">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Icon Color Logic &gt; should use hover logic for hover layer with brand color" time="0.000545958">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Content Layout &gt; should apply correct content container styling" time="0.000602084">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Content Layout &gt; should organize content in correct order" time="0.003392583">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Content Layout &gt; should apply icon container styling" time="0.000855625">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; RTL Support &gt; should apply Latin title class for Arabic language" time="0.001122875">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; RTL Support &gt; should not apply Latin title class for English language" time="0.00090875">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Background and Glow &gt; should render background with correct gradient" time="0.000528959">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Background and Glow &gt; should render glow element" time="0.000482125">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Title and Description Styling &gt; should apply title classes" time="0.00430075">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Title and Description Styling &gt; should apply description classes" time="0.000712958">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Transition Wrapper Classes &gt; should apply base layer transition classes when isHover=false" time="0.000592666">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Transition Wrapper Classes &gt; should apply hover layer transition classes when isHover=true" time="0.000497292">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Transition Wrapper Classes &gt; should not apply base layer fade-out when no hoverColor provided" time="0.0004545">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Transition Wrapper Classes &gt; should generate correct wrapper test IDs" time="0.000398208">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Edge Cases &gt; should handle empty title" time="0.000467042">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Edge Cases &gt; should handle empty description" time="0.000700083">
        </testcase>
        <testcase classname="app/components/ActionLinkPanel/__tests__/PanelLayer.test.tsx" name="PanelLayer Component &gt; Edge Cases &gt; should handle missing optional props" time="0.0007515">
        </testcase>
    </testsuite>
    <testsuite name="app/components/ToastMessage/__tests__/ToastCloseButton.test.tsx" timestamp="2025-08-11T17:20:20.454Z" hostname="Mac.HOME" tests="18" failures="0" errors="0" skipped="0" time="0.035459916">
        <testcase classname="app/components/ToastMessage/__tests__/ToastCloseButton.test.tsx" name="ToastCloseButton Component &gt; Basic Rendering &gt; should render close button with icon" time="0.010299292">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastCloseButton.test.tsx" name="ToastCloseButton Component &gt; Basic Rendering &gt; should render close button even when onClose is not provided" time="0.001346">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastCloseButton.test.tsx" name="ToastCloseButton Component &gt; ARIA Labels by Toast Type &gt; should have correct aria-label for success toast" time="0.001085209">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastCloseButton.test.tsx" name="ToastCloseButton Component &gt; ARIA Labels by Toast Type &gt; should have correct aria-label for error toast" time="0.000799583">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastCloseButton.test.tsx" name="ToastCloseButton Component &gt; ARIA Labels by Toast Type &gt; should have correct aria-label for info toast" time="0.000830625">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastCloseButton.test.tsx" name="ToastCloseButton Component &gt; ARIA Labels by Toast Type &gt; should have correct aria-label for warning toast" time="0.00068025">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastCloseButton.test.tsx" name="ToastCloseButton Component &gt; Click Handling &gt; should call onClose when button is clicked" time="0.001727334">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastCloseButton.test.tsx" name="ToastCloseButton Component &gt; Click Handling &gt; should not throw error when clicked without onClose handler" time="0.00202225">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastCloseButton.test.tsx" name="ToastCloseButton Component &gt; Click Handling &gt; should be keyboard accessible" time="0.0028065">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastCloseButton.test.tsx" name="ToastCloseButton Component &gt; Icon Styling &gt; should render close icon with correct attributes" time="0.000836458">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastCloseButton.test.tsx" name="ToastCloseButton Component &gt; Icon Styling &gt; should maintain consistent icon styling across all types" time="0.00156775">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastCloseButton.test.tsx" name="ToastCloseButton Component &gt; Button Styling &gt; should have correct button styling for each toast type" time="0.002072958">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastCloseButton.test.tsx" name="ToastCloseButton Component &gt; Type Variations &gt; should render correctly for all toast types" time="0.004128875">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastCloseButton.test.tsx" name="ToastCloseButton Component &gt; Type Variations &gt; should update aria-label when type changes" time="0.001684375">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastCloseButton.test.tsx" name="ToastCloseButton Component &gt; Accessibility &gt; should be focusable" time="0.000593875">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastCloseButton.test.tsx" name="ToastCloseButton Component &gt; Accessibility &gt; should have proper button role" time="0.000430542">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastCloseButton.test.tsx" name="ToastCloseButton Component &gt; Accessibility &gt; should be clickable with mouse" time="0.000628458">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastCloseButton.test.tsx" name="ToastCloseButton Component &gt; Performance &gt; should memoize aria-label based on type" time="0.000754667">
        </testcase>
    </testsuite>
    <testsuite name="app/components/ToastMessage/__tests__/ToastIcon.test.tsx" timestamp="2025-08-11T17:20:20.455Z" hostname="Mac.HOME" tests="13" failures="0" errors="0" skipped="0" time="0.027368417">
        <testcase classname="app/components/ToastMessage/__tests__/ToastIcon.test.tsx" name="ToastIcon Component &gt; Success Icon &gt; should render success icon with correct styling and attributes" time="0.007842167">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastIcon.test.tsx" name="ToastIcon Component &gt; Success Icon &gt; should render success icon with background wrapper" time="0.001030833">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastIcon.test.tsx" name="ToastIcon Component &gt; Error Icon &gt; should render error icon with correct styling and attributes" time="0.00077625">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastIcon.test.tsx" name="ToastIcon Component &gt; Error Icon &gt; should render error icon with background wrapper" time="0.002410375">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastIcon.test.tsx" name="ToastIcon Component &gt; Info Icon &gt; should render info icon with correct styling and attributes" time="0.001594291">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastIcon.test.tsx" name="ToastIcon Component &gt; Info Icon &gt; should render info icon with background wrapper" time="0.000587875">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastIcon.test.tsx" name="ToastIcon Component &gt; Warning Icon &gt; should render warning icon with correct styling and attributes" time="0.000441834">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastIcon.test.tsx" name="ToastIcon Component &gt; Warning Icon &gt; should render warning icon with background wrapper" time="0.000364083">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastIcon.test.tsx" name="ToastIcon Component &gt; Accessibility &gt; should have aria-hidden attribute on all icon wrappers" time="0.001094584">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastIcon.test.tsx" name="ToastIcon Component &gt; Icon Variations &gt; should render different icons for different types" time="0.007720125">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastIcon.test.tsx" name="ToastIcon Component &gt; Icon Variations &gt; should maintain consistent structure across all types" time="0.001058542">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastIcon.test.tsx" name="ToastIcon Component &gt; Error Type Variations &gt; should render error icon for all error types" time="0.001192209">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastIcon.test.tsx" name="ToastIcon Component &gt; Error Type Variations &gt; should render warning icon for validation type" time="0.000291583">
        </testcase>
    </testsuite>
    <testsuite name="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" timestamp="2025-08-11T17:20:20.456Z" hostname="Mac.HOME" tests="22" failures="0" errors="0" skipped="0" time="0.028137625">
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Basic Rendering &gt; should render toast message with title" time="0.008882292">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Basic Rendering &gt; should render toast message with title and description" time="0.001372375">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Basic Rendering &gt; should not render description when not provided" time="0.000912459">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Toast Types &gt; should render success toast with correct styling" time="0.00084175">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Toast Types &gt; should render error toast with correct styling" time="0.0006955">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Toast Types &gt; should render info toast with correct styling" time="0.002519167">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Toast Types &gt; should render warning toast with correct styling" time="0.001468042">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Icons &gt; should render icons for all toast types" time="0.001997417">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Close Button &gt; should render close button when onClose is provided" time="0.000613125">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Close Button &gt; should call onClose when close button is clicked" time="0.001575042">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Close Button &gt; should render close button even when onClose is not provided" time="0.000451667">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Close Button &gt; should have correct aria-label for each toast type" time="0.001194625">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Base Styling &gt; should have correct base CSS classes" time="0.000439458">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Base Styling &gt; should have proper structure with title and description" time="0.0004785">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Accessibility &gt; should have proper close button accessibility" time="0.000340167">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Accessibility &gt; should be keyboard accessible" time="0.000688666">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Content Variations &gt; should handle long titles gracefully" time="0.00044725">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Content Variations &gt; should handle long descriptions gracefully" time="0.000462458">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Content Variations &gt; should handle special characters in title and description" time="0.000471625">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Content Variations &gt; should handle empty descriptions gracefully" time="0.000425916">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Component Integration &gt; should work with all required props" time="0.000512667">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/ToastMessage.test.tsx" name="ToastMessage Component &gt; Component Integration &gt; should work with minimal props" time="0.00044325">
        </testcase>
    </testsuite>
    <testsuite name="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" timestamp="2025-08-11T17:20:20.458Z" hostname="Mac.HOME" tests="21" failures="0" errors="0" skipped="0" time="0.004544333">
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; toastMessageVariants &gt; should generate correct base classes" time="0.000943833">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; toastMessageVariants &gt; should generate correct success variant classes" time="0.000166375">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; toastMessageVariants &gt; should generate correct error variant classes" time="0.000156708">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; toastMessageVariants &gt; should generate correct info variant classes" time="0.000120458">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; toastMessageVariants &gt; should generate correct warning variant classes" time="0.000128541">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; toastMessageVariants &gt; should use default variant when no type is provided" time="0.000121708">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; toastMessageVariants &gt; should handle all toast types correctly" time="0.000160709">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; toastIconVariants &gt; should generate correct base classes" time="0.000112125">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; toastIconVariants &gt; should add background classes when hasBackground is true" time="0.000091583">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; toastIconVariants &gt; should not add background classes when hasBackground is false" time="0.000127375">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; toastIconVariants &gt; should use default variant when no hasBackground is provided" time="0.000080958">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; toastIconVariants &gt; should combine base classes with variant classes correctly" time="0.000100708">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; toastCloseButtonVariants &gt; should generate correct base classes" time="0.000114292">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; toastCloseButtonVariants &gt; should generate correct text color for all toast types" time="0.000056541">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; toastCloseButtonVariants &gt; should use default variant when no type is provided" time="0.000055875">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; toastCloseButtonVariants &gt; should combine base classes with variant classes correctly" time="0.000107166">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; Variant Combinations &gt; should handle all valid variant combinations" time="0.000269625">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; Variant Combinations &gt; should generate consistent class strings" time="0.000127042">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; Variant Combinations &gt; should generate different class strings for different variants" time="0.00029175">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; Type Safety &gt; should accept valid ToastType values" time="0.000479458">
        </testcase>
        <testcase classname="app/components/ToastMessage/__tests__/toastMessage.variants.test.ts" name="Toast Message Variants &gt; Type Safety &gt; should handle undefined values gracefully" time="0.000074333">
        </testcase>
    </testsuite>
    <testsuite name="app/components/ToggleChip/__tests__/ToggleChip.test.tsx" timestamp="2025-08-11T17:20:20.459Z" hostname="Mac.HOME" tests="15" failures="0" errors="0" skipped="0" time="0.027971959">
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChip.test.tsx" name="ToggleChip &gt; Basic Functionality &gt; should render with correct label" time="0.012831875">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChip.test.tsx" name="ToggleChip &gt; Basic Functionality &gt; should call onToggle when clicked" time="0.005311334">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChip.test.tsx" name="ToggleChip &gt; Basic Functionality &gt; should not call onToggle when disabled" time="0.001333375">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChip.test.tsx" name="ToggleChip &gt; Basic Functionality &gt; should apply custom className" time="0.001272375">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChip.test.tsx" name="ToggleChip &gt; Basic Functionality &gt; should apply custom data-testid" time="0.000832917">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChip.test.tsx" name="ToggleChip &gt; Selected State &gt; should show as checked when selected" time="0.001026666">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChip.test.tsx" name="ToggleChip &gt; Selected State &gt; should show as unchecked when not selected" time="0.000670584">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChip.test.tsx" name="ToggleChip &gt; Disabled State &gt; should disable checkbox when disabled" time="0.000629583">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChip.test.tsx" name="ToggleChip &gt; Disabled State &gt; should enable checkbox when not disabled" time="0.00059">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChip.test.tsx" name="ToggleChip &gt; Color Variants &gt; should apply indigo color styling" time="0.000485166">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChip.test.tsx" name="ToggleChip &gt; Color Variants &gt; should apply fuchsia color styling" time="0.0004105">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChip.test.tsx" name="ToggleChip &gt; Color Variants &gt; should apply selected indigo styling" time="0.000386625">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChip.test.tsx" name="ToggleChip &gt; Color Variants &gt; should apply selected fuchsia styling" time="0.000368959">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChip.test.tsx" name="ToggleChip &gt; Accessibility &gt; should render checkbox element" time="0.000474125">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChip.test.tsx" name="ToggleChip &gt; Accessibility &gt; should hide checkbox visually but keep it accessible" time="0.000534541">
        </testcase>
    </testsuite>
    <testsuite name="app/components/ToggleChip/__tests__/ToggleChipGroup.test.tsx" timestamp="2025-08-11T17:20:20.460Z" hostname="Mac.HOME" tests="15" failures="0" errors="0" skipped="0" time="0.062689875">
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipGroup.test.tsx" name="ToggleChipGroup &gt; renders all toggle chips" time="0.041716166">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipGroup.test.tsx" name="ToggleChipGroup &gt; uses correct labels for divisions" time="0.001545875">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipGroup.test.tsx" name="ToggleChipGroup &gt; uses correct labels for categories" time="0.000945834">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipGroup.test.tsx" name="ToggleChipGroup &gt; calls onToggle when chip is clicked" time="0.003711125">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipGroup.test.tsx" name="ToggleChipGroup &gt; renders selected chips correctly" time="0.003781209">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipGroup.test.tsx" name="ToggleChipGroup &gt; disables all chips when disabled prop is true" time="0.001510583">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipGroup.test.tsx" name="ToggleChipGroup &gt; uses correct test ids for divisions" time="0.00081275">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipGroup.test.tsx" name="ToggleChipGroup &gt; uses correct test ids for categories" time="0.000583958">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipGroup.test.tsx" name="ToggleChipGroup &gt; applies custom className" time="0.000798375">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipGroup.test.tsx" name="ToggleChipGroup &gt; applies correct grid layout classes" time="0.000935875">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipGroup.test.tsx" name="ToggleChipGroup &gt; passes correct color to individual chips" time="0.001377">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipGroup.test.tsx" name="ToggleChipGroup &gt; handles empty items array" time="0.0002795">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipGroup.test.tsx" name="ToggleChipGroup &gt; handles different languages" time="0.000719833">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipGroup.test.tsx" name="ToggleChipGroup &gt; maintains selection state correctly" time="0.00205675">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipGroup.test.tsx" name="ToggleChipGroup &gt; handles mixed selection states" time="0.001115167">
        </testcase>
    </testsuite>
    <testsuite name="app/components/ToggleChip/__tests__/ToggleChipsField.test.tsx" timestamp="2025-08-11T17:20:20.461Z" hostname="Mac.HOME" tests="14" failures="0" errors="0" skipped="0" time="0.048857958">
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipsField.test.tsx" name="ToggleChipsField &gt; renders label correctly" time="0.012882334">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipsField.test.tsx" name="ToggleChipsField &gt; renders all toggle chips" time="0.001619583">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipsField.test.tsx" name="ToggleChipsField &gt; shows success status when items are selected and required" time="0.002338584">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipsField.test.tsx" name="ToggleChipsField &gt; shows error status when no items selected and required" time="0.001877917">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipsField.test.tsx" name="ToggleChipsField &gt; shows neutral status when disabled" time="0.007544125">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipsField.test.tsx" name="ToggleChipsField &gt; shows neutral status for optional field with no selection" time="0.001198708">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipsField.test.tsx" name="ToggleChipsField &gt; calls onToggle when chip is clicked" time="0.003814042">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipsField.test.tsx" name="ToggleChipsField &gt; renders selected chips correctly" time="0.005309333">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipsField.test.tsx" name="ToggleChipsField &gt; disables all chips when disabled prop is true" time="0.006211833">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipsField.test.tsx" name="ToggleChipsField &gt; renders error message when provided" time="0.002329959">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipsField.test.tsx" name="ToggleChipsField &gt; uses correct test ids for divisions" time="0.0009115">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipsField.test.tsx" name="ToggleChipsField &gt; uses correct test ids for categories" time="0.0006235">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipsField.test.tsx" name="ToggleChipsField &gt; applies custom className" time="0.000754541">
        </testcase>
        <testcase classname="app/components/ToggleChip/__tests__/ToggleChipsField.test.tsx" name="ToggleChipsField &gt; uses correct language for label generation" time="0.000670833">
        </testcase>
    </testsuite>
    <testsuite name="app/components/auth/__tests__/SignIn.test.tsx" timestamp="2025-08-11T17:20:20.462Z" hostname="Mac.HOME" tests="15" failures="0" errors="0" skipped="0" time="0.056945083">
        <testcase classname="app/components/auth/__tests__/SignIn.test.tsx" name="SignIn Component &gt; renders sign in form with all required fields" time="0.018950916">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignIn.test.tsx" name="SignIn Component &gt; shows loading state when submitting" time="0.003342">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignIn.test.tsx" name="SignIn Component &gt; displays email validation error" time="0.002378708">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignIn.test.tsx" name="SignIn Component &gt; displays password validation error" time="0.002221375">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignIn.test.tsx" name="SignIn Component &gt; shows registration success message when registered=true" time="0.003119292">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignIn.test.tsx" name="SignIn Component &gt; pre-fills email from registration" time="0.003137875">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignIn.test.tsx" name="SignIn Component &gt; handles controlled input changes" time="0.009602583">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignIn.test.tsx" name="SignIn Component &gt; includes redirect parameter in hidden input" time="0.002050209">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignIn.test.tsx" name="SignIn Component &gt; has proper form attributes" time="0.001960125">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignIn.test.tsx" name="SignIn Component &gt; includes link to signup page" time="0.001984875">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignIn.test.tsx" name="SignIn Component &gt; preserves search params in signup link" time="0.001668167">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignIn.test.tsx" name="SignIn Component &gt; has proper accessibility attributes" time="0.001744583">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignIn.test.tsx" name="SignIn Component &gt; has correct input types and autocomplete attributes" time="0.001335667">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignIn.test.tsx" name="SignIn Component &gt; focuses email input by default" time="0.001312042">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignIn.test.tsx" name="SignIn Component &gt; marks required fields as required" time="0.001393917">
        </testcase>
    </testsuite>
    <testsuite name="app/components/auth/__tests__/SignUp.test.tsx" timestamp="2025-08-11T17:20:20.462Z" hostname="Mac.HOME" tests="16" failures="0" errors="0" skipped="0" time="0.05842525">
        <testcase classname="app/components/auth/__tests__/SignUp.test.tsx" name="SignUp Component &gt; renders sign up form with all required fields" time="0.019265667">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignUp.test.tsx" name="SignUp Component &gt; shows loading state when submitting" time="0.004226458">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignUp.test.tsx" name="SignUp Component &gt; displays first name validation error" time="0.003409209">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignUp.test.tsx" name="SignUp Component &gt; displays last name validation error" time="0.0021965">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignUp.test.tsx" name="SignUp Component &gt; displays email validation error" time="0.002766417">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignUp.test.tsx" name="SignUp Component &gt; displays password validation error" time="0.002079625">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignUp.test.tsx" name="SignUp Component &gt; displays multiple validation errors simultaneously" time="0.002429167">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignUp.test.tsx" name="SignUp Component &gt; includes redirect parameter in hidden input" time="0.006080541">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignUp.test.tsx" name="SignUp Component &gt; has proper form attributes" time="0.00195175">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignUp.test.tsx" name="SignUp Component &gt; includes link to signin page" time="0.002005834">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignUp.test.tsx" name="SignUp Component &gt; has proper accessibility attributes for all fields" time="0.002428334">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignUp.test.tsx" name="SignUp Component &gt; has correct input types and autocomplete attributes" time="0.001640333">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignUp.test.tsx" name="SignUp Component &gt; marks all fields as required" time="0.001572833">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignUp.test.tsx" name="SignUp Component &gt; handles form field focus management" time="0.00188875">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignUp.test.tsx" name="SignUp Component &gt; has proper layout structure with footer" time="0.001798417">
        </testcase>
        <testcase classname="app/components/auth/__tests__/SignUp.test.tsx" name="SignUp Component &gt; handles empty redirect parameter" time="0.001329292">
        </testcase>
    </testsuite>
    <testsuite name="app/components/auth/__tests__/signin.variants.test.ts" timestamp="2025-08-11T17:20:20.463Z" hostname="Mac.HOME" tests="25" failures="0" errors="0" skipped="0" time="0.00346525">
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; signinContainerVariants &gt; should return container classes" time="0.000834875">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; signinFormContainerVariants &gt; should return form container classes" time="0.000117375">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; signinFormWrapperVariants &gt; should return form wrapper classes" time="0.000097667">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; signinFormVariants &gt; should return form classes" time="0.000065417">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; signinFormLabelVariants &gt; should return label classes for English" time="0.000113">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; signinFormLabelVariants &gt; should return label classes for Arabic (RTL)" time="0.000086958">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; signinFormLabelVariants &gt; should return label classes for Dutch" time="0.000060667">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; signinFormLabelVariants &gt; should use default variant when no language provided" time="0.00005375">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; signinButtonVariants &gt; should return button classes" time="0.000079166">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; signinButtonContainerVariants &gt; should return button container classes" time="0.000082542">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; signinFormFooterVariants &gt; should return form footer classes" time="0.000065375">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; signinCheckboxContainerVariants &gt; should return checkbox container classes" time="0.0000655">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; signinCheckboxVariants &gt; should return checkbox classes" time="0.000067833">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; signinCheckboxLabelVariants &gt; should return checkbox label classes for English" time="0.000065625">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; signinCheckboxLabelVariants &gt; should return checkbox label classes for Arabic (RTL)" time="0.000061334">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; signinSecondaryTextVariants &gt; should return secondary text classes for English" time="0.000061875">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; signinSecondaryTextVariants &gt; should return secondary text classes for Arabic (RTL)" time="0.000075792">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; signinLinkVariants &gt; should return link classes" time="0.000068625">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; Language variants coverage &gt; should handle all supported languages for form labels" time="0.0001545">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; Language variants coverage &gt; should handle all supported languages for checkbox labels" time="0.000136">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; Language variants coverage &gt; should handle all supported languages for secondary text" time="0.000136417">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; Responsive design classes &gt; should include responsive classes in container" time="0.000052791">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; Responsive design classes &gt; should include responsive classes in form wrapper" time="0.000055917">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; Dark mode support &gt; should include dark mode classes in container" time="0.000054625">
        </testcase>
        <testcase classname="app/components/auth/__tests__/signin.variants.test.ts" name="Signin Variants &gt; Dark mode support &gt; should include dark mode classes in button" time="0.000057917">
        </testcase>
    </testsuite>
    <testsuite name="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" timestamp="2025-08-11T17:20:20.465Z" hostname="Mac.HOME" tests="24" failures="0" errors="0" skipped="0" time="0.044200708">
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Basic Rendering &gt; should render footer element" time="0.015444375">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Basic Rendering &gt; should be hidden on mobile (hidden md:block)" time="0.001848209">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Layout Structure &gt; should have correct container structure" time="0.00151725">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Layout Structure &gt; should have two main sections in grid layout" time="0.00093825">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Logo Section &gt; should render Tournado logo link" time="0.00214025">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Logo Section &gt; should have correct logo styling" time="0.001465625">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Logo Section &gt; should render logo as a span element" time="0.000786625">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Attribution Section &gt; should render attribution text" time="0.000608792">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Attribution Section &gt; should have correct attribution styling" time="0.000627458">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Attribution Section &gt; should include heart emoji" time="0.000754291">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Accessibility &gt; should be accessible as contentinfo landmark" time="0.000792083">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Accessibility &gt; should have accessible logo link" time="0.000974041">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Responsive Design &gt; should be hidden on mobile screens" time="0.000779292">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Responsive Design &gt; should be visible on desktop screens" time="0.00073525">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Grid Layout &gt; should use 2-column grid layout" time="0.000550708">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Grid Layout &gt; should have fixed height" time="0.005424792">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Grid Layout &gt; should be centered with container class" time="0.002240208">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Grid Layout &gt; should have horizontal padding" time="0.00079475">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Component Structure &gt; should have correct DOM hierarchy" time="0.000920084">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Component Structure &gt; should render all expected elements" time="0.001220917">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Text Content &gt; should display correct brand name" time="0.000572583">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Text Content &gt; should display correct attribution" time="0.000462666">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; Text Content &gt; should not contain any additional text content" time="0.000663125">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/DesktopFooter.test.tsx" name="DesktopFooter &gt; CSS Classes Verification &gt; should apply all required CSS classes correctly" time="0.001011625">
        </testcase>
    </testsuite>
    <testsuite name="app/components/desktopFooter/__tests__/FooterLink.test.tsx" timestamp="2025-08-11T17:20:20.466Z" hostname="Mac.HOME" tests="16" failures="0" errors="0" skipped="0" time="0.033020417">
        <testcase classname="app/components/desktopFooter/__tests__/FooterLink.test.tsx" name="FooterLink &gt; Basic Rendering &gt; should render link with correct content and href" time="0.015468417">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/FooterLink.test.tsx" name="FooterLink &gt; Basic Rendering &gt; should render with different props" time="0.001625459">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/FooterLink.test.tsx" name="FooterLink &gt; CSS Classes &gt; should have default CSS classes" time="0.001189">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/FooterLink.test.tsx" name="FooterLink &gt; CSS Classes &gt; should apply custom className prop" time="0.001058375">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/FooterLink.test.tsx" name="FooterLink &gt; CSS Classes &gt; should handle empty className prop" time="0.000831458">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/FooterLink.test.tsx" name="FooterLink &gt; CSS Classes &gt; should handle undefined className prop" time="0.0007275">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/FooterLink.test.tsx" name="FooterLink &gt; Accessibility &gt; should be accessible by role and name" time="0.000667709">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/FooterLink.test.tsx" name="FooterLink &gt; Accessibility &gt; should work with different labels for screen readers" time="0.002172416">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/FooterLink.test.tsx" name="FooterLink &gt; Props Handling &gt; should handle various route patterns" time="0.0021615">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/FooterLink.test.tsx" name="FooterLink &gt; Props Handling &gt; should handle special characters in labels" time="0.002335791">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/FooterLink.test.tsx" name="FooterLink &gt; Styling Integration &gt; should combine default and custom classes correctly" time="0.001110542">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/FooterLink.test.tsx" name="FooterLink &gt; Styling Integration &gt; should apply hover effect class" time="0.000495875">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/FooterLink.test.tsx" name="FooterLink &gt; Styling Integration &gt; should apply transition class for smooth interactions" time="0.0005045">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/FooterLink.test.tsx" name="FooterLink &gt; Component Type and Structure &gt; should render as a Link component from react-router" time="0.000472292">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/FooterLink.test.tsx" name="FooterLink &gt; Component Type and Structure &gt; should have proper DOM structure" time="0.000907084">
        </testcase>
        <testcase classname="app/components/desktopFooter/__tests__/FooterLink.test.tsx" name="FooterLink &gt; Default Props Behavior &gt; should use empty string as default className" time="0.00045275">
        </testcase>
    </testsuite>
    <testsuite name="app/components/emails/__tests__/TeamRegisteredEmail.test.tsx" timestamp="2025-08-11T17:20:20.467Z" hostname="Mac.HOME" tests="8" failures="0" errors="0" skipped="0" time="0.096008917">
        <testcase classname="app/components/emails/__tests__/TeamRegisteredEmail.test.tsx" name="TeamRegisteredEmail &gt; should render email with correct content" time="0.027780667">
        </testcase>
        <testcase classname="app/components/emails/__tests__/TeamRegisteredEmail.test.tsx" name="TeamRegisteredEmail &gt; should include correct View Team link" time="0.002120583">
        </testcase>
        <testcase classname="app/components/emails/__tests__/TeamRegisteredEmail.test.tsx" name="TeamRegisteredEmail &gt; should include logo with correct src" time="0.031320625">
        </testcase>
        <testcase classname="app/components/emails/__tests__/TeamRegisteredEmail.test.tsx" name="TeamRegisteredEmail &gt; should use baseUrl for logo when logoUrl is not provided" time="0.001959125">
        </testcase>
        <testcase classname="app/components/emails/__tests__/TeamRegisteredEmail.test.tsx" name="TeamRegisteredEmail &gt; should use default baseUrl when not provided" time="0.001717292">
        </testcase>
        <testcase classname="app/components/emails/__tests__/TeamRegisteredEmail.test.tsx" name="TeamRegisteredEmail &gt; should include footer link to website" time="0.014276667">
        </testcase>
        <testcase classname="app/components/emails/__tests__/TeamRegisteredEmail.test.tsx" name="TeamRegisteredEmail &gt; should include appropriate email styling" time="0.003976">
        </testcase>
        <testcase classname="app/components/emails/__tests__/TeamRegisteredEmail.test.tsx" name="TeamRegisteredEmail &gt; should have proper email structure" time="0.001809292">
        </testcase>
    </testsuite>
    <testsuite name="app/components/buttons/__tests__/ActionButton.test.tsx" timestamp="2025-08-11T17:20:20.468Z" hostname="Mac.HOME" tests="5" failures="0" errors="0" skipped="0" time="0.027816583">
        <testcase classname="app/components/buttons/__tests__/ActionButton.test.tsx" name="ActionButton &gt; renders children and calls onClick (LTR)" time="0.016488875">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionButton.test.tsx" name="ActionButton &gt; renders children and calls onClick (RTL)" time="0.0019135">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionButton.test.tsx" name="ActionButton &gt; renders different variants correctly" time="0.006413375">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionButton.test.tsx" name="ActionButton &gt; handles submit type without onClick" time="0.001181833">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionButton.test.tsx" name="ActionButton &gt; handles disabled state correctly" time="0.001147625">
        </testcase>
    </testsuite>
    <testsuite name="app/components/buttons/__tests__/ActionLinkButton.test.tsx" timestamp="2025-08-11T17:20:20.468Z" hostname="Mac.HOME" tests="22" failures="0" errors="0" skipped="0" time="0.051083291">
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; renders with default props" time="0.012477917">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; renders with primary variant by default" time="0.001846208">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; renders with secondary variant" time="0.001278042">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; renders with primary color when specified" time="0.001008875">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; applies custom className" time="0.007034584">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; sets correct aria-label" time="0.001315792">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; navigates to correct URL" time="0.002675792">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; renders icon with correct props" time="0.0066155">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; has proper base styling classes" time="0.006900709">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; has proper animation classes (since links are not disabled)" time="0.001185708">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; RTL support &gt; renders icon first in LTR layout" time="0.00073025">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; accessibility &gt; is focusable" time="0.0007415">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; accessibility &gt; has focus styles" time="0.001735875">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; accessibility &gt; provides semantic link role" time="0.000728959">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; different icons &gt; renders with add icon" time="0.00048975">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; different icons &gt; renders with delete icon" time="0.000449792">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; different icons &gt; renders with settings icon" time="0.000422791">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; different icons &gt; renders with home icon" time="0.000420667">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; different icons &gt; renders with apparel icon" time="0.0004">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; different icons &gt; renders with trophy icon" time="0.000437375">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; renders primary variant with brand color" time="0.000686125">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/ActionLinkButton.test.tsx" name="ActionLinkButton &gt; renders secondary variant with brand color" time="0.0006405">
        </testcase>
    </testsuite>
    <testsuite name="app/components/buttons/__tests__/button.variants.test.ts" timestamp="2025-08-11T17:20:20.469Z" hostname="Mac.HOME" tests="16" failures="0" errors="0" skipped="0" time="0.0031865">
        <testcase classname="app/components/buttons/__tests__/button.variants.test.ts" name="Button Variants &gt; primary brand button &gt; should have both light and dark mode shadows" time="0.000937458">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/button.variants.test.ts" name="Button Variants &gt; primary brand button &gt; should have proper brand styling" time="0.000144708">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/button.variants.test.ts" name="Button Variants &gt; primary color button (emerald) &gt; should have both light and dark mode shadows" time="0.000130417">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/button.variants.test.ts" name="Button Variants &gt; primary color button (emerald) &gt; should have proper primary styling" time="0.000091125">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/button.variants.test.ts" name="Button Variants &gt; secondary brand button &gt; should have both light and dark mode shadows" time="0.000097125">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/button.variants.test.ts" name="Button Variants &gt; secondary brand button &gt; should have proper secondary brand styling" time="0.00009375">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/button.variants.test.ts" name="Button Variants &gt; secondary primary button &gt; should have both light and dark mode shadows" time="0.000103">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/button.variants.test.ts" name="Button Variants &gt; secondary primary button &gt; should have proper secondary primary styling" time="0.000076209">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/button.variants.test.ts" name="Button Variants &gt; base button styles &gt; should include essential base classes" time="0.000194875">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/button.variants.test.ts" name="Button Variants &gt; base button styles &gt; should include disabled state styling" time="0.0001285">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/button.variants.test.ts" name="Button Variants &gt; base button styles &gt; should include accessibility features" time="0.000083125">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/button.variants.test.ts" name="Button Variants &gt; default variants &gt; should use primary/brand/md as defaults" time="0.000085792">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/button.variants.test.ts" name="Button Variants &gt; size variants &gt; should apply small size classes correctly" time="0.0000885">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/button.variants.test.ts" name="Button Variants &gt; size variants &gt; should use default size for md" time="0.0001035">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/button.variants.test.ts" name="Button Variants &gt; focus and hover states &gt; should include proper focus ring styles for brand buttons" time="0.000137">
        </testcase>
        <testcase classname="app/components/buttons/__tests__/button.variants.test.ts" name="Button Variants &gt; focus and hover states &gt; should include proper border hover states for primary buttons" time="0.000060375">
        </testcase>
    </testsuite>
    <testsuite name="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" timestamp="2025-08-11T17:20:20.470Z" hostname="Mac.HOME" tests="24" failures="0" errors="0" skipped="0" time="0.110568667">
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; should render with label" time="0.014333583">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; should render with description when provided" time="0.001324125">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; should call onChange when clicked" time="0.002824167">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; should call onBlur when focus is lost" time="0.001239041">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; should have hover transition animations" time="0.0318635">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; should have focus transition animations" time="0.026964625">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; should display error message when error prop is provided" time="0.0061905">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; should be disabled when disabled prop is true" time="0.001203291">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; should be checked when checked prop is true" time="0.001519208">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; should show check icon when checked" time="0.003835208">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; should not show check icon when unchecked" time="0.000877709">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; should apply custom className" time="0.005844208">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; should apply custom labelClassName" time="0.001335833">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; should apply custom inputClassName" time="0.001451166">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; should be required when required prop is true" time="0.00134525">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; should handle color variants" time="0.00082625">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; should handle language prop for RTL support" time="0.000556209">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; should handle checkbox state change correctly" time="0.001818125">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; Internal validation status &gt; should show success status when checked and required" time="0.000986375">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; Internal validation status &gt; should show error status when unchecked, required, and has error" time="0.000904916">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; Internal validation status &gt; should show neutral status when disabled regardless of other props" time="0.000765083">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; Internal validation status &gt; should show neutral status for optional field when unchecked" time="0.000490875">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; Internal validation status &gt; should show success status for optional field when checked" time="0.000668709">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CheckboxAgreementField.test.tsx" name="CheckboxAgreementField &gt; Internal validation status &gt; should render status icon even when no description is provided" time="0.00057025">
        </testcase>
    </testsuite>
    <testsuite name="app/components/inputs/__tests__/ComboField.test.tsx" timestamp="2025-08-11T17:20:20.471Z" hostname="Mac.HOME" tests="26" failures="0" errors="0" skipped="0" time="0.552548458">
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should render with label" time="0.023169584">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should render with placeholder when no value selected" time="0.005868917">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should display selected value" time="0.010400041">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should open dropdown and show options when clicked" time="0.043622583">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should call onChange when option is selected" time="0.047489666">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should call onBlur when focus is lost" time="0.048380875">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should display error message when error prop is provided" time="0.013014459">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should be disabled when disabled prop is true" time="0.004775041">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should show required indicator when required prop is true" time="0.004241125">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should render with correct name attribute" time="0.004365917">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should handle empty options array" time="0.002847292">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should maintain focus styles" time="0.013484542">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should handle keyboard navigation" time="0.070460792">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should display animated unfold icon in closed state" time="0.004299375">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should animate icon when dropdown opens" time="0.041935333">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should handle large number of options" time="0.12908575">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should handle value that does not exist in options" time="0.00277125">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should have hover transition animations" time="0.034291459">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should have focus transition animations" time="0.012217166">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; should have item hover animations" time="0.019162458">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; Hidden native select element for mobile diamond artifacts prevention &gt; should render with proper mobile-safe hiding styles" time="0.0025695">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; Hidden native select element for mobile diamond artifacts prevention &gt; should sync selected value correctly for form submission" time="0.0022725">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; Hidden native select element for mobile diamond artifacts prevention &gt; should handle disabled state properly" time="0.002189334">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; Hidden native select element for mobile diamond artifacts prevention &gt; should contain all form options for submission" time="0.003360833">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; Hidden native select element for mobile diamond artifacts prevention &gt; should be accessible to screen readers" time="0.002800209">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/ComboField.test.tsx" name="ComboField &gt; Hidden native select element for mobile diamond artifacts prevention &gt; should prevent mobile diamond artifacts through proper styling" time="0.002508166">
        </testcase>
    </testsuite>
    <testsuite name="app/components/inputs/__tests__/CustomDatePicker.statusIcon.test.tsx" timestamp="2025-08-11T17:20:20.473Z" hostname="Mac.HOME" tests="10" failures="0" errors="0" skipped="0" time="0.076532042">
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.statusIcon.test.tsx" name="CustomDatePicker - StatusIcon Support &gt; renders status icon when provided" time="0.018210583">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.statusIcon.test.tsx" name="CustomDatePicker - StatusIcon Support &gt; renders without status icon when not provided" time="0.002414875">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.statusIcon.test.tsx" name="CustomDatePicker - StatusIcon Support &gt; applies correct layout classes for label with status icon" time="0.00755275">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.statusIcon.test.tsx" name="CustomDatePicker - StatusIcon Support &gt; renders status icon in fixed-width container" time="0.002060125">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.statusIcon.test.tsx" name="CustomDatePicker - StatusIcon Support &gt; maintains proper spacing with INPUT_LABEL_SPACING" time="0.002480875">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.statusIcon.test.tsx" name="CustomDatePicker - StatusIcon Support &gt; works with all existing props while showing status icon" time="0.014993083">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.statusIcon.test.tsx" name="CustomDatePicker - StatusIcon Support &gt; renders correctly when readOnly with status icon" time="0.004421042">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.statusIcon.test.tsx" name="CustomDatePicker - StatusIcon Support &gt; maintains accessibility with status icon present" time="0.009584792">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.statusIcon.test.tsx" name="CustomDatePicker - StatusIcon Support &gt; renders error message alongside status icon" time="0.0103345">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.statusIcon.test.tsx" name="CustomDatePicker - StatusIcon Support &gt; handles color variants with status icon" time="0.001824583">
        </testcase>
    </testsuite>
    <testsuite name="app/components/inputs/__tests__/CustomDatePicker.test.tsx" timestamp="2025-08-11T17:20:20.473Z" hostname="Mac.HOME" tests="23" failures="0" errors="0" skipped="0" time="0.142206959">
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should render with label" time="0.032464583">
            <system-err>
[Console Error]: In HTML, %s cannot be a descendant of &lt;%s&gt;.
This will cause a hydration error.%s
[Console Error]: &lt;%s&gt; cannot contain a nested %s.
See this log for the ancestor stack trace.
[Console Error]: React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.
[Console Error]: React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.

            </system-err>
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should render with placeholder" time="0.0045205">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should display selected value" time="0.003791667">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should display error message when error prop is provided" time="0.00507">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should be required when required prop is true" time="0.00661425">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should apply custom className" time="0.003003833">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should handle color variants" time="0.003161792">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should render with correct name attribute" time="0.003249583">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should handle readOnly prop" time="0.00394175">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should handle onBlur callback" time="0.00343125">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should render hidden input for form submission" time="0.002889667">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should show calendar icon" time="0.002566292">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should handle min and max dates" time="0.00265825">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should handle noPast prop" time="0.002561875">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should call onChange when date is selected" time="0.014158958">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should show placeholder when no value is selected" time="0.003269667">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should handle keyboard interaction" time="0.011171209">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should show label correctly associated with trigger" time="0.003240542">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should handle empty value state" time="0.002386917">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should render popover structure correctly" time="0.002244791">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should have hover transition animations" time="0.010120208">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should have focus transition animations" time="0.0121235">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/CustomDatePicker.test.tsx" name="CustomDatePicker &gt; should have calendar day transition animations" time="0.002720667">
        </testcase>
    </testsuite>
    <testsuite name="app/components/inputs/__tests__/DateInputField.test.tsx" timestamp="2025-08-11T17:20:20.475Z" hostname="Mac.HOME" tests="24" failures="0" errors="0" skipped="0" time="0.227984">
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should render with label" time="0.011942792">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should render with placeholder" time="0.00114075">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should display current value" time="0.001128459">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should call onChange when date is entered" time="0.047034791">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should call onBlur when focus is lost" time="0.020936125">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should display error message when error prop is provided" time="0.00310225">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should be disabled when disabled prop is true" time="0.001153292">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should be required when required prop is true" time="0.000793292">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should have date input type" time="0.0007625">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should apply custom className" time="0.000617291">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should handle color variants" time="0.003466">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should render with correct name attribute" time="0.000750166">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should handle valid date format" time="0.047368541">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should handle min and max date constraints" time="0.000966375">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should handle focus and blur events correctly" time="0.024371792">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should handle defaultValue correctly" time="0.00175625">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should show label correctly associated with input" time="0.000686291">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should handle empty defaultValue" time="0.00048825">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should handle readOnly prop" time="0.000445125">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should handle keyboard navigation correctly" time="0.012533209">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should handle date clearing" time="0.009439625">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should handle date input validation" time="0.002883375">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should have hover transition animations" time="0.018244833">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/DateInputField.test.tsx" name="DateInputField &gt; should have focus transition animations" time="0.014769416">
        </testcase>
    </testsuite>
    <testsuite name="app/components/inputs/__tests__/TextInputField.test.tsx" timestamp="2025-08-11T17:20:20.476Z" hostname="Mac.HOME" tests="22" failures="0" errors="0" skipped="0" time="0.223729625">
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should render with label" time="0.013573584">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should render with placeholder" time="0.001141834">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should display current value" time="0.000883666">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should call onChange when text is typed" time="0.03479">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should call onBlur when focus is lost" time="0.011086917">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should display error message when error prop is provided" time="0.003022541">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should be disabled when disabled prop is true" time="0.001338291">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should be required when required prop is true" time="0.001076917">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should handle different input types" time="0.001093">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should handle tel input type" time="0.001055875">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should apply custom className" time="0.001075167">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should handle color variants" time="0.000951667">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should render with correct name attribute" time="0.000916583">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should handle focus and blur events correctly" time="0.021658833">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should maintain controlled input behavior" time="0.0276725">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should handle long text input" time="0.010105709">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should handle special characters" time="0.022377958">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should handle keyboard navigation correctly" time="0.034137459">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should show label correctly associated with input" time="0.001238208">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should handle empty value" time="0.00159475">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should have hover transition animations" time="0.018366791">
        </testcase>
        <testcase classname="app/components/inputs/__tests__/TextInputField.test.tsx" name="TextInputField &gt; should have focus transition animations" time="0.013760875">
        </testcase>
    </testsuite>
    <testsuite name="app/components/layouts/__tests__/TeamsLayoutHeader.test.tsx" timestamp="2025-08-11T17:20:20.477Z" hostname="Mac.HOME" tests="6" failures="0" errors="0" skipped="0" time="0.033835375">
        <testcase classname="app/components/layouts/__tests__/TeamsLayoutHeader.test.tsx" name="TeamsLayoutHeader &gt; should render public variant correctly" time="0.024622">
        </testcase>
        <testcase classname="app/components/layouts/__tests__/TeamsLayoutHeader.test.tsx" name="TeamsLayoutHeader &gt; should render admin variant correctly" time="0.0035825">
        </testcase>
        <testcase classname="app/components/layouts/__tests__/TeamsLayoutHeader.test.tsx" name="TeamsLayoutHeader &gt; should use custom addButtonTo prop" time="0.001731917">
        </testcase>
        <testcase classname="app/components/layouts/__tests__/TeamsLayoutHeader.test.tsx" name="TeamsLayoutHeader &gt; should apply custom className" time="0.001250458">
        </testcase>
        <testcase classname="app/components/layouts/__tests__/TeamsLayoutHeader.test.tsx" name="TeamsLayoutHeader &gt; should render public layout for public variant" time="0.001058458">
        </testcase>
        <testcase classname="app/components/layouts/__tests__/TeamsLayoutHeader.test.tsx" name="TeamsLayoutHeader &gt; should render admin layout for admin variant" time="0.0008835">
        </testcase>
    </testsuite>
    <testsuite name="app/components/mobileNavigation/__tests__/BottomNavigation.test.tsx" timestamp="2025-08-11T17:20:20.478Z" hostname="Mac.HOME" tests="15" failures="0" errors="0" skipped="0" time="0.035988791">
        <testcase classname="app/components/mobileNavigation/__tests__/BottomNavigation.test.tsx" name="BottomNavigation &gt; Basic Rendering &gt; should render navigation container with correct attributes" time="0.013357667">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/BottomNavigation.test.tsx" name="BottomNavigation &gt; Basic Rendering &gt; should have correct CSS classes for mobile-only display" time="0.002116042">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/BottomNavigation.test.tsx" name="BottomNavigation &gt; Basic Rendering &gt; should render inner container with correct layout classes" time="0.001380666">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/BottomNavigation.test.tsx" name="BottomNavigation &gt; Navigation Items &gt; should render all navigation items with correct props" time="0.001530333">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/BottomNavigation.test.tsx" name="BottomNavigation &gt; Navigation Items &gt; should render exactly 3 navigation items" time="0.00149025">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/BottomNavigation.test.tsx" name="BottomNavigation &gt; Navigation Items &gt; should render navigation items in correct order" time="0.00128475">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/BottomNavigation.test.tsx" name="BottomNavigation &gt; Navigation Items Configuration &gt; should have correct icon and route mappings" time="0.001100916">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/BottomNavigation.test.tsx" name="BottomNavigation &gt; Accessibility &gt; should have proper ARIA attributes" time="0.00313775">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/BottomNavigation.test.tsx" name="BottomNavigation &gt; Accessibility &gt; should be discoverable by screen readers" time="0.001963416">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/BottomNavigation.test.tsx" name="BottomNavigation &gt; Layout Structure &gt; should have correct DOM structure" time="0.002394333">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/BottomNavigation.test.tsx" name="BottomNavigation &gt; Mobile-Specific Behavior &gt; should be hidden on desktop (md:hidden class)" time="0.001173291">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/BottomNavigation.test.tsx" name="BottomNavigation &gt; Mobile-Specific Behavior &gt; should be positioned fixed at bottom" time="0.001042542">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/BottomNavigation.test.tsx" name="BottomNavigation &gt; Mobile-Specific Behavior &gt; should have high z-index for overlay behavior" time="0.001167708">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/BottomNavigation.test.tsx" name="BottomNavigation &gt; Testing Attributes &gt; should have data-testid attribute for e2e testing" time="0.00103">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/BottomNavigation.test.tsx" name="BottomNavigation &gt; Component Integration &gt; should pass correct props to NavigationItem components" time="0.000930875">
        </testcase>
    </testsuite>
    <testsuite name="app/components/mobileNavigation/__tests__/NavigationItem.responsive.test.tsx" timestamp="2025-08-11T17:20:20.479Z" hostname="Mac.HOME" tests="5" failures="0" errors="0" skipped="0" time="0.027464042">
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.responsive.test.tsx" name="NavigationItem - Responsive Sizing &gt; should use 32px icon size on mobile breakpoint" time="0.017906">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.responsive.test.tsx" name="NavigationItem - Responsive Sizing &gt; should use 36px icon size on desktop breakpoint" time="0.00182675">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.responsive.test.tsx" name="NavigationItem - Responsive Sizing &gt; should use custom iconSize when provided regardless of breakpoint" time="0.001277625">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.responsive.test.tsx" name="NavigationItem - Responsive Sizing &gt; should call useMediaQuery with correct breakpoint" time="0.001471583">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.responsive.test.tsx" name="NavigationItem - Responsive Sizing &gt; should maintain proper navigation functionality regardless of icon size" time="0.003601875">
        </testcase>
    </testsuite>
    <testsuite name="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" timestamp="2025-08-11T17:20:20.479Z" hostname="Mac.HOME" tests="19" failures="0" errors="0" skipped="0" time="0.04720775">
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" name="NavigationItem &gt; Basic Rendering &gt; should render navigation item with correct content" time="0.014583375">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" name="NavigationItem &gt; Basic Rendering &gt; should have correct accessibility attributes" time="0.001982791">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" name="NavigationItem &gt; Basic Rendering &gt; should have correct data-testid attribute" time="0.001306833">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" name="NavigationItem &gt; Active State Logic &gt; should show inactive state when not on current route" time="0.001006917">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" name="NavigationItem &gt; Active State Logic &gt; should show active state when on current route" time="0.004028875">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" name="NavigationItem &gt; Active State Logic &gt; should handle different routes correctly" time="0.001846333">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" name="NavigationItem &gt; Active State Logic &gt; should handle trailing slashes correctly" time="0.003412917">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" name="NavigationItem &gt; Active State Logic &gt; should handle query parameters correctly" time="0.000746583">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" name="NavigationItem &gt; Icon Properties &gt; should render icon with correct size properties" time="0.000610792">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" name="NavigationItem &gt; Icon Properties &gt; should render icon as inline SVG" time="0.000610208">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" name="NavigationItem &gt; Icon Properties &gt; should support custom icon sizes" time="0.000576917">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" name="NavigationItem &gt; Icon Properties &gt; should use responsive icon sizing by default" time="0.003698542">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" name="NavigationItem &gt; Color Variants &gt; should support all navigation color variants in active state" time="0.003417834">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" name="NavigationItem &gt; Color Variants &gt; should use neutral color for all navigation variants in inactive state" time="0.002968208">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" name="NavigationItem &gt; Different Navigation Items &gt; should handle different labels and data-testid attributes" time="0.003012">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" name="NavigationItem &gt; CSS Classes &gt; should have correct structural CSS classes" time="0.001007209">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" name="NavigationItem &gt; normalizePathname utility &gt; should normalize pathnames correctly" time="0.000200667">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" name="NavigationItem Integration Tests &gt; should handle complex scenarios with color variants and route matching" time="0.000596458">
        </testcase>
        <testcase classname="app/components/mobileNavigation/__tests__/NavigationItem.test.tsx" name="NavigationItem Integration Tests &gt; should maintain correct icon properties with different colors" time="0.000544125">
        </testcase>
    </testsuite>
    <testsuite name="app/components/navigation/__tests__/navigation.variants.test.ts" timestamp="2025-08-11T17:20:20.480Z" hostname="Mac.HOME" tests="26" failures="0" errors="0" skipped="0" time="0.006508041">
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; component variants &gt; should handle APP_BAR component type" time="0.002674584">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; component variants &gt; should handle BOTTOM_NAV component type" time="0.000171833">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; viewport variants &gt; should handle mobile viewport" time="0.00011475">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; viewport variants &gt; should handle desktop viewport" time="0.000095292">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; visibility variants &gt; should handle visible state" time="0.00008925">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; visibility variants &gt; should handle hidden state" time="0.00008325">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; compound variants - APP_BAR &gt; should return bounce animation for mobile visible APP_BAR" time="0.000118791">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; compound variants - APP_BAR &gt; should return slide-out animation for mobile hidden APP_BAR" time="0.0000735">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; compound variants - APP_BAR &gt; should return visible class for desktop visible APP_BAR" time="0.000071292">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; compound variants - APP_BAR &gt; should return hidden class for desktop hidden APP_BAR" time="0.000092">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; compound variants - BOTTOM_NAV &gt; should return bounce animation for mobile visible BOTTOM_NAV" time="0.00007">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; compound variants - BOTTOM_NAV &gt; should return slide-out animation for mobile hidden BOTTOM_NAV" time="0.000072375">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; compound variants - BOTTOM_NAV &gt; should return visible class for desktop visible BOTTOM_NAV" time="0.000060375">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; compound variants - BOTTOM_NAV &gt; should return hidden class for desktop hidden BOTTOM_NAV" time="0.000055542">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; default variants &gt; should use default variants when no props provided" time="0.000106875">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; default variants &gt; should use default viewport and visible when only component specified" time="0.000058459">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; type definitions &gt; should export correct NavigationComponent type values" time="0.000386">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; type definitions &gt; should export correct NavigationViewport type values" time="0.000114">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; type definitions &gt; should export correct NavigationVisible type values" time="0.000115375">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; animation class consistency &gt; should use consistent class naming convention for APP_BAR" time="0.000118541">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; animation class consistency &gt; should use consistent class naming convention for BOTTOM_NAV" time="0.0000935">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; animation class consistency &gt; should use kebab-case in all class names" time="0.000190416">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; animation behavior differentiation &gt; should use different animations for mobile vs desktop" time="0.00009425">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; animation behavior differentiation &gt; should use slide-out for mobile hidden state" time="0.000065">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; type safety &gt; should accept valid NavigationVariants props" time="0.000297625">
        </testcase>
        <testcase classname="app/components/navigation/__tests__/navigation.variants.test.ts" name="navigationVariants &gt; type safety &gt; should work with partial props due to defaults" time="0.000084666">
        </testcase>
    </testsuite>
    <testsuite name="app/components/shared/__tests__/FieldErrorIcon.test.tsx" timestamp="2025-08-11T17:20:20.481Z" hostname="Mac.HOME" tests="4" failures="0" errors="0" skipped="0" time="0.011637375">
        <testcase classname="app/components/shared/__tests__/FieldErrorIcon.test.tsx" name="FieldErrorIcon &gt; should not render when show is false" time="0.005885209">
        </testcase>
        <testcase classname="app/components/shared/__tests__/FieldErrorIcon.test.tsx" name="FieldErrorIcon &gt; should render when show is true" time="0.002651708">
        </testcase>
        <testcase classname="app/components/shared/__tests__/FieldErrorIcon.test.tsx" name="FieldErrorIcon &gt; should render close icon with white text" time="0.001684042">
        </testcase>
        <testcase classname="app/components/shared/__tests__/FieldErrorIcon.test.tsx" name="FieldErrorIcon &gt; should apply red background for error state" time="0.000755083">
        </testcase>
    </testsuite>
    <testsuite name="app/components/shared/__tests__/FieldStatusIcon.test.tsx" timestamp="2025-08-11T17:20:20.482Z" hostname="Mac.HOME" tests="10" failures="0" errors="0" skipped="0" time="0.0535205">
        <testcase classname="app/components/shared/__tests__/FieldStatusIcon.test.tsx" name="FieldStatusIcon &gt; should render nothing when status is neutral" time="0.005493166">
        </testcase>
        <testcase classname="app/components/shared/__tests__/FieldStatusIcon.test.tsx" name="FieldStatusIcon &gt; should render success icon when status is success" time="0.006438042">
        </testcase>
        <testcase classname="app/components/shared/__tests__/FieldStatusIcon.test.tsx" name="FieldStatusIcon &gt; should render error icon when status is error" time="0.001321792">
        </testcase>
        <testcase classname="app/components/shared/__tests__/FieldStatusIcon.test.tsx" name="FieldStatusIcon &gt; should apply custom className to container" time="0.023834958">
        </testcase>
        <testcase classname="app/components/shared/__tests__/FieldStatusIcon.test.tsx" name="FieldStatusIcon &gt; should always use emerald background for success status with inline positioning" time="0.002878083">
        </testcase>
        <testcase classname="app/components/shared/__tests__/FieldStatusIcon.test.tsx" name="FieldStatusIcon &gt; should always use red background for error status with inline positioning" time="0.010595916">
        </testcase>
        <testcase classname="app/components/shared/__tests__/FieldStatusIcon.test.tsx" name="FieldStatusIcon &gt; should use inline positioning for all field types" time="0.000621459">
        </testcase>
        <testcase classname="app/components/shared/__tests__/FieldStatusIcon.test.tsx" name="FieldStatusIcon &gt; should have proper layout classes for inline positioning" time="0.00050575">
        </testcase>
        <testcase classname="app/components/shared/__tests__/FieldStatusIcon.test.tsx" name="FieldStatusIcon &gt; should render error icon with consistent inline positioning" time="0.000401791">
        </testcase>
        <testcase classname="app/components/shared/__tests__/FieldStatusIcon.test.tsx" name="FieldStatusIcon &gt; should render with white text color for icons" time="0.000707333">
        </testcase>
    </testsuite>
    <testsuite name="app/components/shared/__tests__/LabelWithStatusIcon.test.tsx" timestamp="2025-08-11T17:20:20.482Z" hostname="Mac.HOME" tests="9" failures="0" errors="0" skipped="0" time="0.019060042">
        <testcase classname="app/components/shared/__tests__/LabelWithStatusIcon.test.tsx" name="LabelWithStatusIcon &gt; renders label text correctly" time="0.01348475">
        </testcase>
        <testcase classname="app/components/shared/__tests__/LabelWithStatusIcon.test.tsx" name="LabelWithStatusIcon &gt; renders status icon when provided" time="0.0012685">
        </testcase>
        <testcase classname="app/components/shared/__tests__/LabelWithStatusIcon.test.tsx" name="LabelWithStatusIcon &gt; applies custom className to container" time="0.000762416">
        </testcase>
        <testcase classname="app/components/shared/__tests__/LabelWithStatusIcon.test.tsx" name="LabelWithStatusIcon &gt; applies custom labelClassName to label text" time="0.00071225">
        </testcase>
        <testcase classname="app/components/shared/__tests__/LabelWithStatusIcon.test.tsx" name="LabelWithStatusIcon &gt; includes spacing by default" time="0.000553584">
        </testcase>
        <testcase classname="app/components/shared/__tests__/LabelWithStatusIcon.test.tsx" name="LabelWithStatusIcon &gt; excludes spacing when includeSpacing is false" time="0.000434208">
        </testcase>
        <testcase classname="app/components/shared/__tests__/LabelWithStatusIcon.test.tsx" name="LabelWithStatusIcon &gt; applies RTL text class for Arabic language" time="0.000385708">
        </testcase>
        <testcase classname="app/components/shared/__tests__/LabelWithStatusIcon.test.tsx" name="LabelWithStatusIcon &gt; applies default flex layout classes" time="0.000335917">
        </testcase>
        <testcase classname="app/components/shared/__tests__/LabelWithStatusIcon.test.tsx" name="LabelWithStatusIcon &gt; renders without status icon when not provided" time="0.000437542">
        </testcase>
    </testsuite>
    <testsuite name="app/components/shared/__tests__/datatable.variants.test.tsx" timestamp="2025-08-11T17:20:20.483Z" hostname="Mac.HOME" tests="30" failures="0" errors="0" skipped="0" time="0.006580166">
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableContainerVariants &gt; should apply default slate color variant" time="0.000808416">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableContainerVariants &gt; should apply teal color variant" time="0.000154708">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableContainerVariants &gt; should include base container classes" time="0.000122958">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableHeaderVariants &gt; should apply default slate color variant" time="0.000092083">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableHeaderVariants &gt; should apply brand color variant" time="0.000084666">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableHeaderVariants &gt; should include base header classes" time="0.00008725">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableHeaderTextVariants &gt; should apply default slate color variant" time="0.000066083">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableHeaderTextVariants &gt; should apply emerald color variant" time="0.000064792">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableHeaderTextVariants &gt; should include base header text classes" time="0.000077792">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableRowVariants &gt; should apply default slate color and default variant" time="0.000097083">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableRowVariants &gt; should apply blue color variant" time="0.000075709">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableRowVariants &gt; should apply last variant for row styling" time="0.000071625">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableRowVariants &gt; should include base row classes" time="0.000067417">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableCellTextVariants &gt; should apply default primary variant" time="0.000058542">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableCellTextVariants &gt; should apply secondary variant" time="0.000057791">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableCellTextVariants &gt; should apply muted variant" time="0.000047625">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableCellTextVariants &gt; should include base cell text classes" time="0.000054375">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableActionButtonVariants &gt; should apply default view action" time="0.000076625">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableActionButtonVariants &gt; should apply delete action styling" time="0.000074917">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableActionButtonVariants &gt; should apply edit action styling" time="0.00007275">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableActionButtonVariants &gt; should include base action button classes" time="0.000074916">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableDeleteAreaVariants &gt; should apply default red color variant" time="0.00005225">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableDeleteAreaVariants &gt; should apply brand color variant" time="0.000050167">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; datatableDeleteAreaVariants &gt; should include base delete area classes" time="0.000064458">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; color variants consistency &gt; should support all color variants for container" time="0.0005055">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; color variants consistency &gt; should support all color variants for header" time="0.001669375">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; color variants consistency &gt; should support all color variants for header text" time="0.000495541">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; color variants consistency &gt; should support all color variants for rows" time="0.000512791">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; variant combinations &gt; should handle multiple variant combinations for rows" time="0.00009675">
        </testcase>
        <testcase classname="app/components/shared/__tests__/datatable.variants.test.tsx" name="datatable.variants &gt; variant combinations &gt; should maintain proper dark mode styling across variants" time="0.000068833">
        </testcase>
    </testsuite>
    <testsuite name="app/stores/helpers/__tests__/teamFormHelpers.test.ts" timestamp="2025-08-11T17:20:20.485Z" hostname="Mac.HOME" tests="25" failures="0" errors="0" skipped="0" time="0.00338125">
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="lib.store &gt; isPanelValid returns true for valid panel" time="0.000738791">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="lib.store &gt; isPanelValid returns false for missing field" time="0.000117291">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="lib.store &gt; isPanelEnabled returns true for panel 1" time="0.000095625">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="lib.store &gt; isPanelEnabled returns false for panel 2 if previous panel invalid" time="0.000080375">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="lib.store &gt; isFormDirty returns true if fields differ" time="0.000073375">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="lib.store &gt; isFormDirty returns false if fields are the same" time="0.000066042">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="lib.store &gt; computeAvailableOptions returns correct divisions/categories" time="0.000312">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="lib.store &gt; computeAvailableOptions returns empty arrays if not found" time="0.000076834">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="lib.store &gt; getDependentFieldResets resets division/category for tournamentId" time="0.000082209">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="lib.store &gt; getDependentFieldResets resets category for division" time="0.000095375">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="lib.store &gt; getDependentFieldResets returns empty for other fields" time="0.000055542">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="lib.store &gt; mergeErrors merges and prioritizes server errors" time="0.000069208">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="lib.store &gt; isPanelComplete returns true if all fields are blurred and valid" time="0.000079084">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="lib.store &gt; isPanelComplete returns false if not all fields are blurred" time="0.000056042">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="lib.store &gt; mapFlexibleToFormData maps provided fields" time="0.000069084">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="lib.store &gt; mapFlexibleToFormData ignores undefined fields" time="0.000046167">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="lib.store &gt; getPanelNumberForField returns correct panel number" time="0.000113625">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="lib.store &gt; getPanelNumberForField returns 0 for unknown field" time="0.000057041">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="shouldValidateField &gt; returns true if field is blurred" time="0.000068208">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="shouldValidateField &gt; returns true if forceShowAllErrors is true" time="0.000045708">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="shouldValidateField &gt; returns true if submitAttempted is true" time="0.000049084">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="shouldValidateField &gt; returns false if none are true" time="0.000040208">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="resetStatePreserving &gt; preserves specified keys" time="0.000144708">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="resetStatePreserving &gt; preserves multiple keys" time="0.000082666">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/teamFormHelpers.test.ts" name="resetStatePreserving &gt; returns initial state for other keys" time="0.000060917">
        </testcase>
    </testsuite>
    <testsuite name="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" timestamp="2025-08-11T17:20:20.486Z" hostname="Mac.HOME" tests="47" failures="0" errors="0" skipped="0" time="0.00468875">
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelValid &gt; should return true for panel 1 when name and location are valid in create mode" time="0.000793542">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelValid &gt; should return false for panel 1 when name is missing in create mode" time="0.0001175">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelValid &gt; should return false for panel 1 when there are display errors in create mode" time="0.000086917">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelValid &gt; should return true for panel 2 when dates are valid in create mode" time="0.000075875">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelValid &gt; should return false for panel 2 when startDate is missing in create mode" time="0.000069875">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelValid &gt; should return true for panel 3 when divisions are selected in create mode" time="0.000071834">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelValid &gt; should return false for panel 3 when divisions array is empty in create mode" time="0.0000665">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelValid &gt; should return true for panel 4 when categories are selected in create mode" time="0.0000605">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelValid &gt; should return false for panel 4 when categories array is empty in create mode" time="0.000071417">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelValid &gt; should return true for all panels in edit mode when fields have values" time="0.000133917">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelValid &gt; should return false for invalid panel number" time="0.0000695">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelEnabled &gt; should always enable all panels in edit mode" time="0.0000935">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelEnabled &gt; should always enable panel 1 in create mode" time="0.000049708">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelEnabled &gt; should enable panel 2 when panel 1 is valid in create mode" time="0.000045708">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelEnabled &gt; should enable panel 3 when panel 2 is valid in create mode" time="0.000042208">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelEnabled &gt; should not enable panel 4 when panel 3 is invalid in create mode" time="0.000049167">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelEnabled &gt; should return false for invalid panel number" time="0.000052334">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isFormDirty &gt; should return false when form fields are identical" time="0.000063584">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isFormDirty &gt; should return true when form fields are different" time="0.00004925">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isFormDirty &gt; should return true when array fields are different" time="0.000045375">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isFormDirty &gt; should return false when comparing empty forms" time="0.00004525">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; mergeErrors &gt; should merge display and server errors with server errors taking priority" time="0.000293834">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; mergeErrors &gt; should handle empty error objects" time="0.000096583">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; mapFlexibleToFormData &gt; should map all provided fields correctly" time="0.000113292">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; mapFlexibleToFormData &gt; should handle partial data" time="0.000061583">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; mapFlexibleToFormData &gt; should handle empty data" time="0.000055333">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; mapFlexibleToFormData &gt; should handle undefined and null values correctly" time="0.000067292">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; getPanelNumberForField &gt; should return correct panel number for panel 1 fields" time="0.000090292">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; getPanelNumberForField &gt; should return correct panel number for panel 2 fields" time="0.000051292">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; getPanelNumberForField &gt; should return correct panel number for panel 3 fields" time="0.000048583">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; getPanelNumberForField &gt; should return correct panel number for panel 4 fields" time="0.000044166">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; getPanelNumberForField &gt; should return 0 for unknown fields" time="0.000044916">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; shouldValidateField &gt; should return true when field is blurred" time="0.000056083">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; shouldValidateField &gt; should return true when forceShowAllErrors is true" time="0.000045333">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; shouldValidateField &gt; should return true when submitAttempted is true" time="0.000044625">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; shouldValidateField &gt; should return false when none of the conditions are met" time="0.000045833">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; shouldValidateField &gt; should return true when multiple conditions are met" time="0.00005275">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; resetStatePreserving &gt; should preserve specified keys" time="0.0000815">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; resetStatePreserving &gt; should preserve multiple keys" time="0.000067167">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; resetStatePreserving &gt; should return empty object when preserving no keys" time="0.000050291">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelComplete &gt; should return true when all panel fields are blurred and valid" time="0.000081333">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelComplete &gt; should return false when panel fields are not all blurred" time="0.000049875">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelComplete &gt; should return false when panel fields have errors" time="0.000047875">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelComplete &gt; should return false when panel fields are empty" time="0.00005325">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelComplete &gt; should handle array fields correctly" time="0.000050667">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelComplete &gt; should return false for array fields when they are empty" time="0.000061917">
        </testcase>
        <testcase classname="app/stores/helpers/__tests__/tournamentFormHelpers.test.ts" name="tournamentFormHelpers &gt; isPanelComplete &gt; should return false for invalid panel number" time="0.000048334">
        </testcase>
    </testsuite>
    <testsuite name="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/teams/__tests__/teams.$teamId.test.tsx" timestamp="2025-08-11T17:20:20.489Z" hostname="Mac.HOME" tests="11" failures="0" errors="0" skipped="0" time="0.076574042">
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/teams/__tests__/teams.$teamId.test.tsx" name="AdminTeamPage &gt; Header Display &gt; should display team name and club in header" time="0.009905333">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/teams/__tests__/teams.$teamId.test.tsx" name="AdminTeamPage &gt; Header Display &gt; should display translated division in header" time="0.001341125">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/teams/__tests__/teams.$teamId.test.tsx" name="AdminTeamPage &gt; Header Display &gt; should display fallback text when team data is missing" time="0.001037167">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/teams/__tests__/teams.$teamId.test.tsx" name="AdminTeamPage &gt; Delete Button &gt; should render delete button in header" time="0.006913834">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/teams/__tests__/teams.$teamId.test.tsx" name="AdminTeamPage &gt; Delete Button &gt; should show confirmation dialog when delete button is clicked" time="0.016420583">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/teams/__tests__/teams.$teamId.test.tsx" name="AdminTeamPage &gt; Delete Button &gt; should show confirmation dialog when confirmed" time="0.014218208">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/teams/__tests__/teams.$teamId.test.tsx" name="AdminTeamPage &gt; Delete Button &gt; should not show confirmation when cancelled" time="0.014346208">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/teams/__tests__/teams.$teamId.test.tsx" name="AdminTeamPage &gt; Team Form Integration &gt; should pass correct props to TeamForm component" time="0.004026709">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/teams/__tests__/teams.$teamId.test.tsx" name="AdminTeamPage &gt; Team Form Integration &gt; should pass action errors to TeamForm" time="0.001419166">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/teams/__tests__/teams.$teamId.test.tsx" name="AdminTeamPage &gt; Layout &gt; should have proper flex layout for header" time="0.001140375">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/teams/__tests__/teams.$teamId.test.tsx" name="AdminTeamPage &gt; Layout &gt; should position delete button correctly" time="0.004911208">
        </testcase>
    </testsuite>
    <testsuite name="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/tournaments/__tests__/tournaments.$tournamentId.test.tsx" timestamp="2025-08-11T17:20:20.490Z" hostname="Mac.HOME" tests="16" failures="0" errors="0" skipped="0" time="0.128936083">
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/tournaments/__tests__/tournaments.$tournamentId.test.tsx" name="EditTournamentPage &gt; Header Display &gt; should display tournament name in header" time="0.022556458">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/tournaments/__tests__/tournaments.$tournamentId.test.tsx" name="EditTournamentPage &gt; Header Display &gt; should display tournament location in header" time="0.001411709">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/tournaments/__tests__/tournaments.$tournamentId.test.tsx" name="EditTournamentPage &gt; Header Display &gt; should display fallback text when tournament data is missing" time="0.001157834">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/tournaments/__tests__/tournaments.$tournamentId.test.tsx" name="EditTournamentPage &gt; Delete Button &gt; should render delete button in header" time="0.019592458">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/tournaments/__tests__/tournaments.$tournamentId.test.tsx" name="EditTournamentPage &gt; Delete Button &gt; should show confirmation dialog when delete button is clicked" time="0.025571542">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/tournaments/__tests__/tournaments.$tournamentId.test.tsx" name="EditTournamentPage &gt; Delete Button &gt; should show confirmation dialog when confirmed" time="0.018029791">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/tournaments/__tests__/tournaments.$tournamentId.test.tsx" name="EditTournamentPage &gt; Delete Button &gt; should not show confirmation when cancelled" time="0.009453708">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/tournaments/__tests__/tournaments.$tournamentId.test.tsx" name="EditTournamentPage &gt; Success Message Display &gt; should display success message when action succeeds" time="0.002030417">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/tournaments/__tests__/tournaments.$tournamentId.test.tsx" name="EditTournamentPage &gt; Success Message Display &gt; should not display success message when no success" time="0.001071458">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/tournaments/__tests__/tournaments.$tournamentId.test.tsx" name="EditTournamentPage &gt; Tournament Form Integration &gt; should pass correct props to TournamentForm component" time="0.001267667">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/tournaments/__tests__/tournaments.$tournamentId.test.tsx" name="EditTournamentPage &gt; Tournament Form Integration &gt; should pass action errors to TournamentForm" time="0.001141667">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/tournaments/__tests__/tournaments.$tournamentId.test.tsx" name="EditTournamentPage &gt; Tournament Form Integration &gt; should pass success state to TournamentForm" time="0.001489209">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/tournaments/__tests__/tournaments.$tournamentId.test.tsx" name="EditTournamentPage &gt; Tournament Not Found &gt; should display not found message when tournament is null" time="0.002510917">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/tournaments/__tests__/tournaments.$tournamentId.test.tsx" name="EditTournamentPage &gt; Layout &gt; should have proper flex layout for header" time="0.00122525">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/tournaments/__tests__/tournaments.$tournamentId.test.tsx" name="EditTournamentPage &gt; Layout &gt; should position delete button correctly" time="0.018492709">
        </testcase>
        <testcase classname="app/routes/a7k9m2x5p8w1n4q6r3y8b5t1/tournaments/__tests__/tournaments.$tournamentId.test.tsx" name="EditTournamentPage &gt; Date Formatting &gt; should format dates correctly for form inputs" time="0.001021833">
        </testcase>
    </testsuite>
</testsuites>
